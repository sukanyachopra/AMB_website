import React from 'react';
export interface MapLayout {
    title: string;
    legendTitle: string;
    startColor: string;
    endColor: string;
    hoverTitle: string;
    noDataColor: string;
    borderColor: string;
    hoverColor?: string;
    hoverName?: string;
    hoverBorderColor?: string;
    width?: number;
    height?: number;
}
export interface RegionData {
    [key: string]: {
        value: number;
        [key: string]: any;
    };
}
interface IDatamapBox {
    regionData: RegionData;
    mapLayout: MapLayout;
    hoverComponent?: any;
}
declare class DatamapBox extends React.Component<IDatamapBox> {
    static defaultProps: {
        regionData: {};
    };
    state: {
        infoWindowPosition: {
            x: number;
            y: number;
        };
        isInfoWindowActive: boolean;
        activeState: {
            name: string;
            value: number;
        };
        regionData: RegionData;
        mapLayout: {
            title: string;
            legendTitle: string;
            startColor: string;
            endColor: string;
            hoverTitle: string;
            noDataColor: string;
            borderColor: string;
            hoverColor: string;
            hoverName: string;
            hoverBorderColor?: string | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
    };
    constructor(props: IDatamapBox);
    componentDidMount(): void;
    componentWillUnmount(): void;
    static getDerivedStateFromProps(props: IDatamapBox, state: any): {
        regionData: RegionData;
        mapLayout?: undefined;
    } | {
        mapLayout: {
            title: string;
            legendTitle: string;
            startColor: string;
            endColor: string;
            hoverTitle: string;
            noDataColor: string;
            borderColor: string;
            hoverColor: string;
            hoverName: string;
            hoverBorderColor?: string | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        regionData?: undefined;
    } | null;
    calculateExtremeValues(regions: RegionData): {
        min: number;
        max: number;
    };
    mouseMoveOnDatamap(e: any): void;
    mouseEnterOnDatamap(): void;
    mouseLeaveDatamap(): void;
    mouseEnterOnState(name: string, value: number): void;
    render(): JSX.Element;
}
export default DatamapBox;
