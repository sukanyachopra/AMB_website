var Cr = Object.defineProperty;
var Dr = (n, e, t) => e in n ? Cr(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var bn = (n, e, t) => (Dr(n, typeof e != "symbol" ? e + "" : e, t), t);
import Rn from "react";
var F = {}, $r = {
  get exports() {
    return F;
  },
  set exports(n) {
    F = n;
  }
}, zn = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var It;
function Or() {
  if (It)
    return zn;
  It = 1;
  var n = Rn, e = Symbol.for("react.element"), t = Symbol.for("react.fragment"), r = Object.prototype.hasOwnProperty, i = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, s = { key: !0, ref: !0, __self: !0, __source: !0 };
  function a(u, h, c) {
    var l, f = {}, p = null, d = null;
    c !== void 0 && (p = "" + c), h.key !== void 0 && (p = "" + h.key), h.ref !== void 0 && (d = h.ref);
    for (l in h)
      r.call(h, l) && !s.hasOwnProperty(l) && (f[l] = h[l]);
    if (u && u.defaultProps)
      for (l in h = u.defaultProps, h)
        f[l] === void 0 && (f[l] = h[l]);
    return { $$typeof: e, type: u, key: p, ref: d, props: f, _owner: i.current };
  }
  return zn.Fragment = t, zn.jsx = a, zn.jsxs = a, zn;
}
var Yn = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ft;
function Tr() {
  return Ft || (Ft = 1, process.env.NODE_ENV !== "production" && function() {
    var n = Rn, e = Symbol.for("react.element"), t = Symbol.for("react.portal"), r = Symbol.for("react.fragment"), i = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), a = Symbol.for("react.provider"), u = Symbol.for("react.context"), h = Symbol.for("react.forward_ref"), c = Symbol.for("react.suspense"), l = Symbol.for("react.suspense_list"), f = Symbol.for("react.memo"), p = Symbol.for("react.lazy"), d = Symbol.for("react.offscreen"), m = Symbol.iterator, M = "@@iterator";
    function b(o) {
      if (o === null || typeof o != "object")
        return null;
      var v = m && o[m] || o[M];
      return typeof v == "function" ? v : null;
    }
    var P = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function w(o) {
      {
        for (var v = arguments.length, x = new Array(v > 1 ? v - 1 : 0), _ = 1; _ < v; _++)
          x[_ - 1] = arguments[_];
        R("error", o, x);
      }
    }
    function R(o, v, x) {
      {
        var _ = P.ReactDebugCurrentFrame, I = _.getStackAddendum();
        I !== "" && (v += "%s", x = x.concat([I]));
        var H = x.map(function(k) {
          return String(k);
        });
        H.unshift("Warning: " + v), Function.prototype.apply.call(console[o], console, H);
      }
    }
    var E = !1, S = !1, $ = !1, L = !1, O = !1, T;
    T = Symbol.for("react.module.reference");
    function W(o) {
      return !!(typeof o == "string" || typeof o == "function" || o === r || o === s || O || o === i || o === c || o === l || L || o === d || E || S || $ || typeof o == "object" && o !== null && (o.$$typeof === p || o.$$typeof === f || o.$$typeof === a || o.$$typeof === u || o.$$typeof === h || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      o.$$typeof === T || o.getModuleId !== void 0));
    }
    function y(o, v, x) {
      var _ = o.displayName;
      if (_)
        return _;
      var I = v.displayName || v.name || "";
      return I !== "" ? x + "(" + I + ")" : x;
    }
    function V(o) {
      return o.displayName || "Context";
    }
    function N(o) {
      if (o == null)
        return null;
      if (typeof o.tag == "number" && w("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof o == "function")
        return o.displayName || o.name || null;
      if (typeof o == "string")
        return o;
      switch (o) {
        case r:
          return "Fragment";
        case t:
          return "Portal";
        case s:
          return "Profiler";
        case i:
          return "StrictMode";
        case c:
          return "Suspense";
        case l:
          return "SuspenseList";
      }
      if (typeof o == "object")
        switch (o.$$typeof) {
          case u:
            var v = o;
            return V(v) + ".Consumer";
          case a:
            var x = o;
            return V(x._context) + ".Provider";
          case h:
            return y(o, o.render, "ForwardRef");
          case f:
            var _ = o.displayName || null;
            return _ !== null ? _ : N(o.type) || "Memo";
          case p: {
            var I = o, H = I._payload, k = I._init;
            try {
              return N(k(H));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var D = Object.assign, g = 0, C, z, U, q, yn, an, cn;
    function on() {
    }
    on.__reactDisabledLog = !0;
    function Cn() {
      {
        if (g === 0) {
          C = console.log, z = console.info, U = console.warn, q = console.error, yn = console.group, an = console.groupCollapsed, cn = console.groupEnd;
          var o = {
            configurable: !0,
            enumerable: !0,
            value: on,
            writable: !0
          };
          Object.defineProperties(console, {
            info: o,
            log: o,
            warn: o,
            error: o,
            group: o,
            groupCollapsed: o,
            groupEnd: o
          });
        }
        g++;
      }
    }
    function xn() {
      {
        if (g--, g === 0) {
          var o = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: D({}, o, {
              value: C
            }),
            info: D({}, o, {
              value: z
            }),
            warn: D({}, o, {
              value: U
            }),
            error: D({}, o, {
              value: q
            }),
            group: D({}, o, {
              value: yn
            }),
            groupCollapsed: D({}, o, {
              value: an
            }),
            groupEnd: D({}, o, {
              value: cn
            })
          });
        }
        g < 0 && w("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var Te = P.ReactCurrentDispatcher, Ae;
    function te(o, v, x) {
      {
        if (Ae === void 0)
          try {
            throw Error();
          } catch (I) {
            var _ = I.stack.trim().match(/\n( *(at )?)/);
            Ae = _ && _[1] || "";
          }
        return `
` + Ae + o;
      }
    }
    var ke = !1, re;
    {
      var or = typeof WeakMap == "function" ? WeakMap : Map;
      re = new or();
    }
    function Mt(o, v) {
      if (!o || ke)
        return "";
      {
        var x = re.get(o);
        if (x !== void 0)
          return x;
      }
      var _;
      ke = !0;
      var I = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var H;
      H = Te.current, Te.current = null, Cn();
      try {
        if (v) {
          var k = function() {
            throw Error();
          };
          if (Object.defineProperty(k.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(k, []);
            } catch (mn) {
              _ = mn;
            }
            Reflect.construct(o, [], k);
          } else {
            try {
              k.call();
            } catch (mn) {
              _ = mn;
            }
            o.call(k.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (mn) {
            _ = mn;
          }
          o();
        }
      } catch (mn) {
        if (mn && _ && typeof mn.stack == "string") {
          for (var A = mn.stack.split(`
`), nn = _.stack.split(`
`), G = A.length - 1, X = nn.length - 1; G >= 1 && X >= 0 && A[G] !== nn[X]; )
            X--;
          for (; G >= 1 && X >= 0; G--, X--)
            if (A[G] !== nn[X]) {
              if (G !== 1 || X !== 1)
                do
                  if (G--, X--, X < 0 || A[G] !== nn[X]) {
                    var un = `
` + A[G].replace(" at new ", " at ");
                    return o.displayName && un.includes("<anonymous>") && (un = un.replace("<anonymous>", o.displayName)), typeof o == "function" && re.set(o, un), un;
                  }
                while (G >= 1 && X >= 0);
              break;
            }
        }
      } finally {
        ke = !1, Te.current = H, xn(), Error.prepareStackTrace = I;
      }
      var $n = o ? o.displayName || o.name : "", Lt = $n ? te($n) : "";
      return typeof o == "function" && re.set(o, Lt), Lt;
    }
    function ur(o, v, x) {
      return Mt(o, !1);
    }
    function sr(o) {
      var v = o.prototype;
      return !!(v && v.isReactComponent);
    }
    function ie(o, v, x) {
      if (o == null)
        return "";
      if (typeof o == "function")
        return Mt(o, sr(o));
      if (typeof o == "string")
        return te(o);
      switch (o) {
        case c:
          return te("Suspense");
        case l:
          return te("SuspenseList");
      }
      if (typeof o == "object")
        switch (o.$$typeof) {
          case h:
            return ur(o.render);
          case f:
            return ie(o.type, v, x);
          case p: {
            var _ = o, I = _._payload, H = _._init;
            try {
              return ie(H(I), v, x);
            } catch {
            }
          }
        }
      return "";
    }
    var ae = Object.prototype.hasOwnProperty, Pt = {}, Rt = P.ReactDebugCurrentFrame;
    function oe(o) {
      if (o) {
        var v = o._owner, x = ie(o.type, o._source, v ? v.type : null);
        Rt.setExtraStackFrame(x);
      } else
        Rt.setExtraStackFrame(null);
    }
    function lr(o, v, x, _, I) {
      {
        var H = Function.call.bind(ae);
        for (var k in o)
          if (H(o, k)) {
            var A = void 0;
            try {
              if (typeof o[k] != "function") {
                var nn = Error((_ || "React class") + ": " + x + " type `" + k + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof o[k] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw nn.name = "Invariant Violation", nn;
              }
              A = o[k](v, k, _, x, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (G) {
              A = G;
            }
            A && !(A instanceof Error) && (oe(I), w("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", _ || "React class", x, k, typeof A), oe(null)), A instanceof Error && !(A.message in Pt) && (Pt[A.message] = !0, oe(I), w("Failed %s type: %s", x, A.message), oe(null));
          }
      }
    }
    var fr = Array.isArray;
    function je(o) {
      return fr(o);
    }
    function cr(o) {
      {
        var v = typeof Symbol == "function" && Symbol.toStringTag, x = v && o[Symbol.toStringTag] || o.constructor.name || "Object";
        return x;
      }
    }
    function pr(o) {
      try {
        return _t(o), !1;
      } catch {
        return !0;
      }
    }
    function _t(o) {
      return "" + o;
    }
    function Nt(o) {
      if (pr(o))
        return w("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", cr(o)), _t(o);
    }
    var Hn = P.ReactCurrentOwner, hr = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, Ct, Dt, Le;
    Le = {};
    function dr(o) {
      if (ae.call(o, "ref")) {
        var v = Object.getOwnPropertyDescriptor(o, "ref").get;
        if (v && v.isReactWarning)
          return !1;
      }
      return o.ref !== void 0;
    }
    function gr(o) {
      if (ae.call(o, "key")) {
        var v = Object.getOwnPropertyDescriptor(o, "key").get;
        if (v && v.isReactWarning)
          return !1;
      }
      return o.key !== void 0;
    }
    function mr(o, v) {
      if (typeof o.ref == "string" && Hn.current && v && Hn.current.stateNode !== v) {
        var x = N(Hn.current.type);
        Le[x] || (w('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', N(Hn.current.type), o.ref), Le[x] = !0);
      }
    }
    function vr(o, v) {
      {
        var x = function() {
          Ct || (Ct = !0, w("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", v));
        };
        x.isReactWarning = !0, Object.defineProperty(o, "key", {
          get: x,
          configurable: !0
        });
      }
    }
    function yr(o, v) {
      {
        var x = function() {
          Dt || (Dt = !0, w("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", v));
        };
        x.isReactWarning = !0, Object.defineProperty(o, "ref", {
          get: x,
          configurable: !0
        });
      }
    }
    var xr = function(o, v, x, _, I, H, k) {
      var A = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: e,
        // Built-in properties that belong on the element
        type: o,
        key: v,
        ref: x,
        props: k,
        // Record the component responsible for creating this element.
        _owner: H
      };
      return A._store = {}, Object.defineProperty(A._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(A, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: _
      }), Object.defineProperty(A, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: I
      }), Object.freeze && (Object.freeze(A.props), Object.freeze(A)), A;
    };
    function wr(o, v, x, _, I) {
      {
        var H, k = {}, A = null, nn = null;
        x !== void 0 && (Nt(x), A = "" + x), gr(v) && (Nt(v.key), A = "" + v.key), dr(v) && (nn = v.ref, mr(v, I));
        for (H in v)
          ae.call(v, H) && !hr.hasOwnProperty(H) && (k[H] = v[H]);
        if (o && o.defaultProps) {
          var G = o.defaultProps;
          for (H in G)
            k[H] === void 0 && (k[H] = G[H]);
        }
        if (A || nn) {
          var X = typeof o == "function" ? o.displayName || o.name || "Unknown" : o;
          A && vr(k, X), nn && yr(k, X);
        }
        return xr(o, A, nn, I, _, Hn.current, k);
      }
    }
    var Ie = P.ReactCurrentOwner, $t = P.ReactDebugCurrentFrame;
    function Dn(o) {
      if (o) {
        var v = o._owner, x = ie(o.type, o._source, v ? v.type : null);
        $t.setExtraStackFrame(x);
      } else
        $t.setExtraStackFrame(null);
    }
    var Fe;
    Fe = !1;
    function We(o) {
      return typeof o == "object" && o !== null && o.$$typeof === e;
    }
    function Ot() {
      {
        if (Ie.current) {
          var o = N(Ie.current.type);
          if (o)
            return `

Check the render method of \`` + o + "`.";
        }
        return "";
      }
    }
    function br(o) {
      {
        if (o !== void 0) {
          var v = o.fileName.replace(/^.*[\\\/]/, ""), x = o.lineNumber;
          return `

Check your code at ` + v + ":" + x + ".";
        }
        return "";
      }
    }
    var Tt = {};
    function Er(o) {
      {
        var v = Ot();
        if (!v) {
          var x = typeof o == "string" ? o : o.displayName || o.name;
          x && (v = `

Check the top-level render call using <` + x + ">.");
        }
        return v;
      }
    }
    function At(o, v) {
      {
        if (!o._store || o._store.validated || o.key != null)
          return;
        o._store.validated = !0;
        var x = Er(v);
        if (Tt[x])
          return;
        Tt[x] = !0;
        var _ = "";
        o && o._owner && o._owner !== Ie.current && (_ = " It was passed a child from " + N(o._owner.type) + "."), Dn(o), w('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', x, _), Dn(null);
      }
    }
    function kt(o, v) {
      {
        if (typeof o != "object")
          return;
        if (je(o))
          for (var x = 0; x < o.length; x++) {
            var _ = o[x];
            We(_) && At(_, v);
          }
        else if (We(o))
          o._store && (o._store.validated = !0);
        else if (o) {
          var I = b(o);
          if (typeof I == "function" && I !== o.entries)
            for (var H = I.call(o), k; !(k = H.next()).done; )
              We(k.value) && At(k.value, v);
        }
      }
    }
    function Sr(o) {
      {
        var v = o.type;
        if (v == null || typeof v == "string")
          return;
        var x;
        if (typeof v == "function")
          x = v.propTypes;
        else if (typeof v == "object" && (v.$$typeof === h || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        v.$$typeof === f))
          x = v.propTypes;
        else
          return;
        if (x) {
          var _ = N(v);
          lr(x, o.props, "prop", _, o);
        } else if (v.PropTypes !== void 0 && !Fe) {
          Fe = !0;
          var I = N(v);
          w("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", I || "Unknown");
        }
        typeof v.getDefaultProps == "function" && !v.getDefaultProps.isReactClassApproved && w("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Mr(o) {
      {
        for (var v = Object.keys(o.props), x = 0; x < v.length; x++) {
          var _ = v[x];
          if (_ !== "children" && _ !== "key") {
            Dn(o), w("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", _), Dn(null);
            break;
          }
        }
        o.ref !== null && (Dn(o), w("Invalid attribute `ref` supplied to `React.Fragment`."), Dn(null));
      }
    }
    function jt(o, v, x, _, I, H) {
      {
        var k = W(o);
        if (!k) {
          var A = "";
          (o === void 0 || typeof o == "object" && o !== null && Object.keys(o).length === 0) && (A += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var nn = br(I);
          nn ? A += nn : A += Ot();
          var G;
          o === null ? G = "null" : je(o) ? G = "array" : o !== void 0 && o.$$typeof === e ? (G = "<" + (N(o.type) || "Unknown") + " />", A = " Did you accidentally export a JSX literal instead of a component?") : G = typeof o, w("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", G, A);
        }
        var X = wr(o, v, x, I, H);
        if (X == null)
          return X;
        if (k) {
          var un = v.children;
          if (un !== void 0)
            if (_)
              if (je(un)) {
                for (var $n = 0; $n < un.length; $n++)
                  kt(un[$n], o);
                Object.freeze && Object.freeze(un);
              } else
                w("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              kt(un, o);
        }
        return o === r ? Mr(X) : Sr(X), X;
      }
    }
    function Pr(o, v, x) {
      return jt(o, v, x, !0);
    }
    function Rr(o, v, x) {
      return jt(o, v, x, !1);
    }
    var _r = Rr, Nr = Pr;
    Yn.Fragment = r, Yn.jsx = _r, Yn.jsxs = Nr;
  }()), Yn;
}
(function(n) {
  process.env.NODE_ENV === "production" ? n.exports = Or() : n.exports = Tr();
})($r);
function Ar(n) {
  return n;
}
function kr(n) {
  if (n == null)
    return Ar;
  var e, t, r = n.scale[0], i = n.scale[1], s = n.translate[0], a = n.translate[1];
  return function(u, h) {
    h || (e = t = 0);
    var c = 2, l = u.length, f = new Array(l);
    for (f[0] = (e += u[0]) * r + s, f[1] = (t += u[1]) * i + a; c < l; )
      f[c] = u[c], ++c;
    return f;
  };
}
function jr(n, e) {
  for (var t, r = n.length, i = r - e; i < --r; )
    t = n[i], n[i++] = n[r], n[r] = t;
}
function Lr(n, e) {
  return typeof e == "string" && (e = n.objects[e]), e.type === "GeometryCollection" ? { type: "FeatureCollection", features: e.geometries.map(function(t) {
    return Wt(n, t);
  }) } : Wt(n, e);
}
function Wt(n, e) {
  var t = e.id, r = e.bbox, i = e.properties == null ? {} : e.properties, s = Ir(n, e);
  return t == null && r == null ? { type: "Feature", properties: i, geometry: s } : r == null ? { type: "Feature", id: t, properties: i, geometry: s } : { type: "Feature", id: t, bbox: r, properties: i, geometry: s };
}
function Ir(n, e) {
  var t = kr(n.transform), r = n.arcs;
  function i(l, f) {
    f.length && f.pop();
    for (var p = r[l < 0 ? ~l : l], d = 0, m = p.length; d < m; ++d)
      f.push(t(p[d], d));
    l < 0 && jr(f, m);
  }
  function s(l) {
    return t(l);
  }
  function a(l) {
    for (var f = [], p = 0, d = l.length; p < d; ++p)
      i(l[p], f);
    return f.length < 2 && f.push(f[0]), f;
  }
  function u(l) {
    for (var f = a(l); f.length < 4; )
      f.push(f[0]);
    return f;
  }
  function h(l) {
    return l.map(u);
  }
  function c(l) {
    var f = l.type, p;
    switch (f) {
      case "GeometryCollection":
        return { type: f, geometries: l.geometries.map(c) };
      case "Point":
        p = s(l.coordinates);
        break;
      case "MultiPoint":
        p = l.coordinates.map(s);
        break;
      case "LineString":
        p = a(l.arcs);
        break;
      case "MultiLineString":
        p = l.arcs.map(a);
        break;
      case "Polygon":
        p = h(l.arcs);
        break;
      case "MultiPolygon":
        p = l.arcs.map(h);
        break;
      default:
        return null;
    }
    return { type: f, coordinates: p };
  }
  return c(e);
}
const Fr = "Topology", Wr = {
  india: {
    type: "GeometryCollection",
    geometries: [
      {
        type: "Polygon",
        properties: {
          name: null
        },
        id: "-99",
        arcs: [
          [
            0
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "AN",
        properties: {
          name: "Andaman & Nicobar Island"
        },
        arcs: [
          [
            [
              0
            ]
          ],
          [
            [
              1
            ]
          ],
          [
            [
              2
            ]
          ],
          [
            [
              3
            ]
          ],
          [
            [
              4
            ]
          ],
          [
            [
              5
            ]
          ],
          [
            [
              6
            ]
          ],
          [
            [
              7
            ]
          ],
          [
            [
              8
            ]
          ],
          [
            [
              9
            ]
          ],
          [
            [
              10
            ]
          ],
          [
            [
              11
            ]
          ],
          [
            [
              12
            ]
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "AP",
        properties: {
          name: "Andhra Pradesh"
        },
        arcs: [
          [
            [
              13
            ]
          ],
          [
            [
              14,
              15,
              16,
              17,
              18
            ]
          ]
        ]
      },
      {
        type: "Polygon",
        id: "AR",
        properties: {
          name: "Arunachal Pradesh"
        },
        arcs: [
          [
            19,
            20,
            21
          ]
        ]
      },
      {
        type: "Polygon",
        id: "AS",
        properties: {
          name: "Assam"
        },
        arcs: [
          [
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            -21
          ]
        ]
      },
      {
        type: "Polygon",
        id: "BR",
        properties: {
          name: "Bihar"
        },
        arcs: [
          [
            31,
            32,
            33,
            34
          ]
        ]
      },
      {
        type: "Polygon",
        id: "CT",
        properties: {
          name: "Chhattisgarh"
        },
        arcs: [
          [
            35,
            36,
            37,
            38,
            39,
            40
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "PY",
        properties: {
          name: "Puducherry"
        },
        arcs: [
          [
            [
              41,
              42
            ]
          ],
          [
            [
              -44
            ]
          ],
          [
            [
              44
            ]
          ],
          [
            [
              45,
              46
            ]
          ],
          [
            [
              47
            ]
          ],
          [
            [
              48
            ]
          ],
          [
            [
              49
            ]
          ],
          [
            [
              50
            ]
          ],
          [
            [
              51,
              52
            ],
            [
              53
            ]
          ],
          [
            [
              54,
              55
            ]
          ]
        ]
      },
      {
        type: "Polygon",
        id: "PB",
        properties: {
          name: "Punjab"
        },
        arcs: [
          [
            56,
            57,
            58,
            59,
            60,
            61,
            62
          ]
        ]
      },
      {
        type: "Polygon",
        id: "RJ",
        properties: {
          name: "Rajasthan"
        },
        arcs: [
          [
            63,
            64,
            65,
            66,
            67,
            -60
          ]
        ]
      },
      {
        type: "Polygon",
        id: "SK",
        properties: {
          name: "Sikkim"
        },
        arcs: [
          [
            68,
            69
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "TN",
        properties: {
          name: "Tamil Nadu"
        },
        arcs: [
          [
            [
              -54
            ]
          ],
          [
            [
              70,
              -47,
              71,
              -43,
              72,
              73,
              74,
              -16,
              75,
              -55,
              76,
              -53
            ],
            [
              -49
            ],
            [
              -51
            ],
            [
              -50
            ],
            [
              -48
            ],
            [
              -45
            ]
          ]
        ]
      },
      {
        type: "Polygon",
        id: "CH",
        properties: {
          name: "Chandigarh"
        },
        arcs: [
          [
            77,
            -58
          ]
        ]
      },
      {
        type: "Polygon",
        id: "TS",
        properties: {
          name: "Telangana"
        },
        arcs: [
          [
            -37,
            78,
            -18,
            79,
            80
          ]
        ]
      },
      {
        type: "Polygon",
        id: "TR",
        properties: {
          name: "Tripura"
        },
        arcs: [
          [
            -26,
            81,
            82
          ]
        ]
      },
      {
        type: "Polygon",
        id: "UP",
        properties: {
          name: "Uttar Pradesh"
        },
        arcs: [
          [
            83,
            -34,
            84,
            -40,
            85,
            -65,
            86,
            87,
            88,
            89,
            90
          ]
        ]
      },
      {
        type: "Polygon",
        id: "UK",
        properties: {
          name: "Uttarakhand"
        },
        arcs: [
          [
            -91,
            91,
            92
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "WB",
        properties: {
          name: "West Bengal"
        },
        arcs: [
          [
            [
              93
            ]
          ],
          [
            [
              94
            ]
          ],
          [
            [
              95
            ]
          ],
          [
            [
              96
            ]
          ],
          [
            [
              97
            ]
          ],
          [
            [
              98
            ]
          ],
          [
            [
              99
            ]
          ],
          [
            [
              100
            ]
          ],
          [
            [
              101
            ]
          ],
          [
            [
              102
            ]
          ],
          [
            [
              103
            ]
          ],
          [
            [
              104
            ]
          ],
          [
            [
              105
            ]
          ],
          [
            [
              106
            ]
          ],
          [
            [
              107,
              -30,
              108,
              109,
              110,
              -32,
              111,
              -69
            ]
          ]
        ]
      },
      {
        type: "Polygon",
        id: "OD",
        properties: {
          name: "Odisha"
        },
        arcs: [
          [
            -110,
            112,
            -19,
            -79,
            -36,
            113
          ]
        ]
      },
      {
        type: "Polygon",
        id: "DN",
        properties: {
          name: "Dadara & Nagar Haveli"
        },
        arcs: [
          [
            114,
            115
          ]
        ]
      },
      {
        type: "Polygon",
        id: "DD",
        properties: {
          name: "Daman & Diu"
        },
        arcs: [
          [
            116,
            117
          ]
        ]
      },
      {
        type: "Polygon",
        id: "GA",
        properties: {
          name: "Goa"
        },
        arcs: [
          [
            118,
            119,
            120
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "GJ",
        properties: {
          name: "Gujarat"
        },
        arcs: [
          [
            [
              121
            ]
          ],
          [
            [
              122
            ]
          ],
          [
            [
              123
            ]
          ],
          [
            [
              124
            ]
          ],
          [
            [
              125
            ]
          ],
          [
            [
              -67,
              126,
              127,
              -116,
              128,
              129,
              -118,
              130
            ]
          ]
        ]
      },
      {
        type: "Polygon",
        id: "HR",
        properties: {
          name: "Haryana"
        },
        arcs: [
          [
            -89,
            131,
            -87,
            -64,
            -59,
            -78,
            -57,
            132
          ]
        ]
      },
      {
        type: "Polygon",
        id: "HP",
        properties: {
          name: "Himachal Pradesh"
        },
        arcs: [
          [
            133,
            -92,
            -90,
            -133,
            -63,
            134
          ]
        ]
      },
      {
        type: "Polygon",
        id: "JK",
        properties: {
          name: "Jammu & Kashmir"
        },
        arcs: [
          [
            -135,
            -62,
            135
          ]
        ]
      },
      {
        type: "Polygon",
        id: "JH",
        properties: {
          name: "Jharkhand"
        },
        arcs: [
          [
            -111,
            -114,
            -41,
            -85,
            -33
          ]
        ]
      },
      {
        type: "Polygon",
        id: "KA",
        properties: {
          name: "Karnataka"
        },
        arcs: [
          [
            -80,
            -17,
            -75,
            136,
            137,
            -119,
            138
          ]
        ]
      },
      {
        type: "Polygon",
        id: "KL",
        properties: {
          name: "Kerala"
        },
        arcs: [
          [
            -74,
            139,
            -137
          ],
          [
            43
          ]
        ]
      },
      {
        type: "MultiPolygon",
        id: "LD",
        properties: {
          name: "Lakshadweep"
        },
        arcs: [
          [
            [
              140
            ]
          ],
          [
            [
              141
            ]
          ]
        ]
      },
      {
        type: "Polygon",
        id: "MP",
        properties: {
          name: "Madhya Pradesh"
        },
        arcs: [
          [
            -39,
            142,
            -127,
            -66,
            -86
          ]
        ]
      },
      {
        type: "Polygon",
        id: "MH",
        properties: {
          name: "Maharashtra"
        },
        arcs: [
          [
            -38,
            -81,
            -139,
            -121,
            143,
            -129,
            -115,
            -128,
            -143
          ]
        ]
      },
      {
        type: "Polygon",
        id: "MN",
        properties: {
          name: "Manipur"
        },
        arcs: [
          [
            144,
            145,
            -24,
            146
          ]
        ]
      },
      {
        type: "Polygon",
        id: "ML",
        properties: {
          name: "Meghalaya"
        },
        arcs: [
          [
            147,
            -28
          ]
        ]
      },
      {
        type: "Polygon",
        id: "MZ",
        properties: {
          name: "Mizoram"
        },
        arcs: [
          [
            -146,
            148,
            -82,
            -25
          ]
        ]
      },
      {
        type: "Polygon",
        id: "NL",
        properties: {
          name: "Nagaland"
        },
        arcs: [
          [
            149,
            -147,
            -23,
            -20
          ]
        ]
      },
      {
        type: "Polygon",
        id: "DL",
        properties: {
          name: "Delhi"
        },
        arcs: [
          [
            -88,
            -132
          ]
        ]
      }
    ]
  },
  places: {
    type: "GeometryCollection",
    geometries: [
      {
        type: "Point",
        properties: {
          name: "Delhi"
        },
        coordinates: [
          3093,
          7227
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Hyderabad"
        },
        coordinates: [
          3521,
          3510
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Pune"
        },
        coordinates: [
          1936,
          3883
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Nagpur"
        },
        coordinates: [
          3730,
          4754
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Jaipur"
        },
        coordinates: [
          2607,
          6650
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Kanpur"
        },
        coordinates: [
          4151,
          6498
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Patna"
        },
        coordinates: [
          5798,
          6223
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Chennai"
        },
        coordinates: [
          4137,
          2089
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Ahmedabad"
        },
        coordinates: [
          1501,
          5367
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Surat"
        },
        coordinates: [
          1590,
          4764
        ]
      },
      {
        type: "Point",
        properties: {
          name: "New Delhi"
        },
        coordinates: [
          3083,
          7203
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Bangalore"
        },
        coordinates: [
          3206,
          2050
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Mumbai"
        },
        coordinates: [
          1596,
          4044
        ]
      },
      {
        type: "Point",
        properties: {
          name: "Kolkata"
        },
        coordinates: [
          6892,
          5191
        ]
      }
    ]
  }
}, Hr = [
  [
    [
      8784,
      159
    ],
    [
      11,
      -12
    ],
    [
      2,
      -38
    ],
    [
      15,
      -26
    ],
    [
      -15,
      -69
    ],
    [
      -18,
      -14
    ],
    [
      -21,
      36
    ],
    [
      -9,
      32
    ],
    [
      -24,
      17
    ],
    [
      -7,
      37
    ],
    [
      12,
      21
    ],
    [
      16,
      0
    ],
    [
      38,
      16
    ]
  ],
  [
    [
      8737,
      226
    ],
    [
      15,
      -22
    ],
    [
      -11,
      -22
    ],
    [
      -33,
      -13
    ],
    [
      2,
      33
    ],
    [
      25,
      8
    ],
    [
      2,
      16
    ]
  ],
  [
    [
      8624,
      417
    ],
    [
      5,
      -17
    ],
    [
      22,
      -12
    ],
    [
      -29,
      -17
    ],
    [
      -23,
      26
    ],
    [
      25,
      20
    ]
  ],
  [
    [
      8673,
      486
    ],
    [
      -5,
      -30
    ],
    [
      14,
      -22
    ],
    [
      -23,
      -7
    ],
    [
      -10,
      41
    ],
    [
      24,
      18
    ]
  ],
  [
    [
      8423,
      819
    ],
    [
      12,
      -25
    ],
    [
      -10,
      -15
    ],
    [
      -23,
      1
    ],
    [
      -3,
      32
    ],
    [
      24,
      7
    ]
  ],
  [
    [
      8328,
      1365
    ],
    [
      14,
      -11
    ],
    [
      13,
      -54
    ],
    [
      -20,
      -28
    ],
    [
      10,
      -13
    ],
    [
      -23,
      -21
    ],
    [
      -28,
      12
    ],
    [
      1,
      22
    ],
    [
      -13,
      18
    ],
    [
      -1,
      31
    ],
    [
      47,
      44
    ]
  ],
  [
    [
      8370,
      1567
    ],
    [
      15,
      -24
    ],
    [
      2,
      -21
    ],
    [
      -32,
      -8
    ],
    [
      5,
      36
    ],
    [
      10,
      17
    ]
  ],
  [
    [
      8484,
      1743
    ],
    [
      27,
      -46
    ],
    [
      -40,
      27
    ],
    [
      13,
      19
    ]
  ],
  [
    [
      8389,
      1808
    ],
    [
      21,
      -21
    ],
    [
      -7,
      -30
    ],
    [
      17,
      -72
    ],
    [
      -11,
      -49
    ],
    [
      -1,
      -36
    ],
    [
      -8,
      -30
    ],
    [
      -28,
      1
    ],
    [
      -19,
      49
    ],
    [
      -13,
      18
    ],
    [
      -1,
      31
    ],
    [
      -13,
      10
    ],
    [
      17,
      32
    ],
    [
      17,
      4
    ],
    [
      11,
      72
    ],
    [
      18,
      21
    ]
  ],
  [
    [
      8433,
      1829
    ],
    [
      16,
      -1
    ],
    [
      1,
      -31
    ],
    [
      -17,
      -13
    ],
    [
      -11,
      -27
    ],
    [
      -18,
      5
    ],
    [
      10,
      43
    ],
    [
      19,
      24
    ]
  ],
  [
    [
      8458,
      2031
    ],
    [
      10,
      -10
    ],
    [
      14,
      -48
    ],
    [
      -4,
      -48
    ],
    [
      7,
      -17
    ],
    [
      -12,
      -31
    ],
    [
      -14,
      -11
    ],
    [
      -24,
      -37
    ],
    [
      -45,
      10
    ],
    [
      0,
      88
    ],
    [
      13,
      13
    ],
    [
      -5,
      62
    ],
    [
      34,
      23
    ],
    [
      26,
      6
    ]
  ],
  [
    [
      8389,
      2056
    ],
    [
      8,
      -5
    ],
    [
      0,
      -34
    ],
    [
      -19,
      3
    ],
    [
      11,
      36
    ]
  ],
  [
    [
      8503,
      2247
    ],
    [
      1,
      -48
    ],
    [
      13,
      -26
    ],
    [
      -32,
      1
    ],
    [
      28,
      -32
    ],
    [
      -9,
      -25
    ],
    [
      1,
      -31
    ],
    [
      -10,
      -17
    ],
    [
      -19,
      -1
    ],
    [
      -4,
      -18
    ],
    [
      -49,
      -19
    ],
    [
      -3,
      33
    ],
    [
      14,
      64
    ],
    [
      0,
      39
    ],
    [
      15,
      47
    ],
    [
      54,
      33
    ]
  ],
  [
    [
      4519,
      3158
    ],
    [
      -40,
      -18
    ],
    [
      -3,
      11
    ],
    [
      43,
      7
    ]
  ],
  [
    [
      5675,
      4064
    ],
    [
      -27,
      -37
    ],
    [
      -37,
      -33
    ],
    [
      -9,
      -27
    ],
    [
      -22,
      -17
    ],
    [
      -44,
      -52
    ],
    [
      -18,
      -8
    ],
    [
      -10,
      -19
    ],
    [
      -50,
      -48
    ],
    [
      -6,
      -16
    ],
    [
      -76,
      -34
    ],
    [
      -9,
      -9
    ],
    [
      -57,
      -23
    ],
    [
      -47,
      -33
    ],
    [
      -4,
      -13
    ],
    [
      -27,
      -17
    ],
    [
      -20,
      -34
    ],
    [
      -68,
      -72
    ],
    [
      -60,
      -24
    ],
    [
      -17,
      -15
    ],
    [
      -82,
      -34
    ],
    [
      -66,
      -37
    ],
    [
      -40,
      -30
    ],
    [
      -49,
      -46
    ],
    [
      -18,
      -42
    ],
    [
      40,
      -23
    ],
    [
      -5,
      -34
    ],
    [
      -18,
      -51
    ],
    [
      -40,
      -22
    ],
    [
      -73,
      -35
    ],
    [
      -39,
      -9
    ],
    [
      -44,
      -20
    ],
    [
      -26,
      10
    ],
    [
      -42,
      4
    ],
    [
      -42,
      -5
    ],
    [
      -8,
      8
    ],
    [
      -42,
      -14
    ],
    [
      2,
      -17
    ],
    [
      -14,
      -13
    ],
    [
      -24,
      -83
    ],
    [
      -37,
      -26
    ],
    [
      -17,
      -24
    ],
    [
      5,
      -16
    ],
    [
      -17,
      -13
    ],
    [
      -42,
      -10
    ],
    [
      -12,
      5
    ],
    [
      4,
      29
    ],
    [
      -29,
      26
    ],
    [
      -75,
      -10
    ],
    [
      -8,
      -10
    ],
    [
      -49,
      -25
    ],
    [
      -36,
      -45
    ],
    [
      -15,
      -50
    ],
    [
      -22,
      -27
    ],
    [
      -18,
      -41
    ],
    [
      3,
      -13
    ],
    [
      -14,
      -55
    ],
    [
      23,
      -105
    ],
    [
      28,
      -55
    ],
    [
      -8,
      -72
    ],
    [
      -15,
      -54
    ],
    [
      6,
      -42
    ],
    [
      35,
      -88
    ],
    [
      -4,
      -35
    ],
    [
      11,
      -40
    ]
  ],
  [
    [
      4134,
      2244
    ],
    [
      -15,
      -26
    ],
    [
      -71,
      6
    ],
    [
      -15,
      -12
    ],
    [
      -12,
      -38
    ],
    [
      -43,
      -11
    ],
    [
      -44,
      -22
    ],
    [
      -1,
      15
    ],
    [
      -36,
      -11
    ],
    [
      -10,
      20
    ],
    [
      -40,
      4
    ],
    [
      1,
      -45
    ],
    [
      -25,
      -7
    ],
    [
      -17,
      -16
    ],
    [
      -25,
      6
    ],
    [
      -25,
      -42
    ],
    [
      -59,
      23
    ],
    [
      -12,
      -5
    ],
    [
      -50,
      4
    ],
    [
      -62,
      -33
    ],
    [
      2,
      -20
    ],
    [
      -25,
      -72
    ],
    [
      -32,
      -11
    ],
    [
      1,
      -15
    ],
    [
      -32,
      -2
    ],
    [
      -48,
      26
    ],
    [
      -2,
      21
    ]
  ],
  [
    [
      3437,
      1981
    ],
    [
      6,
      31
    ],
    [
      22,
      0
    ],
    [
      14,
      26
    ],
    [
      39,
      12
    ],
    [
      -2,
      23
    ],
    [
      18,
      7
    ],
    [
      1,
      22
    ],
    [
      15,
      23
    ],
    [
      5,
      27
    ],
    [
      -23,
      2
    ],
    [
      -50,
      25
    ],
    [
      6,
      12
    ],
    [
      3,
      63
    ],
    [
      -45,
      -3
    ],
    [
      -36,
      25
    ],
    [
      -22,
      0
    ],
    [
      13,
      42
    ],
    [
      -4,
      25
    ],
    [
      -23,
      11
    ],
    [
      -44,
      3
    ],
    [
      -17,
      10
    ],
    [
      -12,
      -22
    ],
    [
      -34,
      -19
    ],
    [
      -39,
      -14
    ],
    [
      -30,
      -18
    ],
    [
      -22,
      12
    ],
    [
      -13,
      28
    ],
    [
      -41,
      10
    ],
    [
      -23,
      12
    ],
    [
      -26,
      -26
    ],
    [
      1,
      -20
    ],
    [
      -45,
      5
    ],
    [
      -23,
      13
    ],
    [
      23,
      38
    ],
    [
      -14,
      19
    ],
    [
      -18,
      43
    ],
    [
      -18,
      15
    ],
    [
      45,
      5
    ],
    [
      1,
      -40
    ],
    [
      33,
      -3
    ],
    [
      5,
      -15
    ],
    [
      49,
      3
    ],
    [
      12,
      6
    ],
    [
      12,
      -42
    ],
    [
      25,
      -1
    ],
    [
      -13,
      37
    ],
    [
      -15,
      16
    ],
    [
      20,
      16
    ],
    [
      -2,
      20
    ],
    [
      41,
      3
    ],
    [
      -4,
      29
    ],
    [
      -36,
      22
    ],
    [
      -12,
      -19
    ],
    [
      -27,
      2
    ],
    [
      0,
      18
    ],
    [
      -29,
      -6
    ],
    [
      -15,
      8
    ],
    [
      -35,
      -32
    ],
    [
      -39,
      0
    ],
    [
      2,
      21
    ],
    [
      -15,
      5
    ],
    [
      -6,
      23
    ],
    [
      31,
      29
    ],
    [
      -37,
      -1
    ],
    [
      -22,
      17
    ],
    [
      -14,
      23
    ],
    [
      4,
      26
    ],
    [
      21,
      36
    ],
    [
      11,
      59
    ],
    [
      -35,
      2
    ],
    [
      12,
      40
    ],
    [
      27,
      -21
    ],
    [
      31,
      -5
    ],
    [
      49,
      6
    ],
    [
      19,
      46
    ],
    [
      -6,
      38
    ],
    [
      -38,
      24
    ],
    [
      -3,
      25
    ],
    [
      -1,
      64
    ],
    [
      19,
      8
    ],
    [
      -12,
      24
    ],
    [
      10,
      61
    ],
    [
      23,
      10
    ],
    [
      37,
      6
    ],
    [
      60,
      -5
    ],
    [
      29,
      -7
    ]
  ],
  [
    [
      3191,
      3024
    ],
    [
      60,
      -16
    ],
    [
      39,
      -2
    ],
    [
      31,
      10
    ],
    [
      73,
      -23
    ],
    [
      22,
      7
    ],
    [
      5,
      17
    ],
    [
      22,
      12
    ],
    [
      8,
      33
    ],
    [
      17,
      -2
    ],
    [
      30,
      17
    ],
    [
      53,
      -8
    ],
    [
      27,
      11
    ],
    [
      35,
      -23
    ],
    [
      33,
      22
    ],
    [
      29,
      12
    ],
    [
      -4,
      22
    ],
    [
      38,
      18
    ],
    [
      54,
      -9
    ],
    [
      16,
      11
    ],
    [
      -4,
      37
    ],
    [
      6,
      52
    ],
    [
      12,
      13
    ],
    [
      55,
      7
    ],
    [
      25,
      16
    ],
    [
      51,
      11
    ],
    [
      44,
      22
    ],
    [
      30,
      -10
    ],
    [
      27,
      -22
    ],
    [
      36,
      37
    ],
    [
      8,
      23
    ],
    [
      -27,
      16
    ],
    [
      19,
      34
    ],
    [
      13,
      -1
    ],
    [
      38,
      18
    ],
    [
      23,
      -2
    ],
    [
      13,
      -18
    ],
    [
      6,
      -28
    ],
    [
      34,
      -9
    ],
    [
      13,
      -18
    ],
    [
      37,
      -9
    ],
    [
      -3,
      21
    ],
    [
      10,
      33
    ],
    [
      -18,
      8
    ],
    [
      -31,
      -2
    ],
    [
      2,
      24
    ],
    [
      17,
      28
    ],
    [
      22,
      12
    ],
    [
      42,
      -23
    ],
    [
      48,
      -10
    ],
    [
      12,
      4
    ],
    [
      4,
      32
    ],
    [
      12,
      18
    ],
    [
      27,
      -7
    ],
    [
      61,
      17
    ],
    [
      10,
      32
    ],
    [
      26,
      -3
    ],
    [
      19,
      23
    ],
    [
      21,
      -11
    ],
    [
      20,
      9
    ],
    [
      17,
      22
    ],
    [
      4,
      46
    ],
    [
      41,
      57
    ],
    [
      17,
      2
    ],
    [
      41,
      25
    ],
    [
      -12,
      16
    ]
  ],
  [
    [
      4647,
      3675
    ],
    [
      15,
      14
    ],
    [
      46,
      16
    ],
    [
      30,
      24
    ],
    [
      48,
      -5
    ],
    [
      26,
      -20
    ],
    [
      6,
      18
    ],
    [
      27,
      4
    ],
    [
      -1,
      56
    ],
    [
      9,
      63
    ],
    [
      41,
      35
    ],
    [
      15,
      -4
    ],
    [
      4,
      -31
    ],
    [
      22,
      -14
    ],
    [
      -4,
      -36
    ],
    [
      61,
      25
    ],
    [
      11,
      35
    ],
    [
      61,
      -27
    ],
    [
      31,
      12
    ],
    [
      -14,
      57
    ],
    [
      20,
      30
    ],
    [
      104,
      71
    ],
    [
      -26,
      31
    ],
    [
      7,
      13
    ],
    [
      48,
      -2
    ],
    [
      45,
      31
    ],
    [
      5,
      16
    ],
    [
      36,
      -55
    ],
    [
      22,
      11
    ],
    [
      28,
      -63
    ],
    [
      61,
      -11
    ],
    [
      14,
      -13
    ],
    [
      43,
      14
    ],
    [
      40,
      2
    ],
    [
      28,
      48
    ],
    [
      33,
      33
    ],
    [
      29,
      -6
    ],
    [
      22,
      34
    ],
    [
      35,
      -17
    ]
  ],
  [
    [
      9259,
      6570
    ],
    [
      -18,
      59
    ],
    [
      15,
      7
    ],
    [
      -11,
      52
    ]
  ],
  [
    [
      9245,
      6688
    ],
    [
      18,
      -4
    ],
    [
      40,
      27
    ],
    [
      32,
      7
    ],
    [
      0,
      25
    ],
    [
      26,
      20
    ],
    [
      19,
      -14
    ],
    [
      128,
      29
    ],
    [
      17,
      19
    ],
    [
      -14,
      20
    ],
    [
      -31,
      3
    ],
    [
      0,
      36
    ],
    [
      -29,
      18
    ],
    [
      -13,
      41
    ],
    [
      22,
      26
    ],
    [
      36,
      26
    ],
    [
      17,
      26
    ],
    [
      -52,
      3
    ],
    [
      -75,
      -6
    ],
    [
      -31,
      -25
    ],
    [
      -45,
      -13
    ],
    [
      -23,
      9
    ],
    [
      -148,
      -42
    ],
    [
      -49,
      -26
    ],
    [
      -20,
      0
    ],
    [
      -63,
      -28
    ],
    [
      -27,
      8
    ],
    [
      -18,
      -8
    ],
    [
      -27,
      6
    ],
    [
      -10,
      -24
    ],
    [
      -35,
      -15
    ],
    [
      -33,
      -38
    ],
    [
      -21,
      -9
    ],
    [
      -66,
      -60
    ],
    [
      10,
      -25
    ],
    [
      -40,
      -19
    ],
    [
      -15,
      -16
    ],
    [
      -71,
      -10
    ],
    [
      -41,
      8
    ],
    [
      -113,
      -16
    ],
    [
      -34,
      16
    ],
    [
      -16,
      15
    ],
    [
      -35,
      8
    ],
    [
      -38,
      2
    ],
    [
      -4,
      -17
    ],
    [
      -21,
      -8
    ],
    [
      -48,
      -1
    ],
    [
      -86,
      -23
    ],
    [
      -29,
      1
    ]
  ],
  [
    [
      8189,
      6640
    ],
    [
      -2,
      38
    ],
    [
      -26,
      23
    ],
    [
      15,
      66
    ],
    [
      -5,
      40
    ],
    [
      -13,
      19
    ],
    [
      -57,
      9
    ],
    [
      -26,
      -6
    ],
    [
      -41,
      6
    ],
    [
      -32,
      33
    ],
    [
      -1,
      16
    ],
    [
      23,
      24
    ],
    [
      1,
      32
    ],
    [
      14,
      18
    ],
    [
      27,
      -18
    ],
    [
      27,
      2
    ],
    [
      18,
      -28
    ],
    [
      36,
      15
    ],
    [
      24,
      -3
    ],
    [
      35,
      25
    ],
    [
      34,
      9
    ],
    [
      17,
      -28
    ],
    [
      37,
      15
    ],
    [
      50,
      -1
    ],
    [
      15,
      19
    ],
    [
      22,
      7
    ],
    [
      24,
      30
    ],
    [
      -26,
      24
    ],
    [
      6,
      18
    ],
    [
      35,
      22
    ],
    [
      39,
      7
    ],
    [
      43,
      31
    ],
    [
      35,
      9
    ],
    [
      24,
      -3
    ],
    [
      13,
      27
    ],
    [
      -14,
      9
    ],
    [
      29,
      26
    ],
    [
      20,
      42
    ],
    [
      55,
      17
    ],
    [
      39,
      -10
    ],
    [
      42,
      11
    ],
    [
      15,
      -6
    ],
    [
      24,
      12
    ],
    [
      31,
      -10
    ],
    [
      20,
      55
    ],
    [
      55,
      37
    ],
    [
      21,
      43
    ],
    [
      25,
      21
    ],
    [
      21,
      1
    ],
    [
      28,
      25
    ],
    [
      43,
      0
    ],
    [
      25,
      40
    ],
    [
      47,
      -32
    ],
    [
      10,
      -29
    ],
    [
      26,
      7
    ],
    [
      45,
      -5
    ],
    [
      40,
      -18
    ],
    [
      44,
      -2
    ],
    [
      0,
      -14
    ],
    [
      70,
      -10
    ],
    [
      31,
      59
    ],
    [
      14,
      0
    ],
    [
      66,
      46
    ],
    [
      35,
      12
    ],
    [
      26,
      -3
    ],
    [
      42,
      26
    ],
    [
      24,
      -21
    ],
    [
      11,
      -30
    ],
    [
      18,
      -21
    ],
    [
      54,
      4
    ],
    [
      -16,
      -28
    ],
    [
      -44,
      -11
    ],
    [
      -23,
      -28
    ],
    [
      26,
      -41
    ],
    [
      41,
      34
    ],
    [
      31,
      1
    ],
    [
      29,
      -24
    ],
    [
      5,
      -26
    ],
    [
      24,
      -29
    ],
    [
      -7,
      -25
    ],
    [
      -40,
      -12
    ],
    [
      8,
      -14
    ],
    [
      -32,
      -27
    ],
    [
      -26,
      -10
    ],
    [
      15,
      -17
    ],
    [
      -35,
      -21
    ],
    [
      36,
      -7
    ],
    [
      47,
      7
    ],
    [
      31,
      16
    ],
    [
      22,
      0
    ],
    [
      32,
      -17
    ],
    [
      6,
      -13
    ],
    [
      42,
      3
    ],
    [
      34,
      -23
    ],
    [
      19,
      14
    ],
    [
      25,
      -1
    ],
    [
      15,
      -17
    ],
    [
      19,
      -1
    ],
    [
      51,
      -25
    ],
    [
      -15,
      -21
    ],
    [
      23,
      -42
    ],
    [
      -7,
      -39
    ],
    [
      -42,
      -2
    ],
    [
      -33,
      -29
    ],
    [
      -49,
      -27
    ],
    [
      -9,
      -23
    ],
    [
      -32,
      -17
    ],
    [
      14,
      -30
    ],
    [
      -9,
      -22
    ],
    [
      18,
      -16
    ],
    [
      13,
      -28
    ],
    [
      31,
      -27
    ],
    [
      27,
      -37
    ],
    [
      -38,
      -8
    ],
    [
      -26,
      18
    ],
    [
      -41,
      11
    ],
    [
      7,
      23
    ],
    [
      -28,
      28
    ],
    [
      -63,
      7
    ],
    [
      -30,
      -25
    ],
    [
      -34,
      4
    ],
    [
      -68,
      -8
    ],
    [
      -68,
      -29
    ],
    [
      -27,
      -42
    ],
    [
      -27,
      -16
    ],
    [
      -21,
      1
    ],
    [
      -19,
      -20
    ],
    [
      -2,
      -18
    ],
    [
      -40,
      -10
    ],
    [
      -9,
      -19
    ],
    [
      -23,
      6
    ],
    [
      -42,
      -47
    ],
    [
      -41,
      -13
    ],
    [
      -22,
      10
    ]
  ],
  [
    [
      9245,
      6688
    ],
    [
      -37,
      -30
    ],
    [
      -35,
      -11
    ],
    [
      -34,
      5
    ],
    [
      -29,
      -42
    ],
    [
      -39,
      -24
    ],
    [
      -49,
      -7
    ],
    [
      -46,
      -31
    ],
    [
      -5,
      -29
    ],
    [
      -35,
      -16
    ],
    [
      -4,
      27
    ],
    [
      -33,
      -34
    ],
    [
      -7,
      -33
    ],
    [
      -20,
      -11
    ],
    [
      -32,
      -46
    ],
    [
      -20,
      -59
    ],
    [
      9,
      -27
    ],
    [
      -44,
      -21
    ],
    [
      -25,
      -5
    ],
    [
      2,
      37
    ],
    [
      -34,
      -16
    ],
    [
      7,
      -19
    ],
    [
      -46,
      -32
    ],
    [
      -31,
      -36
    ],
    [
      -22,
      -8
    ],
    [
      -29,
      -24
    ],
    [
      42,
      -35
    ],
    [
      6,
      -44
    ]
  ],
  [
    [
      8655,
      6117
    ],
    [
      -24,
      -15
    ],
    [
      -17,
      -27
    ],
    [
      -6,
      -29
    ],
    [
      -31,
      -30
    ],
    [
      2,
      -28
    ],
    [
      -20,
      -37
    ],
    [
      -28,
      -1
    ],
    [
      -3,
      -18
    ],
    [
      -6,
      -33
    ],
    [
      4,
      -22
    ],
    [
      -15,
      -12
    ],
    [
      -7,
      -38
    ],
    [
      -11,
      -9
    ]
  ],
  [
    [
      8493,
      5818
    ],
    [
      -58,
      -1
    ],
    [
      -23,
      40
    ],
    [
      -25,
      -54
    ],
    [
      -22,
      -7
    ],
    [
      -5,
      -27
    ],
    [
      -21,
      -2
    ],
    [
      -7,
      -24
    ],
    [
      -32,
      -7
    ],
    [
      -5,
      33
    ],
    [
      -43,
      0
    ]
  ],
  [
    [
      8252,
      5769
    ],
    [
      -29,
      -1
    ],
    [
      21,
      46
    ],
    [
      -14,
      38
    ]
  ],
  [
    [
      8230,
      5852
    ],
    [
      3,
      48
    ],
    [
      9,
      21
    ],
    [
      2,
      39
    ],
    [
      -8,
      26
    ],
    [
      35,
      -7
    ],
    [
      17,
      -11
    ],
    [
      33,
      5
    ],
    [
      -22,
      53
    ]
  ],
  [
    [
      8299,
      6026
    ],
    [
      31,
      36
    ],
    [
      34,
      -8
    ],
    [
      19,
      21
    ],
    [
      23,
      9
    ],
    [
      16,
      26
    ],
    [
      -11,
      16
    ],
    [
      -37,
      32
    ],
    [
      -15,
      -5
    ],
    [
      -7,
      45
    ],
    [
      -10,
      19
    ],
    [
      -21,
      5
    ],
    [
      -27,
      38
    ],
    [
      -62,
      -11
    ],
    [
      -23,
      -14
    ],
    [
      -5,
      49
    ],
    [
      9,
      19
    ],
    [
      -5,
      31
    ],
    [
      31,
      21
    ],
    [
      -27,
      17
    ],
    [
      -15,
      -12
    ],
    [
      -86,
      -5
    ],
    [
      -2,
      23
    ],
    [
      -19,
      7
    ],
    [
      -31,
      -20
    ],
    [
      -3,
      -35
    ],
    [
      -31,
      -3
    ],
    [
      1,
      26
    ],
    [
      -22,
      2
    ],
    [
      -32,
      -57
    ],
    [
      -2,
      1
    ],
    [
      -47,
      -9
    ],
    [
      -20,
      -28
    ],
    [
      -17,
      -8
    ],
    [
      -24,
      42
    ],
    [
      -30,
      -8
    ],
    [
      -37,
      36
    ],
    [
      -26,
      6
    ],
    [
      -48,
      -12
    ],
    [
      -10,
      12
    ],
    [
      -29,
      -5
    ],
    [
      -32,
      7
    ],
    [
      -19,
      19
    ],
    [
      -17,
      -9
    ],
    [
      -22,
      7
    ],
    [
      -14,
      -12
    ],
    [
      -38,
      -6
    ],
    [
      -34,
      1
    ],
    [
      -54,
      -60
    ],
    [
      -21,
      -16
    ],
    [
      37,
      -47
    ],
    [
      -40,
      -9
    ],
    [
      -11,
      -27
    ]
  ],
  [
    [
      7417,
      6173
    ],
    [
      9,
      46
    ],
    [
      -19,
      42
    ],
    [
      4,
      45
    ],
    [
      11,
      32
    ],
    [
      -29,
      25
    ],
    [
      -12,
      33
    ],
    [
      -10,
      4
    ]
  ],
  [
    [
      7371,
      6400
    ],
    [
      0,
      31
    ],
    [
      47,
      41
    ],
    [
      1,
      1
    ],
    [
      -2,
      34
    ],
    [
      9,
      32
    ],
    [
      -7,
      39
    ]
  ],
  [
    [
      7419,
      6578
    ],
    [
      11,
      7
    ],
    [
      53,
      1
    ],
    [
      49,
      14
    ],
    [
      13,
      29
    ],
    [
      29,
      -3
    ],
    [
      34,
      17
    ],
    [
      51,
      -33
    ],
    [
      31,
      -9
    ],
    [
      138,
      2
    ],
    [
      12,
      13
    ],
    [
      59,
      -5
    ],
    [
      26,
      -8
    ],
    [
      24,
      18
    ],
    [
      24,
      -14
    ],
    [
      50,
      9
    ],
    [
      35,
      -2
    ],
    [
      59,
      34
    ],
    [
      30,
      -19
    ],
    [
      24,
      -4
    ],
    [
      18,
      15
    ]
  ],
  [
    [
      6819,
      6524
    ],
    [
      48,
      -30
    ],
    [
      10,
      -24
    ],
    [
      -17,
      -29
    ],
    [
      -64,
      -37
    ],
    [
      -27,
      -30
    ],
    [
      -16,
      2
    ],
    [
      -24,
      -15
    ],
    [
      -12,
      -38
    ],
    [
      6,
      -19
    ],
    [
      30,
      -7
    ],
    [
      -4,
      -24
    ],
    [
      51,
      -31
    ],
    [
      -8,
      -43
    ],
    [
      -54,
      -17
    ],
    [
      -28,
      -18
    ],
    [
      -2,
      -36
    ],
    [
      24,
      -14
    ],
    [
      -22,
      -25
    ]
  ],
  [
    [
      6710,
      6089
    ],
    [
      -27,
      12
    ],
    [
      -8,
      18
    ],
    [
      -40,
      7
    ],
    [
      -32,
      -30
    ],
    [
      -52,
      -6
    ],
    [
      -11,
      -44
    ],
    [
      -39,
      -9
    ],
    [
      -8,
      -24
    ],
    [
      -2,
      -42
    ],
    [
      -24,
      -18
    ],
    [
      2,
      -27
    ],
    [
      -13,
      -34
    ],
    [
      -37,
      2
    ],
    [
      -28,
      -26
    ],
    [
      -22,
      22
    ],
    [
      -42,
      -19
    ],
    [
      -23,
      13
    ],
    [
      -38,
      -38
    ],
    [
      -9,
      -35
    ],
    [
      -16,
      1
    ],
    [
      -36,
      42
    ],
    [
      -6,
      26
    ],
    [
      -44,
      -1
    ],
    [
      -13,
      9
    ],
    [
      -7,
      41
    ],
    [
      -20,
      14
    ],
    [
      -33,
      -15
    ],
    [
      -25,
      22
    ],
    [
      -35,
      0
    ],
    [
      -13,
      8
    ],
    [
      -11,
      -31
    ],
    [
      -16,
      -18
    ],
    [
      2,
      -31
    ],
    [
      -19,
      1
    ],
    [
      -26,
      -17
    ],
    [
      -13,
      6
    ],
    [
      -74,
      -10
    ],
    [
      -38,
      -30
    ],
    [
      -18,
      -7
    ],
    [
      -29,
      6
    ],
    [
      -21,
      -17
    ],
    [
      -23,
      -1
    ],
    [
      -28,
      50
    ],
    [
      -49,
      -22
    ],
    [
      -7,
      -21
    ],
    [
      -29,
      6
    ],
    [
      -27,
      -41
    ],
    [
      -13,
      17
    ],
    [
      -41,
      19
    ],
    [
      -15,
      18
    ],
    [
      10,
      13
    ],
    [
      -21,
      15
    ],
    [
      -30,
      2
    ],
    [
      -21,
      -20
    ],
    [
      -22,
      43
    ],
    [
      -18,
      8
    ],
    [
      -22,
      -29
    ],
    [
      -21,
      -5
    ],
    [
      -3,
      1
    ],
    [
      -27,
      -4
    ],
    [
      -11,
      -5
    ],
    [
      -86,
      6
    ]
  ],
  [
    [
      5242,
      5860
    ],
    [
      7,
      7
    ],
    [
      0,
      2
    ],
    [
      6,
      20
    ],
    [
      -23,
      39
    ],
    [
      -2,
      0
    ],
    [
      -26,
      16
    ],
    [
      -23,
      77
    ],
    [
      11,
      60
    ],
    [
      20,
      17
    ],
    [
      69,
      27
    ],
    [
      34,
      21
    ],
    [
      25,
      1
    ],
    [
      47,
      54
    ],
    [
      54,
      25
    ],
    [
      -3,
      19
    ],
    [
      34,
      8
    ],
    [
      17,
      -19
    ],
    [
      34,
      3
    ],
    [
      3,
      22
    ],
    [
      19,
      -1
    ],
    [
      4,
      -2
    ],
    [
      42,
      -17
    ],
    [
      36,
      38
    ],
    [
      -32,
      28
    ],
    [
      -33,
      5
    ],
    [
      -27,
      22
    ],
    [
      -21,
      -4
    ],
    [
      -83,
      50
    ],
    [
      -16,
      30
    ],
    [
      53,
      23
    ],
    [
      5,
      37
    ],
    [
      -37,
      6
    ],
    [
      -16,
      17
    ],
    [
      -39,
      2
    ],
    [
      2,
      19
    ],
    [
      48,
      12
    ],
    [
      13,
      22
    ],
    [
      23,
      10
    ],
    [
      41,
      -13
    ],
    [
      49,
      9
    ],
    [
      -5,
      14
    ],
    [
      -26,
      5
    ],
    [
      -33,
      61
    ],
    [
      -33,
      -5
    ],
    [
      -27,
      12
    ],
    [
      -1,
      33
    ],
    [
      -9,
      17
    ],
    [
      -28,
      25
    ],
    [
      15,
      21
    ],
    [
      -29,
      23
    ],
    [
      2,
      26
    ],
    [
      -17,
      5
    ]
  ],
  [
    [
      5366,
      6789
    ],
    [
      -7,
      32
    ],
    [
      61,
      -2
    ],
    [
      32,
      28
    ],
    [
      47,
      -23
    ],
    [
      7,
      -18
    ],
    [
      120,
      -19
    ],
    [
      22,
      -38
    ],
    [
      -1,
      -22
    ],
    [
      -14,
      -36
    ],
    [
      40,
      -15
    ],
    [
      22,
      7
    ],
    [
      46,
      -20
    ],
    [
      24,
      -29
    ],
    [
      56,
      -2
    ],
    [
      -6,
      -17
    ],
    [
      11,
      -18
    ],
    [
      43,
      -7
    ],
    [
      25,
      17
    ],
    [
      16,
      -4
    ],
    [
      53,
      25
    ],
    [
      23,
      -4
    ],
    [
      20,
      -16
    ],
    [
      -4,
      -38
    ],
    [
      6,
      -11
    ],
    [
      38,
      -13
    ],
    [
      61,
      20
    ],
    [
      56,
      -17
    ],
    [
      52,
      0
    ],
    [
      77,
      -39
    ],
    [
      56,
      -24
    ],
    [
      55,
      12
    ],
    [
      13,
      17
    ],
    [
      28,
      7
    ],
    [
      19,
      17
    ],
    [
      7,
      -44
    ],
    [
      23,
      -15
    ],
    [
      37,
      0
    ],
    [
      25,
      -19
    ],
    [
      17,
      23
    ],
    [
      30,
      7
    ],
    [
      38,
      -15
    ],
    [
      22,
      -1
    ],
    [
      9,
      14
    ],
    [
      30,
      -8
    ],
    [
      10,
      19
    ],
    [
      43,
      -12
    ],
    [
      31,
      -25
    ],
    [
      30,
      26
    ],
    [
      4,
      35
    ]
  ],
  [
    [
      5415,
      5199
    ],
    [
      13,
      -18
    ],
    [
      -14,
      -32
    ],
    [
      -48,
      -8
    ],
    [
      -39,
      -34
    ],
    [
      -34,
      -5
    ],
    [
      -31,
      -42
    ],
    [
      -7,
      -44
    ],
    [
      22,
      -18
    ],
    [
      -37,
      -33
    ],
    [
      -3,
      -23
    ],
    [
      -14,
      -30
    ],
    [
      -21,
      -12
    ],
    [
      -13,
      -42
    ],
    [
      17,
      -28
    ],
    [
      -6,
      -20
    ],
    [
      -36,
      12
    ],
    [
      -26,
      -78
    ],
    [
      -25,
      -12
    ],
    [
      -48,
      18
    ],
    [
      -48,
      2
    ],
    [
      -70,
      -5
    ],
    [
      -5,
      -37
    ],
    [
      -23,
      -31
    ],
    [
      -24,
      -14
    ],
    [
      -2,
      -17
    ],
    [
      -26,
      5
    ],
    [
      -23,
      -8
    ],
    [
      3,
      -46
    ],
    [
      8,
      -23
    ],
    [
      -15,
      -25
    ],
    [
      20,
      -14
    ],
    [
      10,
      -36
    ],
    [
      -6,
      -22
    ],
    [
      7,
      -44
    ],
    [
      -12,
      -19
    ],
    [
      6,
      -31
    ],
    [
      64,
      -19
    ],
    [
      44,
      -3
    ],
    [
      -5,
      -51
    ],
    [
      -76,
      24
    ],
    [
      -30,
      -6
    ],
    [
      -16,
      -17
    ],
    [
      -27,
      46
    ],
    [
      -27,
      4
    ],
    [
      -43,
      22
    ],
    [
      -15,
      -10
    ],
    [
      -27,
      26
    ],
    [
      -26,
      -25
    ],
    [
      -7,
      -24
    ],
    [
      7,
      -16
    ],
    [
      35,
      -15
    ],
    [
      7,
      -20
    ],
    [
      24,
      -1
    ],
    [
      -5,
      -29
    ],
    [
      3,
      -54
    ],
    [
      16,
      -10
    ],
    [
      9,
      -28
    ],
    [
      18,
      2
    ],
    [
      3,
      -32
    ],
    [
      -10,
      -22
    ],
    [
      6,
      -43
    ],
    [
      14,
      -19
    ],
    [
      11,
      -55
    ],
    [
      -24,
      -6
    ],
    [
      -9,
      -39
    ],
    [
      -65,
      -31
    ],
    [
      -3,
      -40
    ],
    [
      -63,
      -48
    ],
    [
      -6,
      -22
    ],
    [
      -29,
      -2
    ],
    [
      -45,
      -27
    ],
    [
      -2,
      -33
    ],
    [
      -17,
      -42
    ],
    [
      1,
      -18
    ],
    [
      -27,
      -29
    ],
    [
      -4,
      -27
    ]
  ],
  [
    [
      4519,
      3646
    ],
    [
      -45,
      2
    ],
    [
      -32,
      13
    ],
    [
      -30,
      -21
    ],
    [
      -23,
      17
    ],
    [
      -19,
      93
    ],
    [
      -30,
      4
    ],
    [
      -44,
      12
    ],
    [
      17,
      24
    ],
    [
      -24,
      53
    ],
    [
      -28,
      38
    ],
    [
      -49,
      35
    ],
    [
      -50,
      -13
    ],
    [
      -26,
      43
    ]
  ],
  [
    [
      4136,
      3946
    ],
    [
      -9,
      10
    ],
    [
      36,
      21
    ],
    [
      -4,
      14
    ],
    [
      -24,
      28
    ],
    [
      1,
      16
    ],
    [
      39,
      63
    ],
    [
      2,
      21
    ],
    [
      20,
      9
    ],
    [
      9,
      19
    ],
    [
      30,
      23
    ],
    [
      15,
      -28
    ],
    [
      50,
      -9
    ],
    [
      31,
      23
    ],
    [
      -18,
      23
    ],
    [
      36,
      13
    ],
    [
      -5,
      18
    ],
    [
      -54,
      29
    ],
    [
      -20,
      0
    ],
    [
      1,
      28
    ],
    [
      -43,
      27
    ],
    [
      -17,
      39
    ],
    [
      19,
      29
    ],
    [
      -7,
      47
    ],
    [
      -25,
      7
    ],
    [
      -24,
      32
    ],
    [
      44,
      9
    ],
    [
      37,
      18
    ],
    [
      -11,
      22
    ],
    [
      6,
      14
    ],
    [
      3,
      52
    ],
    [
      -24,
      66
    ],
    [
      -2,
      46
    ],
    [
      -27,
      -1
    ],
    [
      -12,
      26
    ],
    [
      12,
      54
    ],
    [
      35,
      11
    ],
    [
      27,
      16
    ],
    [
      6,
      25
    ]
  ],
  [
    [
      4269,
      4806
    ],
    [
      25,
      47
    ],
    [
      -7,
      66
    ],
    [
      11,
      27
    ],
    [
      24,
      -2
    ],
    [
      10,
      42
    ],
    [
      -2,
      23
    ],
    [
      28,
      58
    ],
    [
      29,
      -20
    ],
    [
      9,
      45
    ],
    [
      30,
      32
    ],
    [
      -2,
      48
    ],
    [
      21,
      16
    ],
    [
      18,
      -12
    ],
    [
      34,
      24
    ],
    [
      20,
      -7
    ],
    [
      3,
      -20
    ],
    [
      43,
      31
    ],
    [
      32,
      0
    ],
    [
      24,
      37
    ],
    [
      30,
      9
    ],
    [
      6,
      29
    ],
    [
      -5,
      36
    ],
    [
      32,
      6
    ],
    [
      27,
      21
    ],
    [
      -8,
      28
    ],
    [
      7,
      12
    ],
    [
      61,
      9
    ],
    [
      12,
      12
    ],
    [
      -3,
      28
    ],
    [
      16,
      32
    ],
    [
      -31,
      24
    ],
    [
      -26,
      -4
    ],
    [
      -18,
      13
    ],
    [
      -18,
      36
    ],
    [
      -31,
      -7
    ],
    [
      -33,
      17
    ],
    [
      -13,
      -13
    ],
    [
      -30,
      -4
    ],
    [
      3,
      49
    ],
    [
      25,
      20
    ],
    [
      -30,
      43
    ],
    [
      22,
      24
    ],
    [
      14,
      -20
    ],
    [
      37,
      -18
    ],
    [
      48,
      14
    ],
    [
      4,
      2
    ],
    [
      28,
      -12
    ],
    [
      53,
      3
    ],
    [
      33,
      -7
    ],
    [
      57,
      1
    ],
    [
      28,
      -6
    ],
    [
      29,
      15
    ],
    [
      9,
      22
    ],
    [
      32,
      5
    ],
    [
      20,
      14
    ]
  ],
  [
    [
      5006,
      5674
    ],
    [
      50,
      -30
    ],
    [
      59,
      6
    ],
    [
      22,
      10
    ],
    [
      9,
      23
    ],
    [
      21,
      11
    ],
    [
      16,
      25
    ]
  ],
  [
    [
      5183,
      5719
    ],
    [
      34,
      -5
    ],
    [
      29,
      -19
    ],
    [
      1,
      -20
    ],
    [
      24,
      -34
    ],
    [
      25,
      -6
    ],
    [
      25,
      -30
    ],
    [
      -5,
      -23
    ],
    [
      21,
      -28
    ],
    [
      55,
      -12
    ],
    [
      1,
      20
    ],
    [
      3,
      1
    ],
    [
      25,
      -8
    ],
    [
      -4,
      -34
    ],
    [
      -13,
      -17
    ],
    [
      -1,
      -24
    ],
    [
      35,
      -14
    ],
    [
      -14,
      -58
    ],
    [
      64,
      -59
    ],
    [
      21,
      -5
    ],
    [
      32,
      5
    ],
    [
      2,
      -34
    ],
    [
      -19,
      -8
    ],
    [
      -12,
      -28
    ],
    [
      -21,
      -9
    ],
    [
      2,
      -16
    ],
    [
      -28,
      -17
    ],
    [
      -24,
      0
    ],
    [
      -25,
      -22
    ],
    [
      -1,
      -16
    ]
  ],
  [
    [
      3991,
      1395
    ],
    [
      -1,
      -53
    ]
  ],
  [
    [
      3990,
      1342
    ],
    [
      -10,
      20
    ],
    [
      -20,
      6
    ],
    [
      -1,
      1
    ],
    [
      1,
      2
    ],
    [
      -6,
      -1
    ],
    [
      1,
      2
    ],
    [
      -1,
      0
    ],
    [
      0,
      2
    ],
    [
      -1,
      0
    ],
    [
      -1,
      -1
    ],
    [
      0,
      2
    ],
    [
      -4,
      1
    ],
    [
      1,
      1
    ],
    [
      0,
      1
    ],
    [
      -2,
      -1
    ],
    [
      1,
      3
    ],
    [
      2,
      0
    ],
    [
      2,
      3
    ],
    [
      0,
      2
    ],
    [
      -4,
      -2
    ],
    [
      -1,
      0
    ],
    [
      -1,
      5
    ],
    [
      3,
      1
    ],
    [
      10,
      -3
    ],
    [
      2,
      0
    ],
    [
      0,
      2
    ],
    [
      -2,
      5
    ],
    [
      -1,
      1
    ],
    [
      -3,
      1
    ],
    [
      0,
      3
    ],
    [
      0,
      1
    ],
    [
      3,
      2
    ],
    [
      2,
      -2
    ],
    [
      28,
      0
    ],
    [
      0,
      -1
    ],
    [
      3,
      -3
    ]
  ],
  [
    [
      2520,
      1636
    ],
    [
      -6,
      10
    ],
    [
      -1,
      1
    ],
    [
      7,
      -11
    ]
  ],
  [
    [
      3931,
      1664
    ],
    [
      0,
      1
    ],
    [
      0,
      3
    ],
    [
      4,
      -1
    ],
    [
      -4,
      -3
    ]
  ],
  [
    [
      3975,
      1673
    ],
    [
      -3,
      -15
    ]
  ],
  [
    [
      3972,
      1658
    ],
    [
      -5,
      -1
    ],
    [
      0,
      -1
    ],
    [
      -2,
      1
    ],
    [
      -2,
      0
    ],
    [
      -17,
      5
    ],
    [
      1,
      2
    ],
    [
      1,
      0
    ],
    [
      0,
      2
    ],
    [
      3,
      0
    ],
    [
      0,
      1
    ],
    [
      0,
      3
    ],
    [
      -1,
      1
    ],
    [
      -1,
      4
    ],
    [
      1,
      1
    ],
    [
      1,
      0
    ],
    [
      2,
      1
    ],
    [
      5,
      -2
    ],
    [
      3,
      -2
    ],
    [
      0,
      -2
    ],
    [
      3,
      -1
    ],
    [
      7,
      2
    ],
    [
      1,
      0
    ],
    [
      -1,
      2
    ],
    [
      2,
      0
    ],
    [
      0,
      1
    ],
    [
      1,
      -1
    ],
    [
      1,
      -1
    ]
  ],
  [
    [
      3929,
      1668
    ],
    [
      -8,
      0
    ],
    [
      -2,
      3
    ],
    [
      10,
      -3
    ]
  ],
  [
    [
      3915,
      1690
    ],
    [
      2,
      0
    ],
    [
      1,
      2
    ],
    [
      4,
      -2
    ],
    [
      5,
      -7
    ],
    [
      -2,
      -2
    ],
    [
      -1,
      -1
    ],
    [
      -3,
      -1
    ],
    [
      -6,
      6
    ],
    [
      -3,
      -1
    ],
    [
      0,
      -1
    ],
    [
      -3,
      0
    ],
    [
      -3,
      -1
    ],
    [
      10,
      10
    ],
    [
      -1,
      -2
    ]
  ],
  [
    [
      3935,
      1718
    ],
    [
      -1,
      -4
    ],
    [
      -7,
      -1
    ],
    [
      -3,
      1
    ],
    [
      2,
      1
    ],
    [
      0,
      2
    ],
    [
      9,
      1
    ]
  ],
  [
    [
      3914,
      1739
    ],
    [
      10,
      -2
    ],
    [
      -1,
      -1
    ],
    [
      -1,
      -5
    ],
    [
      -2,
      -2
    ],
    [
      2,
      -13
    ],
    [
      0,
      -2
    ],
    [
      -1,
      -1
    ],
    [
      -1,
      -2
    ],
    [
      10,
      -10
    ],
    [
      -1,
      0
    ],
    [
      -2,
      0
    ],
    [
      -3,
      -3
    ],
    [
      -4,
      1
    ],
    [
      -1,
      -1
    ],
    [
      0,
      -2
    ],
    [
      -3,
      0
    ],
    [
      -2,
      1
    ],
    [
      -2,
      7
    ],
    [
      0,
      5
    ],
    [
      0,
      2
    ],
    [
      3,
      1
    ],
    [
      0,
      2
    ],
    [
      0,
      4
    ],
    [
      -4,
      1
    ],
    [
      1,
      12
    ],
    [
      0,
      1
    ],
    [
      3,
      4
    ],
    [
      -1,
      3
    ]
  ],
  [
    [
      3987,
      1714
    ],
    [
      -11,
      -40
    ]
  ],
  [
    [
      3976,
      1674
    ],
    [
      -1,
      5
    ],
    [
      -3,
      2
    ],
    [
      -5,
      0
    ],
    [
      0,
      -2
    ],
    [
      -2,
      -4
    ],
    [
      -1,
      0
    ],
    [
      -2,
      1
    ],
    [
      -1,
      3
    ],
    [
      3,
      5
    ],
    [
      -1,
      3
    ],
    [
      -9,
      -9
    ],
    [
      -3,
      6
    ],
    [
      -9,
      2
    ],
    [
      1,
      6
    ],
    [
      -5,
      0
    ],
    [
      0,
      -1
    ],
    [
      -1,
      0
    ],
    [
      -2,
      0
    ],
    [
      3,
      3
    ],
    [
      0,
      2
    ],
    [
      1,
      1
    ],
    [
      -1,
      2
    ],
    [
      7,
      1
    ],
    [
      -3,
      -6
    ],
    [
      1,
      17
    ],
    [
      0,
      -2
    ],
    [
      1,
      -3
    ],
    [
      -2,
      2
    ],
    [
      -5,
      5
    ],
    [
      0,
      1
    ],
    [
      8,
      4
    ],
    [
      -2,
      3
    ],
    [
      1,
      3
    ],
    [
      -4,
      1
    ],
    [
      -1,
      0
    ],
    [
      -2,
      0
    ],
    [
      -9,
      -1
    ],
    [
      -2,
      7
    ],
    [
      0,
      2
    ],
    [
      16,
      4
    ],
    [
      -1,
      -3
    ],
    [
      4,
      -5
    ],
    [
      1,
      -2
    ],
    [
      16,
      -1
    ],
    [
      -2,
      -2
    ],
    [
      -3,
      -2
    ],
    [
      -5,
      1
    ],
    [
      -1,
      0
    ],
    [
      -2,
      -4
    ],
    [
      8,
      -9
    ],
    [
      0,
      -6
    ],
    [
      0,
      -1
    ],
    [
      1,
      0
    ],
    [
      0,
      1
    ],
    [
      3,
      2
    ],
    [
      0,
      4
    ],
    [
      15,
      7
    ],
    [
      0,
      3
    ],
    [
      11,
      -6
    ]
  ],
  [
    [
      3964,
      1688
    ],
    [
      2,
      1
    ],
    [
      1,
      0
    ],
    [
      0,
      -2
    ],
    [
      -1,
      -3
    ],
    [
      2,
      -1
    ],
    [
      2,
      5
    ],
    [
      -6,
      0
    ]
  ],
  [
    [
      3988,
      1733
    ],
    [
      1,
      7
    ],
    [
      0,
      2
    ],
    [
      10,
      1
    ]
  ],
  [
    [
      3999,
      1743
    ],
    [
      -11,
      -10
    ]
  ],
  [
    [
      2941,
      7963
    ],
    [
      19,
      -25
    ],
    [
      1,
      -22
    ]
  ],
  [
    [
      2961,
      7916
    ],
    [
      -24,
      11
    ],
    [
      -24,
      -13
    ],
    [
      9,
      -15
    ],
    [
      36,
      -9
    ]
  ],
  [
    [
      2958,
      7890
    ],
    [
      32,
      -29
    ],
    [
      1,
      -30
    ],
    [
      -1,
      -3
    ],
    [
      -17,
      -30
    ],
    [
      -40,
      6
    ],
    [
      -3,
      -22
    ],
    [
      -51,
      -35
    ],
    [
      16,
      -15
    ],
    [
      -4,
      -17
    ],
    [
      -32,
      -24
    ],
    [
      -28,
      6
    ],
    [
      -9,
      15
    ],
    [
      -33,
      -12
    ],
    [
      -27,
      3
    ],
    [
      -18,
      -27
    ],
    [
      4,
      -64
    ],
    [
      -2,
      1
    ],
    [
      -56,
      -32
    ],
    [
      -36,
      -5
    ],
    [
      -25,
      6
    ],
    [
      -15,
      21
    ],
    [
      -39,
      -2
    ],
    [
      -13,
      -12
    ],
    [
      -38,
      -2
    ],
    [
      -38,
      7
    ],
    [
      -44,
      -38
    ],
    [
      -33,
      -22
    ],
    [
      -16,
      8
    ],
    [
      8,
      34
    ],
    [
      12,
      7
    ],
    [
      -17,
      28
    ],
    [
      -27,
      -12
    ],
    [
      -13,
      26
    ],
    [
      -26,
      -8
    ],
    [
      -22,
      28
    ],
    [
      -43,
      17
    ],
    [
      -73,
      -25
    ],
    [
      -23,
      9
    ]
  ],
  [
    [
      2169,
      7646
    ],
    [
      -68,
      4
    ],
    [
      -11,
      1
    ],
    [
      -4,
      -1
    ],
    [
      -132,
      6
    ],
    [
      2,
      27
    ],
    [
      22,
      24
    ],
    [
      1,
      23
    ]
  ],
  [
    [
      1979,
      7730
    ],
    [
      -2,
      22
    ],
    [
      -21,
      29
    ],
    [
      21,
      24
    ],
    [
      1,
      21
    ],
    [
      33,
      11
    ],
    [
      12,
      26
    ],
    [
      33,
      22
    ],
    [
      26,
      30
    ],
    [
      18,
      30
    ],
    [
      33,
      21
    ],
    [
      12,
      19
    ],
    [
      31,
      9
    ],
    [
      5,
      19
    ],
    [
      35,
      0
    ],
    [
      8,
      25
    ],
    [
      -59,
      2
    ],
    [
      2,
      45
    ],
    [
      10,
      31
    ],
    [
      35,
      31
    ],
    [
      -24,
      20
    ],
    [
      12,
      15
    ],
    [
      -23,
      17
    ],
    [
      -23,
      34
    ],
    [
      27,
      12
    ],
    [
      2,
      24
    ],
    [
      33,
      26
    ],
    [
      51,
      17
    ],
    [
      43,
      35
    ],
    [
      23,
      -8
    ],
    [
      43,
      13
    ],
    [
      36,
      3
    ],
    [
      15,
      9
    ],
    [
      17,
      33
    ],
    [
      2,
      40
    ]
  ],
  [
    [
      2446,
      8437
    ],
    [
      49,
      -8
    ],
    [
      43,
      21
    ],
    [
      41,
      12
    ],
    [
      12,
      20
    ],
    [
      20,
      3
    ],
    [
      23,
      29
    ]
  ],
  [
    [
      2634,
      8514
    ],
    [
      -6,
      -25
    ],
    [
      24,
      -29
    ],
    [
      -28,
      -11
    ],
    [
      -37,
      -34
    ],
    [
      -39,
      -13
    ],
    [
      12,
      -29
    ],
    [
      -16,
      -16
    ],
    [
      63,
      -37
    ],
    [
      34,
      -12
    ],
    [
      19,
      -34
    ],
    [
      -9,
      -10
    ],
    [
      27,
      -57
    ],
    [
      28,
      -36
    ],
    [
      42,
      -76
    ],
    [
      42,
      13
    ],
    [
      10,
      23
    ],
    [
      24,
      -30
    ],
    [
      71,
      -37
    ],
    [
      -16,
      -10
    ],
    [
      12,
      -24
    ],
    [
      -5,
      -35
    ],
    [
      35,
      -13
    ],
    [
      20,
      -19
    ]
  ],
  [
    [
      2169,
      7646
    ],
    [
      11,
      -26
    ],
    [
      -21,
      -12
    ],
    [
      -7,
      -28
    ],
    [
      46,
      3
    ],
    [
      -11,
      -65
    ],
    [
      13,
      -8
    ],
    [
      -14,
      -41
    ],
    [
      27,
      -11
    ],
    [
      43,
      -5
    ],
    [
      26,
      14
    ],
    [
      26,
      -12
    ],
    [
      9,
      -27
    ],
    [
      24,
      3
    ],
    [
      19,
      -20
    ],
    [
      103,
      10
    ],
    [
      7,
      -24
    ],
    [
      -13,
      -16
    ],
    [
      6,
      -24
    ],
    [
      19,
      -17
    ],
    [
      26,
      -2
    ],
    [
      -8,
      -50
    ],
    [
      23,
      -81
    ],
    [
      19,
      -3
    ],
    [
      6,
      -20
    ],
    [
      51,
      -29
    ],
    [
      9,
      -14
    ],
    [
      41,
      -15
    ],
    [
      33,
      -29
    ],
    [
      -4,
      -10
    ],
    [
      15,
      -9
    ],
    [
      -26,
      -46
    ],
    [
      -7,
      -32
    ],
    [
      7,
      -41
    ],
    [
      38,
      2
    ],
    [
      29,
      -21
    ],
    [
      12,
      14
    ],
    [
      -18,
      47
    ],
    [
      8,
      22
    ],
    [
      25,
      4
    ],
    [
      30,
      -13
    ],
    [
      8,
      37
    ],
    [
      38,
      2
    ],
    [
      23,
      -36
    ],
    [
      -3,
      -20
    ],
    [
      44,
      13
    ],
    [
      -4,
      24
    ],
    [
      49,
      22
    ],
    [
      15,
      22
    ],
    [
      44,
      -27
    ],
    [
      -15,
      -48
    ],
    [
      3,
      -54
    ],
    [
      -13,
      -38
    ],
    [
      28,
      -20
    ],
    [
      23,
      53
    ],
    [
      21,
      -11
    ],
    [
      17,
      9
    ],
    [
      29,
      -9
    ],
    [
      14,
      7
    ]
  ],
  [
    [
      3112,
      6940
    ],
    [
      10,
      -6
    ],
    [
      13,
      -45
    ],
    [
      -1,
      -42
    ],
    [
      31,
      -21
    ],
    [
      1,
      -21
    ],
    [
      48,
      -23
    ],
    [
      24,
      -29
    ],
    [
      4,
      -21
    ],
    [
      -38,
      -20
    ],
    [
      5,
      -22
    ],
    [
      34,
      -9
    ],
    [
      12,
      -14
    ],
    [
      -72,
      -25
    ],
    [
      -23,
      -20
    ],
    [
      16,
      -24
    ],
    [
      20,
      17
    ],
    [
      30,
      4
    ],
    [
      37,
      16
    ],
    [
      17,
      18
    ],
    [
      36,
      -10
    ],
    [
      59,
      3
    ],
    [
      15,
      -5
    ],
    [
      18,
      19
    ],
    [
      32,
      -8
    ],
    [
      -8,
      -32
    ]
  ],
  [
    [
      3432,
      6620
    ],
    [
      -11,
      -12
    ],
    [
      -28,
      -4
    ],
    [
      -3,
      -34
    ],
    [
      -33,
      6
    ],
    [
      -61,
      -49
    ],
    [
      -49,
      -15
    ],
    [
      -51,
      -31
    ],
    [
      -32,
      -3
    ],
    [
      -38,
      -20
    ],
    [
      -17,
      -23
    ],
    [
      -25,
      -13
    ],
    [
      -28,
      -2
    ],
    [
      -1,
      -2
    ],
    [
      -40,
      -28
    ],
    [
      -34,
      -14
    ],
    [
      -17,
      -19
    ],
    [
      -2,
      0
    ],
    [
      -15,
      -31
    ],
    [
      -22,
      -14
    ],
    [
      -31,
      1
    ],
    [
      -38,
      -35
    ],
    [
      -7,
      -42
    ],
    [
      3,
      -47
    ],
    [
      28,
      -46
    ],
    [
      59,
      -24
    ],
    [
      24,
      4
    ],
    [
      40,
      -11
    ],
    [
      40,
      14
    ],
    [
      26,
      -8
    ],
    [
      52,
      40
    ],
    [
      35,
      -69
    ],
    [
      -7,
      -34
    ],
    [
      -29,
      -13
    ],
    [
      -13,
      12
    ],
    [
      -32,
      -2
    ],
    [
      -32,
      -18
    ],
    [
      -32,
      6
    ],
    [
      -39,
      -22
    ],
    [
      1,
      -18
    ],
    [
      26,
      -27
    ],
    [
      -18,
      -11
    ],
    [
      -32,
      -5
    ],
    [
      15,
      -18
    ],
    [
      59,
      -18
    ],
    [
      14,
      -24
    ],
    [
      -3,
      -39
    ],
    [
      -31,
      -21
    ],
    [
      -15,
      24
    ],
    [
      -35,
      0
    ],
    [
      12,
      -21
    ],
    [
      -5,
      -36
    ],
    [
      13,
      -30
    ],
    [
      24,
      -24
    ],
    [
      -15,
      -22
    ],
    [
      -37,
      -2
    ],
    [
      -40,
      23
    ],
    [
      9,
      18
    ],
    [
      -29,
      5
    ],
    [
      -32,
      -33
    ],
    [
      -21,
      21
    ],
    [
      -17,
      -6
    ],
    [
      -21,
      13
    ],
    [
      -26,
      -11
    ],
    [
      -24,
      6
    ],
    [
      -28,
      -9
    ],
    [
      4,
      -37
    ],
    [
      -32,
      -7
    ],
    [
      -28,
      -16
    ],
    [
      5,
      -30
    ],
    [
      -42,
      -13
    ],
    [
      -70,
      -31
    ],
    [
      -23,
      0
    ],
    [
      -7,
      19
    ],
    [
      -36,
      21
    ],
    [
      3,
      20
    ],
    [
      17,
      22
    ],
    [
      64,
      -26
    ],
    [
      21,
      9
    ],
    [
      6,
      22
    ],
    [
      -13,
      25
    ],
    [
      24,
      53
    ],
    [
      -16,
      3
    ],
    [
      -10,
      31
    ],
    [
      17,
      18
    ],
    [
      15,
      -12
    ],
    [
      25,
      8
    ],
    [
      8,
      30
    ],
    [
      -25,
      26
    ],
    [
      -5,
      38
    ],
    [
      -33,
      10
    ],
    [
      -44,
      -24
    ],
    [
      -11,
      11
    ],
    [
      -44,
      -9
    ],
    [
      -77,
      14
    ],
    [
      -12,
      17
    ],
    [
      17,
      24
    ],
    [
      20,
      -15
    ],
    [
      12,
      49
    ],
    [
      -9,
      27
    ],
    [
      -53,
      -6
    ],
    [
      -12,
      -17
    ],
    [
      -1,
      -29
    ],
    [
      -26,
      -9
    ],
    [
      -33,
      6
    ],
    [
      -27,
      19
    ],
    [
      -14,
      -12
    ],
    [
      11,
      -29
    ],
    [
      53,
      -6
    ],
    [
      -5,
      -28
    ],
    [
      -19,
      -15
    ],
    [
      -24,
      2
    ],
    [
      -19,
      32
    ],
    [
      -14,
      -26
    ],
    [
      -22,
      -59
    ],
    [
      1,
      0
    ],
    [
      34,
      -5
    ],
    [
      15,
      -14
    ],
    [
      -26,
      -28
    ],
    [
      -10,
      -29
    ],
    [
      4,
      -2
    ],
    [
      38,
      2
    ],
    [
      8,
      -34
    ],
    [
      20,
      -21
    ],
    [
      12,
      -27
    ],
    [
      -27,
      -39
    ],
    [
      -3,
      -14
    ],
    [
      12,
      -44
    ],
    [
      -6,
      -22
    ],
    [
      -25,
      -37
    ],
    [
      -82,
      -31
    ],
    [
      -27,
      -46
    ],
    [
      5,
      -12
    ],
    [
      29,
      -7
    ],
    [
      12,
      -21
    ],
    [
      -46,
      -33
    ],
    [
      -23,
      -5
    ],
    [
      -26,
      9
    ],
    [
      -24,
      -17
    ]
  ],
  [
    [
      2097,
      5376
    ],
    [
      -25,
      39
    ],
    [
      -23,
      -9
    ],
    [
      -19,
      9
    ],
    [
      3,
      28
    ],
    [
      -30,
      10
    ],
    [
      -8,
      13
    ],
    [
      -7,
      1
    ],
    [
      -38,
      0
    ],
    [
      -23,
      36
    ],
    [
      -66,
      2
    ],
    [
      9,
      57
    ],
    [
      -31,
      10
    ],
    [
      -58,
      43
    ],
    [
      -14,
      23
    ],
    [
      21,
      23
    ],
    [
      -2,
      42
    ],
    [
      -30,
      4
    ],
    [
      -26,
      -17
    ],
    [
      -17,
      11
    ],
    [
      8,
      18
    ],
    [
      -35,
      14
    ],
    [
      -14,
      14
    ],
    [
      12,
      26
    ],
    [
      24,
      24
    ],
    [
      -35,
      19
    ],
    [
      3,
      33
    ],
    [
      -39,
      -14
    ],
    [
      -1,
      -30
    ],
    [
      -18,
      -11
    ],
    [
      -19,
      13
    ],
    [
      -47,
      -1
    ],
    [
      -25,
      31
    ],
    [
      -40,
      16
    ],
    [
      -27,
      -32
    ],
    [
      -36,
      48
    ],
    [
      -22,
      -4
    ],
    [
      -22,
      31
    ],
    [
      -15,
      -8
    ],
    [
      -35,
      14
    ],
    [
      -11,
      18
    ],
    [
      -21,
      -16
    ],
    [
      -71,
      4
    ],
    [
      -43,
      -12
    ],
    [
      -15,
      13
    ],
    [
      -44,
      1
    ],
    [
      -37,
      -17
    ],
    [
      -29,
      -5
    ],
    [
      -65,
      25
    ]
  ],
  [
    [
      994,
      5913
    ],
    [
      -55,
      84
    ],
    [
      -18,
      69
    ],
    [
      -46,
      43
    ],
    [
      -29,
      38
    ],
    [
      3,
      90
    ],
    [
      -28,
      14
    ],
    [
      -23,
      -9
    ],
    [
      -46,
      -4
    ],
    [
      -39,
      12
    ],
    [
      -14,
      22
    ],
    [
      -23,
      18
    ],
    [
      -24,
      35
    ],
    [
      -4,
      50
    ],
    [
      29,
      47
    ],
    [
      4,
      43
    ],
    [
      -4,
      63
    ],
    [
      -42,
      16
    ],
    [
      -58,
      -7
    ],
    [
      -27,
      6
    ],
    [
      -31,
      21
    ],
    [
      -67,
      27
    ],
    [
      -10,
      21
    ],
    [
      10,
      68
    ],
    [
      26,
      56
    ],
    [
      39,
      34
    ],
    [
      57,
      41
    ],
    [
      24,
      30
    ],
    [
      29,
      20
    ],
    [
      37,
      81
    ],
    [
      31,
      30
    ],
    [
      51,
      37
    ],
    [
      42,
      8
    ],
    [
      33,
      -8
    ],
    [
      29,
      -29
    ],
    [
      4,
      -31
    ],
    [
      27,
      -34
    ],
    [
      47,
      -5
    ],
    [
      104,
      40
    ],
    [
      69,
      14
    ],
    [
      85,
      0
    ],
    [
      82,
      29
    ],
    [
      12,
      55
    ],
    [
      23,
      28
    ],
    [
      44,
      31
    ],
    [
      26,
      27
    ],
    [
      37,
      98
    ],
    [
      32,
      32
    ],
    [
      40,
      16
    ],
    [
      77,
      39
    ],
    [
      69,
      27
    ],
    [
      17,
      36
    ],
    [
      29,
      31
    ],
    [
      67,
      107
    ],
    [
      39,
      122
    ],
    [
      5,
      5
    ],
    [
      73,
      26
    ],
    [
      62,
      16
    ],
    [
      59,
      41
    ]
  ],
  [
    [
      7041,
      6724
    ],
    [
      -55,
      16
    ],
    [
      -55,
      -38
    ],
    [
      -43,
      16
    ],
    [
      -52,
      -6
    ],
    [
      -22,
      9
    ],
    [
      -10,
      25
    ],
    [
      -17,
      1
    ]
  ],
  [
    [
      6787,
      6747
    ],
    [
      15,
      37
    ],
    [
      3,
      32
    ],
    [
      -8,
      22
    ],
    [
      36,
      58
    ],
    [
      16,
      40
    ],
    [
      1,
      20
    ],
    [
      -23,
      8
    ],
    [
      5,
      29
    ],
    [
      35,
      -5
    ],
    [
      33,
      13
    ],
    [
      17,
      -3
    ],
    [
      32,
      22
    ],
    [
      18,
      -3
    ],
    [
      14,
      17
    ],
    [
      60,
      -4
    ],
    [
      31,
      -28
    ],
    [
      -2,
      -19
    ],
    [
      15,
      -12
    ],
    [
      -8,
      -26
    ],
    [
      -3,
      -49
    ],
    [
      -28,
      -34
    ],
    [
      6,
      -36
    ],
    [
      25,
      -23
    ],
    [
      14,
      -37
    ],
    [
      -33,
      -9
    ],
    [
      -17,
      -33
    ]
  ],
  [
    [
      3976,
      1674
    ],
    [
      -1,
      -1
    ]
  ],
  [
    [
      3972,
      1658
    ],
    [
      -12,
      -57
    ],
    [
      1,
      -25
    ],
    [
      26,
      -60
    ],
    [
      6,
      -67
    ],
    [
      -2,
      -54
    ]
  ],
  [
    [
      3990,
      1342
    ],
    [
      8,
      -160
    ],
    [
      3,
      -17
    ],
    [
      -28,
      -6
    ],
    [
      -123,
      18
    ],
    [
      -18,
      -1
    ],
    [
      -38,
      -28
    ],
    [
      -17,
      -44
    ],
    [
      13,
      -23
    ],
    [
      -14,
      -9
    ],
    [
      -33,
      -39
    ],
    [
      -1,
      -10
    ],
    [
      -45,
      -48
    ],
    [
      -23,
      -42
    ],
    [
      -8,
      -43
    ],
    [
      29,
      -34
    ],
    [
      37,
      -31
    ],
    [
      -37,
      5
    ],
    [
      -37,
      -6
    ],
    [
      -70,
      -20
    ],
    [
      -8,
      -12
    ],
    [
      -26,
      -10
    ],
    [
      -52,
      -5
    ],
    [
      -48,
      -30
    ],
    [
      -24,
      -20
    ],
    [
      -14,
      -27
    ],
    [
      1,
      -37
    ],
    [
      -17,
      -44
    ],
    [
      3,
      -45
    ],
    [
      -32,
      -46
    ],
    [
      -23,
      -8
    ],
    [
      -35,
      -24
    ],
    [
      -19,
      -5
    ],
    [
      -28,
      -25
    ],
    [
      -49,
      -9
    ],
    [
      -12,
      -21
    ],
    [
      -81,
      14
    ],
    [
      -75,
      56
    ]
  ],
  [
    [
      3049,
      506
    ],
    [
      37,
      50
    ],
    [
      1,
      18
    ],
    [
      25,
      16
    ],
    [
      -23,
      34
    ],
    [
      -8,
      31
    ],
    [
      25,
      32
    ],
    [
      -40,
      59
    ],
    [
      41,
      44
    ],
    [
      5,
      49
    ],
    [
      18,
      19
    ],
    [
      1,
      18
    ],
    [
      20,
      19
    ],
    [
      -14,
      38
    ],
    [
      -40,
      -1
    ],
    [
      -20,
      24
    ],
    [
      14,
      25
    ],
    [
      6,
      40
    ],
    [
      -9,
      7
    ],
    [
      21,
      32
    ],
    [
      -4,
      18
    ],
    [
      -21,
      26
    ],
    [
      22,
      5
    ],
    [
      -1,
      47
    ],
    [
      -30,
      31
    ],
    [
      -62,
      -42
    ],
    [
      -31,
      4
    ],
    [
      -25,
      20
    ],
    [
      7,
      22
    ],
    [
      -8,
      26
    ],
    [
      5,
      48
    ],
    [
      14,
      15
    ],
    [
      9,
      46
    ],
    [
      -28,
      30
    ],
    [
      -29,
      7
    ],
    [
      -29,
      15
    ],
    [
      32,
      60
    ],
    [
      -41,
      25
    ],
    [
      -62,
      5
    ],
    [
      24,
      20
    ],
    [
      9,
      30
    ],
    [
      -31,
      9
    ],
    [
      -30,
      22
    ],
    [
      -36,
      9
    ],
    [
      -11,
      30
    ],
    [
      25,
      0
    ],
    [
      42,
      20
    ],
    [
      1,
      11
    ]
  ],
  [
    [
      2820,
      1619
    ],
    [
      28,
      13
    ],
    [
      17,
      -28
    ],
    [
      19,
      -4
    ],
    [
      83,
      0
    ],
    [
      -7,
      16
    ],
    [
      24,
      44
    ],
    [
      36,
      7
    ],
    [
      24,
      -26
    ],
    [
      9,
      13
    ],
    [
      48,
      13
    ],
    [
      65,
      -10
    ],
    [
      20,
      52
    ],
    [
      29,
      -2
    ],
    [
      31,
      10
    ],
    [
      35,
      51
    ],
    [
      -14,
      19
    ],
    [
      -42,
      9
    ],
    [
      -32,
      -3
    ],
    [
      -15,
      6
    ],
    [
      47,
      50
    ],
    [
      7,
      40
    ],
    [
      -16,
      10
    ],
    [
      7,
      38
    ],
    [
      52,
      22
    ],
    [
      26,
      56
    ],
    [
      35,
      -2
    ],
    [
      18,
      -14
    ],
    [
      29,
      7
    ],
    [
      19,
      -20
    ],
    [
      35,
      -5
    ]
  ],
  [
    [
      4134,
      2244
    ],
    [
      11,
      -28
    ],
    [
      -4,
      -24
    ],
    [
      13,
      -6
    ],
    [
      7,
      -24
    ],
    [
      -30,
      -124
    ],
    [
      -2,
      -56
    ],
    [
      -40,
      -110
    ],
    [
      -40,
      -50
    ],
    [
      -50,
      -79
    ]
  ],
  [
    [
      3988,
      1733
    ],
    [
      -1,
      -19
    ]
  ],
  [
    [
      2961,
      7916
    ],
    [
      -3,
      -26
    ]
  ],
  [
    [
      4519,
      3646
    ],
    [
      78,
      3
    ],
    [
      17,
      21
    ],
    [
      33,
      5
    ]
  ],
  [
    [
      3191,
      3024
    ],
    [
      -2,
      50
    ],
    [
      -6,
      14
    ],
    [
      0,
      44
    ],
    [
      36,
      21
    ],
    [
      -25,
      19
    ],
    [
      -37,
      -3
    ],
    [
      -43,
      13
    ],
    [
      -12,
      22
    ],
    [
      40,
      5
    ],
    [
      16,
      11
    ],
    [
      14,
      30
    ],
    [
      -13,
      18
    ],
    [
      7,
      33
    ],
    [
      12,
      11
    ],
    [
      -7,
      37
    ],
    [
      16,
      32
    ],
    [
      -12,
      32
    ],
    [
      -30,
      11
    ],
    [
      1,
      27
    ],
    [
      26,
      42
    ],
    [
      22,
      5
    ],
    [
      -3,
      22
    ],
    [
      21,
      1
    ],
    [
      29,
      30
    ],
    [
      -74,
      20
    ],
    [
      6,
      38
    ],
    [
      28,
      9
    ],
    [
      -12,
      19
    ],
    [
      7,
      14
    ],
    [
      31,
      25
    ],
    [
      13,
      22
    ],
    [
      -16,
      16
    ],
    [
      -3,
      44
    ],
    [
      -17,
      46
    ]
  ],
  [
    [
      3204,
      3804
    ],
    [
      -7,
      16
    ],
    [
      19,
      34
    ],
    [
      5,
      35
    ],
    [
      20,
      -7
    ],
    [
      31,
      20
    ],
    [
      -5,
      29
    ],
    [
      18,
      6
    ],
    [
      18,
      37
    ],
    [
      21,
      20
    ],
    [
      -16,
      28
    ],
    [
      -29,
      10
    ],
    [
      -2,
      26
    ],
    [
      29,
      17
    ],
    [
      5,
      62
    ],
    [
      30,
      13
    ],
    [
      33,
      -23
    ],
    [
      48,
      -10
    ],
    [
      1,
      51
    ],
    [
      13,
      13
    ],
    [
      29,
      7
    ],
    [
      0,
      49
    ],
    [
      -8,
      28
    ],
    [
      20,
      8
    ],
    [
      18,
      40
    ],
    [
      44,
      -4
    ],
    [
      110,
      -21
    ],
    [
      4,
      -34
    ],
    [
      38,
      -2
    ],
    [
      3,
      -23
    ],
    [
      14,
      -13
    ],
    [
      29,
      -4
    ],
    [
      29,
      -23
    ],
    [
      17,
      23
    ],
    [
      6,
      28
    ],
    [
      74,
      -38
    ],
    [
      25,
      17
    ],
    [
      80,
      16
    ],
    [
      17,
      -20
    ],
    [
      29,
      -14
    ],
    [
      21,
      -30
    ],
    [
      -18,
      -58
    ],
    [
      8,
      -16
    ],
    [
      -29,
      -24
    ],
    [
      23,
      -20
    ],
    [
      4,
      -61
    ],
    [
      -2,
      -24
    ],
    [
      28,
      -6
    ],
    [
      32,
      -29
    ],
    [
      55,
      13
    ]
  ],
  [
    [
      8252,
      5769
    ],
    [
      10,
      -15
    ],
    [
      2,
      -97
    ],
    [
      -25,
      -32
    ],
    [
      3,
      -30
    ]
  ],
  [
    [
      8242,
      5595
    ],
    [
      -45,
      -5
    ],
    [
      -19,
      -19
    ],
    [
      -48,
      5
    ],
    [
      13,
      -60
    ],
    [
      -29,
      -16
    ],
    [
      -36,
      -42
    ],
    [
      11,
      -69
    ],
    [
      -36,
      -37
    ],
    [
      -32,
      -14
    ],
    [
      -26,
      18
    ],
    [
      -10,
      48
    ],
    [
      -20,
      38
    ],
    [
      -25,
      -21
    ],
    [
      8,
      -34
    ],
    [
      -18,
      1
    ],
    [
      -10,
      47
    ],
    [
      -26,
      83
    ],
    [
      -30,
      37
    ],
    [
      0,
      48
    ],
    [
      22,
      -1
    ],
    [
      9,
      31
    ],
    [
      -7,
      16
    ],
    [
      18,
      31
    ],
    [
      27,
      1
    ],
    [
      22,
      41
    ],
    [
      43,
      -11
    ],
    [
      31,
      15
    ],
    [
      6,
      22
    ],
    [
      36,
      -13
    ],
    [
      -6,
      32
    ],
    [
      34,
      -13
    ],
    [
      22,
      -21
    ],
    [
      11,
      44
    ],
    [
      -6,
      21
    ],
    [
      16,
      15
    ],
    [
      41,
      -3
    ],
    [
      26,
      15
    ],
    [
      -6,
      27
    ],
    [
      27,
      0
    ]
  ],
  [
    [
      4066,
      7279
    ],
    [
      22,
      -2
    ],
    [
      39,
      -22
    ],
    [
      42,
      -41
    ],
    [
      31,
      -3
    ],
    [
      33,
      22
    ],
    [
      50,
      -38
    ],
    [
      23,
      -4
    ],
    [
      47,
      -35
    ],
    [
      37,
      -3
    ],
    [
      32,
      -24
    ],
    [
      36,
      -6
    ],
    [
      9,
      -25
    ],
    [
      27,
      -26
    ],
    [
      4,
      -21
    ],
    [
      33,
      11
    ],
    [
      17,
      -29
    ],
    [
      53,
      -27
    ],
    [
      23,
      -4
    ],
    [
      28,
      -23
    ],
    [
      37,
      -21
    ],
    [
      28,
      24
    ],
    [
      35,
      -2
    ],
    [
      18,
      -19
    ],
    [
      28,
      -6
    ],
    [
      61,
      -44
    ],
    [
      25,
      -12
    ],
    [
      79,
      13
    ],
    [
      19,
      -28
    ],
    [
      0,
      -43
    ],
    [
      62,
      0
    ],
    [
      43,
      -18
    ],
    [
      45,
      2
    ],
    [
      44,
      -41
    ],
    [
      32,
      23
    ],
    [
      -1,
      26
    ],
    [
      71,
      -2
    ],
    [
      73,
      -32
    ],
    [
      15,
      -10
    ]
  ],
  [
    [
      5242,
      5860
    ],
    [
      -36,
      -9
    ],
    [
      -4,
      -15
    ],
    [
      17,
      -17
    ],
    [
      2,
      -18
    ],
    [
      -21,
      -12
    ],
    [
      9,
      -15
    ],
    [
      -18,
      -46
    ],
    [
      -8,
      -9
    ]
  ],
  [
    [
      5006,
      5674
    ],
    [
      -21,
      16
    ],
    [
      -13,
      23
    ],
    [
      6,
      46
    ],
    [
      13,
      23
    ],
    [
      -1,
      27
    ],
    [
      -12,
      17
    ],
    [
      -3,
      43
    ],
    [
      29,
      -1
    ],
    [
      -12,
      29
    ],
    [
      -26,
      3
    ],
    [
      -9,
      16
    ],
    [
      -46,
      -15
    ],
    [
      -38,
      17
    ],
    [
      -3,
      -35
    ],
    [
      -38,
      10
    ],
    [
      -19,
      24
    ],
    [
      -12,
      32
    ],
    [
      -33,
      -2
    ],
    [
      -37,
      19
    ],
    [
      -17,
      -4
    ],
    [
      -18,
      15
    ],
    [
      0,
      32
    ],
    [
      -38,
      9
    ],
    [
      -49,
      22
    ],
    [
      -39,
      36
    ],
    [
      -14,
      -12
    ],
    [
      -3,
      -24
    ],
    [
      -46,
      30
    ],
    [
      -28,
      -1
    ],
    [
      -2,
      -32
    ],
    [
      -35,
      -36
    ],
    [
      -104,
      -7
    ],
    [
      5,
      44
    ],
    [
      -18,
      20
    ],
    [
      -23,
      4
    ],
    [
      -27,
      -29
    ],
    [
      -32,
      11
    ],
    [
      -25,
      -15
    ],
    [
      -10,
      -16
    ],
    [
      -44,
      48
    ],
    [
      26,
      11
    ],
    [
      -8,
      16
    ],
    [
      -30,
      20
    ],
    [
      -1,
      36
    ],
    [
      -42,
      5
    ],
    [
      -21,
      -22
    ],
    [
      -36,
      1
    ],
    [
      -8,
      -24
    ],
    [
      -52,
      -11
    ],
    [
      5,
      -27
    ],
    [
      -12,
      -18
    ],
    [
      -30,
      14
    ],
    [
      -25,
      -6
    ],
    [
      -39,
      14
    ],
    [
      -21,
      -28
    ],
    [
      -35,
      12
    ],
    [
      -1,
      17
    ],
    [
      17,
      23
    ],
    [
      -35,
      30
    ],
    [
      -25,
      -7
    ],
    [
      28,
      -26
    ],
    [
      -22,
      -7
    ],
    [
      13,
      -19
    ],
    [
      -13,
      -11
    ],
    [
      -49,
      -3
    ],
    [
      -37,
      41
    ],
    [
      -54,
      -15
    ],
    [
      -26,
      34
    ],
    [
      47,
      45
    ],
    [
      4,
      34
    ],
    [
      -22,
      -3
    ],
    [
      -52,
      -20
    ],
    [
      14,
      -11
    ],
    [
      -1,
      -23
    ],
    [
      -55,
      19
    ],
    [
      -28,
      -43
    ],
    [
      25,
      -43
    ],
    [
      1,
      -19
    ],
    [
      15,
      -12
    ],
    [
      -5,
      -33
    ],
    [
      14,
      -20
    ],
    [
      33,
      -13
    ],
    [
      3,
      -52
    ],
    [
      -7,
      -34
    ],
    [
      44,
      13
    ],
    [
      22,
      -29
    ],
    [
      -1,
      -35
    ],
    [
      16,
      -6
    ],
    [
      -7,
      -23
    ],
    [
      -21,
      -19
    ],
    [
      -17,
      -29
    ],
    [
      -25,
      -9
    ],
    [
      -10,
      20
    ],
    [
      -19,
      -4
    ],
    [
      -28,
      21
    ],
    [
      -14,
      20
    ],
    [
      -26,
      12
    ],
    [
      -23,
      -32
    ],
    [
      -17,
      -8
    ],
    [
      -20,
      21
    ],
    [
      12,
      14
    ],
    [
      -32,
      22
    ],
    [
      -4,
      35
    ],
    [
      4,
      39
    ],
    [
      -33,
      71
    ],
    [
      54,
      37
    ],
    [
      -1,
      28
    ],
    [
      40,
      24
    ],
    [
      -20,
      13
    ],
    [
      -18,
      46
    ],
    [
      -13,
      11
    ],
    [
      14,
      21
    ],
    [
      30,
      16
    ],
    [
      -4,
      17
    ],
    [
      24,
      16
    ],
    [
      58,
      -5
    ],
    [
      10,
      9
    ],
    [
      40,
      8
    ],
    [
      6,
      19
    ],
    [
      -18,
      15
    ],
    [
      19,
      36
    ],
    [
      44,
      53
    ],
    [
      0,
      15
    ],
    [
      20,
      15
    ],
    [
      0,
      24
    ],
    [
      19,
      43
    ],
    [
      20,
      23
    ],
    [
      -23,
      35
    ],
    [
      4,
      14
    ],
    [
      -21,
      16
    ],
    [
      -5,
      44
    ],
    [
      -41,
      6
    ],
    [
      -18,
      20
    ],
    [
      -33,
      12
    ],
    [
      -51,
      -14
    ],
    [
      -62,
      23
    ],
    [
      -8,
      14
    ],
    [
      -52,
      -11
    ]
  ],
  [
    [
      3112,
      6940
    ],
    [
      22,
      17
    ],
    [
      25,
      0
    ],
    [
      37,
      24
    ],
    [
      5,
      20
    ],
    [
      -19,
      19
    ],
    [
      -2,
      18
    ],
    [
      22,
      28
    ],
    [
      -35,
      80
    ],
    [
      -33,
      25
    ]
  ],
  [
    [
      3134,
      7171
    ],
    [
      -15,
      18
    ],
    [
      11,
      43
    ],
    [
      -45,
      36
    ],
    [
      -3,
      22
    ]
  ],
  [
    [
      3082,
      7290
    ],
    [
      10,
      45
    ],
    [
      -31,
      32
    ],
    [
      2,
      56
    ],
    [
      8,
      15
    ],
    [
      -23,
      72
    ],
    [
      0,
      22
    ],
    [
      19,
      38
    ],
    [
      13,
      61
    ],
    [
      25,
      29
    ],
    [
      7,
      19
    ],
    [
      44,
      22
    ],
    [
      59,
      65
    ],
    [
      1,
      24
    ]
  ],
  [
    [
      3216,
      7790
    ],
    [
      -4,
      7
    ]
  ],
  [
    [
      3212,
      7797
    ],
    [
      25,
      2
    ],
    [
      26,
      -24
    ],
    [
      70,
      -27
    ],
    [
      -7,
      -23
    ],
    [
      -47,
      -46
    ],
    [
      -19,
      -59
    ],
    [
      21,
      -28
    ],
    [
      -3,
      -22
    ],
    [
      27,
      -15
    ],
    [
      13,
      10
    ],
    [
      25,
      -5
    ],
    [
      10,
      -15
    ],
    [
      1,
      -29
    ],
    [
      64,
      41
    ],
    [
      23,
      9
    ],
    [
      34,
      30
    ],
    [
      53,
      -18
    ],
    [
      9,
      -30
    ],
    [
      22,
      -23
    ],
    [
      40,
      -24
    ],
    [
      71,
      -17
    ],
    [
      -15,
      -24
    ],
    [
      -45,
      -24
    ],
    [
      30,
      -20
    ],
    [
      17,
      -1
    ],
    [
      14,
      -28
    ],
    [
      58,
      -4
    ],
    [
      21,
      -23
    ],
    [
      49,
      -38
    ],
    [
      42,
      -11
    ],
    [
      3,
      -25
    ],
    [
      42,
      11
    ],
    [
      46,
      -14
    ],
    [
      37,
      15
    ],
    [
      22,
      -28
    ],
    [
      51,
      -30
    ],
    [
      24,
      39
    ]
  ],
  [
    [
      3212,
      7797
    ],
    [
      81,
      35
    ],
    [
      2,
      16
    ],
    [
      -25,
      16
    ],
    [
      15,
      11
    ],
    [
      -30,
      42
    ],
    [
      33,
      34
    ],
    [
      -10,
      35
    ],
    [
      24,
      9
    ],
    [
      -7,
      16
    ],
    [
      34,
      35
    ],
    [
      65,
      11
    ],
    [
      19,
      13
    ],
    [
      29,
      1
    ],
    [
      23,
      17
    ],
    [
      24,
      0
    ],
    [
      34,
      -28
    ],
    [
      45,
      11
    ],
    [
      17,
      -13
    ],
    [
      50,
      3
    ],
    [
      8,
      -19
    ],
    [
      21,
      -15
    ],
    [
      40,
      5
    ],
    [
      -31,
      47
    ]
  ],
  [
    [
      3673,
      8079
    ],
    [
      8,
      26
    ],
    [
      17,
      6
    ],
    [
      26,
      38
    ],
    [
      25,
      -11
    ],
    [
      41,
      -47
    ],
    [
      17,
      -49
    ],
    [
      29,
      -10
    ],
    [
      10,
      -27
    ],
    [
      30,
      1
    ],
    [
      11,
      -22
    ],
    [
      20,
      -10
    ],
    [
      51,
      21
    ],
    [
      39,
      -9
    ],
    [
      21,
      -29
    ],
    [
      44,
      -16
    ],
    [
      20,
      -21
    ],
    [
      20,
      11
    ],
    [
      26,
      -24
    ],
    [
      -9,
      -52
    ],
    [
      23,
      -2
    ],
    [
      87,
      -38
    ],
    [
      21,
      7
    ],
    [
      47,
      -26
    ],
    [
      28,
      -27
    ],
    [
      62,
      -17
    ],
    [
      12,
      -22
    ],
    [
      -60,
      -8
    ],
    [
      2,
      -14
    ],
    [
      -38,
      -27
    ],
    [
      -28,
      -29
    ],
    [
      -37,
      -12
    ],
    [
      -6,
      -23
    ],
    [
      -22,
      -20
    ],
    [
      -28,
      -1
    ],
    [
      -13,
      -22
    ],
    [
      18,
      -29
    ],
    [
      -3,
      -13
    ],
    [
      -38,
      -37
    ],
    [
      -9,
      -30
    ],
    [
      13,
      -23
    ],
    [
      -6,
      -29
    ],
    [
      -15,
      -6
    ],
    [
      6,
      -24
    ],
    [
      -28,
      -4
    ],
    [
      -18,
      -20
    ],
    [
      -6,
      -29
    ],
    [
      -18,
      -22
    ],
    [
      1,
      -29
    ]
  ],
  [
    [
      7144,
      4935
    ],
    [
      11,
      -28
    ],
    [
      -23,
      2
    ],
    [
      12,
      26
    ]
  ],
  [
    [
      6857,
      4948
    ],
    [
      31,
      -29
    ],
    [
      -7,
      -36
    ],
    [
      -26,
      18
    ],
    [
      2,
      47
    ]
  ],
  [
    [
      7066,
      4950
    ],
    [
      9,
      -41
    ],
    [
      -17,
      -1
    ],
    [
      8,
      42
    ]
  ],
  [
    [
      6894,
      4981
    ],
    [
      11,
      -21
    ],
    [
      -20,
      -12
    ],
    [
      -13,
      17
    ],
    [
      22,
      16
    ]
  ],
  [
    [
      6828,
      4986
    ],
    [
      12,
      -43
    ],
    [
      -6,
      -31
    ],
    [
      -13,
      -9
    ],
    [
      -26,
      8
    ],
    [
      1,
      23
    ],
    [
      32,
      52
    ]
  ],
  [
    [
      6934,
      4995
    ],
    [
      15,
      -18
    ],
    [
      -16,
      -15
    ],
    [
      -18,
      10
    ],
    [
      19,
      23
    ]
  ],
  [
    [
      7067,
      5e3
    ],
    [
      27,
      3
    ],
    [
      21,
      -20
    ],
    [
      -29,
      -18
    ],
    [
      -19,
      35
    ]
  ],
  [
    [
      7059,
      5033
    ],
    [
      30,
      -2
    ],
    [
      3,
      -27
    ],
    [
      -18,
      -4
    ],
    [
      -36,
      13
    ],
    [
      21,
      20
    ]
  ],
  [
    [
      7129,
      5044
    ],
    [
      21,
      -22
    ],
    [
      -5,
      -17
    ],
    [
      -30,
      20
    ],
    [
      14,
      19
    ]
  ],
  [
    [
      7106,
      5089
    ],
    [
      12,
      -13
    ],
    [
      -9,
      -29
    ],
    [
      12,
      -51
    ],
    [
      -21,
      12
    ],
    [
      -10,
      40
    ],
    [
      2,
      23
    ],
    [
      14,
      18
    ]
  ],
  [
    [
      7124,
      5092
    ],
    [
      10,
      -34
    ],
    [
      -17,
      -5
    ],
    [
      7,
      39
    ]
  ],
  [
    [
      7019,
      5096
    ],
    [
      32,
      -13
    ],
    [
      -34,
      -27
    ],
    [
      -19,
      6
    ],
    [
      21,
      34
    ]
  ],
  [
    [
      7088,
      5208
    ],
    [
      3,
      -45
    ],
    [
      -15,
      0
    ],
    [
      2,
      39
    ],
    [
      10,
      6
    ]
  ],
  [
    [
      7096,
      5213
    ],
    [
      12,
      -4
    ],
    [
      15,
      -41
    ],
    [
      -25,
      -7
    ],
    [
      -11,
      19
    ],
    [
      9,
      33
    ]
  ],
  [
    [
      7041,
      6724
    ],
    [
      40,
      -13
    ],
    [
      3,
      -23
    ],
    [
      36,
      -39
    ],
    [
      35,
      -7
    ],
    [
      15,
      -29
    ],
    [
      42,
      2
    ],
    [
      23,
      12
    ],
    [
      71,
      -11
    ],
    [
      39,
      -24
    ],
    [
      74,
      -14
    ]
  ],
  [
    [
      7371,
      6400
    ],
    [
      -28,
      17
    ],
    [
      -15,
      -18
    ],
    [
      8,
      -32
    ],
    [
      -24,
      -22
    ],
    [
      -66,
      5
    ],
    [
      -26,
      13
    ],
    [
      -20,
      24
    ],
    [
      -21,
      5
    ],
    [
      -8,
      34
    ],
    [
      -11,
      15
    ],
    [
      -5,
      37
    ],
    [
      -36,
      6
    ],
    [
      6,
      -41
    ],
    [
      -27,
      -3
    ],
    [
      -57,
      8
    ],
    [
      -18,
      9
    ],
    [
      -7,
      24
    ],
    [
      -39,
      16
    ],
    [
      -61,
      52
    ],
    [
      -12,
      -35
    ],
    [
      44,
      -16
    ],
    [
      12,
      -26
    ],
    [
      -24,
      -7
    ],
    [
      -30,
      -22
    ],
    [
      -12,
      -29
    ],
    [
      -26,
      -5
    ],
    [
      -31,
      -28
    ],
    [
      6,
      -28
    ],
    [
      -19,
      -18
    ],
    [
      -11,
      -24
    ],
    [
      8,
      -32
    ],
    [
      33,
      -4
    ],
    [
      20,
      8
    ],
    [
      10,
      -17
    ],
    [
      26,
      -14
    ],
    [
      25,
      -37
    ],
    [
      36,
      -29
    ],
    [
      32,
      -11
    ],
    [
      41,
      5
    ],
    [
      23,
      -5
    ],
    [
      4,
      -38
    ],
    [
      15,
      -13
    ],
    [
      39,
      -9
    ],
    [
      -29,
      -44
    ],
    [
      -24,
      14
    ],
    [
      -14,
      -12
    ],
    [
      -42,
      12
    ],
    [
      -40,
      -11
    ],
    [
      -28,
      13
    ],
    [
      -15,
      -5
    ],
    [
      3,
      -55
    ],
    [
      -19,
      -29
    ],
    [
      -17,
      -2
    ],
    [
      -4,
      -22
    ],
    [
      -20,
      6
    ],
    [
      -19,
      22
    ],
    [
      -16,
      -4
    ],
    [
      -5,
      -31
    ],
    [
      -50,
      -60
    ],
    [
      30,
      -40
    ],
    [
      32,
      -27
    ],
    [
      26,
      -8
    ],
    [
      25,
      -21
    ],
    [
      28,
      1
    ],
    [
      50,
      -19
    ],
    [
      53,
      -8
    ],
    [
      5,
      -12
    ],
    [
      -4,
      -55
    ],
    [
      2,
      -59
    ],
    [
      -53,
      -18
    ],
    [
      -5,
      -71
    ],
    [
      28,
      -12
    ],
    [
      6,
      -19
    ],
    [
      28,
      -23
    ],
    [
      6,
      -37
    ],
    [
      -22,
      -25
    ],
    [
      30,
      -25
    ],
    [
      44,
      4
    ],
    [
      16,
      -13
    ],
    [
      -31,
      -31
    ],
    [
      0,
      -42
    ],
    [
      13,
      -30
    ],
    [
      20,
      -11
    ],
    [
      -16,
      -36
    ],
    [
      13,
      -14
    ],
    [
      -10,
      -18
    ],
    [
      2,
      -23
    ],
    [
      -23,
      -8
    ],
    [
      -8,
      -38
    ],
    [
      5,
      -22
    ],
    [
      26,
      -22
    ],
    [
      -12,
      -40
    ],
    [
      -79,
      9
    ],
    [
      -18,
      -32
    ],
    [
      6,
      -21
    ],
    [
      -13,
      -25
    ],
    [
      1,
      -20
    ],
    [
      -25,
      -18
    ],
    [
      -38,
      16
    ],
    [
      -11,
      -20
    ],
    [
      -25,
      5
    ],
    [
      -33,
      -30
    ],
    [
      -18,
      38
    ],
    [
      -3,
      26
    ],
    [
      20,
      25
    ],
    [
      -16,
      13
    ],
    [
      -39,
      -20
    ],
    [
      -31,
      -62
    ],
    [
      -43,
      -36
    ],
    [
      -58,
      -27
    ],
    [
      -61,
      -10
    ]
  ],
  [
    [
      6606,
      4896
    ],
    [
      -5,
      36
    ],
    [
      -9,
      18
    ],
    [
      -56,
      12
    ],
    [
      -12,
      19
    ],
    [
      -3,
      32
    ],
    [
      -49,
      -15
    ],
    [
      -21,
      -14
    ],
    [
      -11,
      14
    ],
    [
      12,
      27
    ],
    [
      -6,
      17
    ],
    [
      -20,
      14
    ],
    [
      -52,
      10
    ],
    [
      -5,
      13
    ],
    [
      -26,
      -4
    ],
    [
      2,
      24
    ]
  ],
  [
    [
      6345,
      5099
    ],
    [
      24,
      1
    ],
    [
      10,
      14
    ],
    [
      8,
      45
    ],
    [
      -27,
      8
    ],
    [
      8,
      17
    ],
    [
      -11,
      33
    ],
    [
      -36,
      1
    ],
    [
      -5,
      26
    ],
    [
      -30,
      18
    ],
    [
      -24,
      4
    ],
    [
      -21,
      18
    ],
    [
      5,
      46
    ],
    [
      -13,
      19
    ],
    [
      -39,
      12
    ],
    [
      -23,
      -6
    ],
    [
      -33,
      33
    ],
    [
      -27,
      17
    ],
    [
      -42,
      -5
    ],
    [
      -27,
      21
    ],
    [
      -3,
      23
    ],
    [
      12,
      13
    ],
    [
      -1,
      49
    ],
    [
      27,
      1
    ],
    [
      36,
      12
    ],
    [
      -2,
      31
    ],
    [
      35,
      -5
    ],
    [
      5,
      -22
    ],
    [
      24,
      -22
    ],
    [
      44,
      9
    ],
    [
      2,
      26
    ],
    [
      30,
      29
    ],
    [
      28,
      0
    ],
    [
      63,
      22
    ],
    [
      27,
      -3
    ],
    [
      9,
      29
    ],
    [
      27,
      34
    ],
    [
      55,
      -21
    ],
    [
      31,
      -7
    ],
    [
      -4,
      24
    ],
    [
      30,
      -3
    ],
    [
      24,
      11
    ],
    [
      -1,
      21
    ],
    [
      -20,
      23
    ],
    [
      34,
      2
    ],
    [
      37,
      -17
    ],
    [
      21,
      14
    ],
    [
      -2,
      31
    ],
    [
      26,
      -9
    ],
    [
      3,
      24
    ],
    [
      37,
      -4
    ],
    [
      -2,
      32
    ],
    [
      19,
      14
    ],
    [
      20,
      31
    ],
    [
      0,
      59
    ],
    [
      31,
      0
    ],
    [
      9,
      33
    ],
    [
      -4,
      20
    ],
    [
      -21,
      5
    ],
    [
      20,
      35
    ],
    [
      23,
      12
    ],
    [
      -1,
      18
    ],
    [
      -34,
      34
    ],
    [
      -31,
      20
    ],
    [
      5,
      40
    ]
  ],
  [
    [
      6819,
      6524
    ],
    [
      26,
      59
    ],
    [
      -5,
      49
    ],
    [
      -13,
      37
    ],
    [
      -30,
      19
    ],
    [
      -18,
      23
    ],
    [
      8,
      36
    ]
  ],
  [
    [
      6606,
      4896
    ],
    [
      -32,
      -20
    ],
    [
      -54,
      -2
    ],
    [
      -30,
      -10
    ],
    [
      -69,
      -51
    ],
    [
      -28,
      -43
    ],
    [
      -8,
      -21
    ],
    [
      11,
      -38
    ],
    [
      36,
      -60
    ],
    [
      -2,
      -22
    ],
    [
      14,
      -36
    ],
    [
      -78,
      -51
    ],
    [
      -19,
      -39
    ],
    [
      17,
      -10
    ],
    [
      1,
      -18
    ],
    [
      -60,
      -33
    ],
    [
      -28,
      -20
    ],
    [
      -34,
      -37
    ],
    [
      -21,
      -35
    ],
    [
      -47,
      -18
    ],
    [
      -63,
      -17
    ],
    [
      -51,
      -8
    ],
    [
      -69,
      -22
    ],
    [
      -118,
      -55
    ],
    [
      -47,
      -30
    ],
    [
      -42,
      -37
    ],
    [
      -68,
      -45
    ],
    [
      -29,
      -30
    ],
    [
      -13,
      -24
    ]
  ],
  [
    [
      5415,
      5199
    ],
    [
      46,
      -17
    ],
    [
      -1,
      -16
    ],
    [
      20,
      -16
    ],
    [
      33,
      -11
    ],
    [
      47,
      5
    ],
    [
      26,
      21
    ],
    [
      44,
      4
    ],
    [
      38,
      -5
    ],
    [
      20,
      10
    ],
    [
      27,
      -9
    ],
    [
      59,
      21
    ],
    [
      18,
      -62
    ],
    [
      -27,
      -45
    ],
    [
      -1,
      -14
    ],
    [
      26,
      -5
    ],
    [
      38,
      -18
    ],
    [
      52,
      37
    ],
    [
      16,
      0
    ],
    [
      62,
      -26
    ],
    [
      65,
      -13
    ],
    [
      1,
      -19
    ],
    [
      38,
      0
    ],
    [
      17,
      13
    ],
    [
      28,
      55
    ],
    [
      -19,
      19
    ],
    [
      16,
      20
    ],
    [
      2,
      26
    ],
    [
      -24,
      24
    ],
    [
      6,
      15
    ],
    [
      34,
      14
    ],
    [
      11,
      -17
    ],
    [
      34,
      -7
    ],
    [
      30,
      -15
    ],
    [
      22,
      -26
    ],
    [
      24,
      -13
    ],
    [
      26,
      11
    ],
    [
      51,
      -34
    ],
    [
      25,
      -7
    ]
  ],
  [
    [
      1716,
      4408
    ],
    [
      -18,
      -17
    ],
    [
      -55,
      15
    ],
    [
      -11,
      31
    ]
  ],
  [
    [
      1632,
      4437
    ],
    [
      -9,
      27
    ],
    [
      34,
      0
    ],
    [
      4,
      11
    ],
    [
      42,
      -5
    ],
    [
      -26,
      -27
    ],
    [
      6,
      -23
    ],
    [
      21,
      14
    ],
    [
      12,
      -26
    ]
  ],
  [
    [
      1578,
      4491
    ],
    [
      14,
      33
    ]
  ],
  [
    [
      1592,
      4524
    ],
    [
      18,
      -18
    ],
    [
      -5,
      -17
    ],
    [
      -27,
      2
    ]
  ],
  [
    [
      2028,
      2934
    ],
    [
      45,
      1
    ],
    [
      0,
      -54
    ],
    [
      12,
      -36
    ],
    [
      13,
      -5
    ],
    [
      5,
      -24
    ],
    [
      -23,
      -6
    ],
    [
      16,
      -30
    ],
    [
      -14,
      -27
    ],
    [
      7,
      -21
    ],
    [
      -21,
      -30
    ],
    [
      -19,
      2
    ],
    [
      -31,
      -20
    ]
  ],
  [
    [
      2018,
      2684
    ],
    [
      -16,
      6
    ],
    [
      1,
      24
    ],
    [
      -21,
      13
    ],
    [
      -15,
      31
    ],
    [
      0,
      19
    ],
    [
      -16,
      53
    ],
    [
      -44,
      53
    ],
    [
      -21,
      63
    ],
    [
      -9,
      12
    ]
  ],
  [
    [
      1877,
      2958
    ],
    [
      34,
      0
    ],
    [
      28,
      24
    ],
    [
      27,
      -18
    ],
    [
      11,
      -38
    ],
    [
      9,
      -6
    ],
    [
      42,
      14
    ]
  ],
  [
    [
      56,
      5622
    ],
    [
      21,
      -27
    ],
    [
      -25,
      -41
    ],
    [
      -18,
      -7
    ],
    [
      -8,
      24
    ],
    [
      23,
      26
    ],
    [
      7,
      25
    ]
  ],
  [
    [
      69,
      5646
    ],
    [
      15,
      -13
    ],
    [
      -14,
      -16
    ],
    [
      -19,
      15
    ],
    [
      18,
      14
    ]
  ],
  [
    [
      117,
      5669
    ],
    [
      16,
      -11
    ],
    [
      -21,
      -19
    ],
    [
      -12,
      11
    ],
    [
      17,
      19
    ]
  ],
  [
    [
      104,
      5676
    ],
    [
      7,
      -15
    ],
    [
      -22,
      -14
    ],
    [
      -4,
      29
    ],
    [
      19,
      0
    ]
  ],
  [
    [
      56,
      5678
    ],
    [
      -7,
      -51
    ],
    [
      -22,
      -8
    ],
    [
      -12,
      -38
    ],
    [
      -15,
      15
    ],
    [
      5,
      28
    ],
    [
      24,
      35
    ],
    [
      22,
      2
    ],
    [
      5,
      17
    ]
  ],
  [
    [
      2097,
      5376
    ],
    [
      17,
      -27
    ],
    [
      3,
      -23
    ],
    [
      28,
      1
    ],
    [
      1,
      -32
    ],
    [
      -21,
      -28
    ],
    [
      -7,
      -29
    ],
    [
      -36,
      2
    ],
    [
      -22,
      -27
    ],
    [
      -44,
      -19
    ],
    [
      6,
      -25
    ],
    [
      46,
      2
    ],
    [
      12,
      -15
    ],
    [
      -26,
      -17
    ],
    [
      -22,
      -3
    ],
    [
      -21,
      9
    ],
    [
      1,
      -46
    ],
    [
      16,
      -3
    ],
    [
      5,
      -52
    ],
    [
      -12,
      -17
    ],
    [
      15,
      -16
    ]
  ],
  [
    [
      2036,
      5011
    ],
    [
      -42,
      -16
    ],
    [
      -67,
      -31
    ],
    [
      6,
      -23
    ],
    [
      15,
      -10
    ],
    [
      -1,
      -22
    ],
    [
      -21,
      -15
    ],
    [
      12,
      -34
    ],
    [
      71,
      21
    ],
    [
      48,
      -10
    ],
    [
      29,
      10
    ],
    [
      5,
      -26
    ],
    [
      -29,
      -7
    ],
    [
      -57,
      -1
    ],
    [
      -3,
      -12
    ],
    [
      -29,
      -9
    ],
    [
      -5,
      -31
    ],
    [
      -19,
      -12
    ],
    [
      -21,
      2
    ],
    [
      -3,
      -32
    ],
    [
      -28,
      -1
    ],
    [
      -36,
      -12
    ],
    [
      55,
      -21
    ],
    [
      19,
      -23
    ],
    [
      32,
      -52
    ],
    [
      -2,
      -24
    ],
    [
      -33,
      -22
    ],
    [
      1,
      -25
    ],
    [
      -34,
      -19
    ],
    [
      -38,
      4
    ],
    [
      -5,
      15
    ],
    [
      -56,
      30
    ],
    [
      -7,
      -40
    ],
    [
      14,
      -3
    ],
    [
      -2,
      -30
    ],
    [
      -21,
      -37
    ],
    [
      8,
      -33
    ],
    [
      -4,
      -26
    ],
    [
      -39,
      2
    ],
    [
      -6,
      -18
    ],
    [
      -27,
      -10
    ]
  ],
  [
    [
      1632,
      4437
    ],
    [
      -30,
      5
    ],
    [
      -19,
      -23
    ],
    [
      -30,
      -7
    ]
  ],
  [
    [
      1553,
      4412
    ],
    [
      3,
      36
    ],
    [
      22,
      43
    ]
  ],
  [
    [
      1592,
      4524
    ],
    [
      10,
      10
    ],
    [
      3,
      34
    ],
    [
      -34,
      96
    ],
    [
      -28,
      53
    ],
    [
      5,
      26
    ],
    [
      -17,
      5
    ],
    [
      -25,
      52
    ],
    [
      24,
      37
    ],
    [
      -2,
      15
    ],
    [
      12,
      19
    ],
    [
      -27,
      10
    ],
    [
      5,
      19
    ],
    [
      41,
      9
    ],
    [
      25,
      5
    ],
    [
      -73,
      8
    ],
    [
      -21,
      -8
    ],
    [
      -10,
      16
    ],
    [
      12,
      28
    ],
    [
      20,
      23
    ],
    [
      -32,
      6
    ],
    [
      -3,
      38
    ],
    [
      18,
      60
    ],
    [
      18,
      13
    ],
    [
      49,
      -14
    ],
    [
      15,
      22
    ],
    [
      -37,
      -1
    ],
    [
      -19,
      16
    ],
    [
      -44,
      -18
    ],
    [
      -32,
      18
    ],
    [
      -16,
      -15
    ],
    [
      -18,
      -45
    ],
    [
      -20,
      -70
    ],
    [
      1,
      -55
    ],
    [
      16,
      -32
    ],
    [
      -13,
      -18
    ],
    [
      -10,
      -35
    ],
    [
      -38,
      -43
    ],
    [
      -16,
      -30
    ],
    [
      11,
      -14
    ],
    [
      -23,
      -14
    ],
    [
      -86,
      -34
    ],
    [
      -55,
      -28
    ],
    [
      -43,
      -10
    ],
    [
      -24,
      -24
    ],
    [
      -40,
      -8
    ],
    [
      -59,
      -24
    ],
    [
      -2,
      -5
    ],
    [
      -45,
      -6
    ],
    [
      -7,
      -3
    ],
    [
      -28,
      2
    ],
    [
      -31,
      -15
    ],
    [
      -80,
      30
    ],
    [
      -55,
      27
    ],
    [
      -49,
      30
    ],
    [
      -63,
      49
    ],
    [
      -32,
      32
    ],
    [
      -95,
      103
    ],
    [
      -168,
      140
    ],
    [
      -61,
      62
    ],
    [
      -36,
      41
    ],
    [
      -6,
      21
    ],
    [
      24,
      41
    ],
    [
      21,
      -14
    ],
    [
      42,
      9
    ],
    [
      -8,
      -41
    ],
    [
      19,
      -13
    ],
    [
      23,
      6
    ],
    [
      17,
      18
    ],
    [
      27,
      -5
    ],
    [
      35,
      21
    ],
    [
      33,
      -10
    ],
    [
      28,
      15
    ],
    [
      14,
      21
    ],
    [
      18,
      -18
    ],
    [
      28,
      14
    ],
    [
      25,
      27
    ],
    [
      28,
      7
    ],
    [
      49,
      2
    ],
    [
      44,
      67
    ],
    [
      14,
      30
    ],
    [
      28,
      27
    ],
    [
      17,
      27
    ],
    [
      -26,
      4
    ],
    [
      -1,
      -21
    ],
    [
      -15,
      -10
    ],
    [
      -39,
      16
    ],
    [
      -35,
      -12
    ],
    [
      -10,
      -11
    ],
    [
      -53,
      -6
    ],
    [
      -43,
      -12
    ],
    [
      -25,
      -12
    ],
    [
      -19,
      -25
    ],
    [
      -56,
      14
    ],
    [
      -30,
      -3
    ],
    [
      -43,
      18
    ],
    [
      -42,
      2
    ],
    [
      -186,
      105
    ],
    [
      -23,
      22
    ],
    [
      20,
      8
    ],
    [
      0,
      25
    ],
    [
      -13,
      19
    ],
    [
      -36,
      31
    ],
    [
      -4,
      53
    ],
    [
      24,
      28
    ],
    [
      24,
      13
    ],
    [
      14,
      34
    ],
    [
      -34,
      6
    ],
    [
      -7,
      29
    ],
    [
      69,
      0
    ],
    [
      6,
      100
    ],
    [
      20,
      15
    ],
    [
      8,
      -32
    ],
    [
      31,
      27
    ],
    [
      22,
      -26
    ],
    [
      31,
      16
    ],
    [
      33,
      -11
    ],
    [
      39,
      14
    ],
    [
      61,
      -4
    ],
    [
      35,
      7
    ],
    [
      49,
      -39
    ],
    [
      98,
      -1
    ],
    [
      16,
      9
    ],
    [
      15,
      32
    ],
    [
      91,
      20
    ],
    [
      69,
      22
    ],
    [
      -5,
      -22
    ],
    [
      5,
      -33
    ],
    [
      50,
      -12
    ],
    [
      54,
      10
    ],
    [
      -2,
      16
    ],
    [
      39,
      23
    ],
    [
      17,
      -4
    ],
    [
      26,
      14
    ],
    [
      -1,
      13
    ],
    [
      -37,
      3
    ],
    [
      -4,
      53
    ],
    [
      37,
      27
    ]
  ],
  [
    [
      3082,
      7290
    ],
    [
      -47,
      2
    ],
    [
      -6,
      -12
    ],
    [
      -30,
      -6
    ],
    [
      1,
      -45
    ],
    [
      -39,
      -33
    ],
    [
      16,
      -19
    ],
    [
      47,
      3
    ],
    [
      31,
      -13
    ],
    [
      20,
      -29
    ],
    [
      21,
      21
    ],
    [
      38,
      12
    ]
  ],
  [
    [
      2941,
      7963
    ],
    [
      28,
      -12
    ],
    [
      17,
      9
    ],
    [
      38,
      -52
    ],
    [
      30,
      -3
    ],
    [
      18,
      -14
    ],
    [
      1,
      -30
    ],
    [
      -15,
      -10
    ],
    [
      -1,
      0
    ],
    [
      31,
      -20
    ],
    [
      0,
      -3
    ],
    [
      38,
      -15
    ],
    [
      12,
      3
    ],
    [
      30,
      -19
    ],
    [
      20,
      4
    ],
    [
      28,
      -11
    ]
  ],
  [
    [
      3494,
      8498
    ],
    [
      19,
      -24
    ],
    [
      28,
      -13
    ],
    [
      -20,
      -27
    ],
    [
      1,
      -19
    ],
    [
      44,
      -20
    ],
    [
      -6,
      -20
    ],
    [
      55,
      -51
    ],
    [
      12,
      -1
    ],
    [
      -28,
      -68
    ],
    [
      15,
      -34
    ],
    [
      32,
      -21
    ],
    [
      -10,
      -17
    ],
    [
      -26,
      -11
    ],
    [
      25,
      -30
    ],
    [
      11,
      -40
    ],
    [
      27,
      -23
    ]
  ],
  [
    [
      2634,
      8514
    ],
    [
      18,
      23
    ],
    [
      -4,
      37
    ],
    [
      -43,
      45
    ],
    [
      28,
      12
    ],
    [
      23,
      -15
    ],
    [
      28,
      11
    ],
    [
      26,
      29
    ],
    [
      50,
      9
    ],
    [
      13,
      24
    ],
    [
      37,
      26
    ],
    [
      29,
      -1
    ],
    [
      27,
      9
    ],
    [
      27,
      -15
    ],
    [
      59,
      3
    ],
    [
      27,
      -19
    ],
    [
      14,
      -27
    ],
    [
      27,
      -15
    ],
    [
      48,
      -3
    ],
    [
      7,
      -22
    ],
    [
      24,
      -6
    ],
    [
      32,
      -24
    ],
    [
      20,
      19
    ],
    [
      26,
      -6
    ],
    [
      43,
      25
    ],
    [
      45,
      11
    ],
    [
      27,
      -22
    ],
    [
      -10,
      -13
    ],
    [
      34,
      -16
    ],
    [
      19,
      -20
    ],
    [
      -5,
      -21
    ],
    [
      25,
      -33
    ],
    [
      20,
      0
    ],
    [
      20,
      23
    ],
    [
      31,
      0
    ],
    [
      39,
      16
    ],
    [
      31,
      -29
    ],
    [
      -31,
      -15
    ],
    [
      4,
      -34
    ],
    [
      25,
      18
    ]
  ],
  [
    [
      2446,
      8437
    ],
    [
      -27,
      8
    ],
    [
      -24,
      18
    ],
    [
      -20,
      -5
    ],
    [
      -7,
      22
    ],
    [
      -27,
      7
    ],
    [
      -29,
      -16
    ],
    [
      -30,
      13
    ],
    [
      -26,
      -5
    ],
    [
      -35,
      6
    ],
    [
      -10,
      24
    ],
    [
      -1,
      46
    ],
    [
      -11,
      19
    ],
    [
      -25,
      -4
    ],
    [
      -31,
      13
    ],
    [
      -24,
      -9
    ],
    [
      -29,
      22
    ],
    [
      -41,
      20
    ],
    [
      -42,
      9
    ],
    [
      -34,
      25
    ],
    [
      -46,
      6
    ],
    [
      -6,
      -11
    ],
    [
      -40,
      38
    ],
    [
      -19,
      0
    ],
    [
      9,
      39
    ],
    [
      -18,
      15
    ],
    [
      -16,
      39
    ],
    [
      20,
      69
    ],
    [
      -19,
      32
    ],
    [
      10,
      26
    ],
    [
      -12,
      10
    ],
    [
      10,
      38
    ],
    [
      -24,
      35
    ],
    [
      -9,
      46
    ],
    [
      1,
      25
    ],
    [
      -23,
      42
    ],
    [
      -9,
      4
    ],
    [
      17,
      70
    ],
    [
      58,
      4
    ],
    [
      25,
      19
    ],
    [
      -7,
      16
    ],
    [
      35,
      35
    ],
    [
      43,
      8
    ],
    [
      45,
      19
    ],
    [
      15,
      20
    ],
    [
      -3,
      36
    ],
    [
      13,
      32
    ],
    [
      -20,
      0
    ],
    [
      -44,
      22
    ],
    [
      -47,
      10
    ],
    [
      -18,
      12
    ],
    [
      -9,
      26
    ],
    [
      13,
      23
    ],
    [
      20,
      11
    ],
    [
      -4,
      21
    ],
    [
      -50,
      15
    ],
    [
      -28,
      -5
    ],
    [
      -26,
      7
    ],
    [
      -25,
      -4
    ],
    [
      -13,
      13
    ],
    [
      -33,
      9
    ],
    [
      -46,
      29
    ],
    [
      5,
      41
    ],
    [
      -26,
      14
    ],
    [
      -14,
      -10
    ],
    [
      -37,
      -3
    ],
    [
      -9,
      12
    ],
    [
      -61,
      -10
    ],
    [
      -11,
      -6
    ],
    [
      -54,
      27
    ],
    [
      21,
      37
    ],
    [
      -22,
      15
    ],
    [
      14,
      25
    ],
    [
      -7,
      10
    ],
    [
      15,
      28
    ],
    [
      23,
      0
    ],
    [
      39,
      15
    ],
    [
      39,
      29
    ],
    [
      -5,
      13
    ],
    [
      63,
      33
    ],
    [
      18,
      24
    ],
    [
      -10,
      24
    ],
    [
      79,
      8
    ],
    [
      42,
      12
    ],
    [
      90,
      -20
    ],
    [
      9,
      9
    ],
    [
      60,
      -1
    ],
    [
      -13,
      27
    ],
    [
      -47,
      14
    ],
    [
      -5,
      27
    ],
    [
      57,
      -6
    ],
    [
      60,
      -29
    ],
    [
      32,
      13
    ],
    [
      9,
      19
    ],
    [
      30,
      -6
    ],
    [
      58,
      34
    ],
    [
      35,
      -1
    ],
    [
      60,
      30
    ],
    [
      7,
      -17
    ],
    [
      36,
      0
    ],
    [
      28,
      -39
    ],
    [
      35,
      23
    ],
    [
      41,
      -7
    ],
    [
      44,
      32
    ],
    [
      27,
      -17
    ],
    [
      35,
      -40
    ],
    [
      11,
      -24
    ],
    [
      47,
      -15
    ],
    [
      45,
      -57
    ],
    [
      60,
      -29
    ],
    [
      50,
      -8
    ],
    [
      36,
      -29
    ],
    [
      28,
      -14
    ],
    [
      33,
      4
    ],
    [
      27,
      -17
    ],
    [
      17,
      -32
    ],
    [
      74,
      -25
    ],
    [
      10,
      -18
    ],
    [
      26,
      -10
    ],
    [
      -27,
      -32
    ],
    [
      28,
      -34
    ],
    [
      45,
      -22
    ],
    [
      33,
      -2
    ],
    [
      30,
      6
    ],
    [
      36,
      -26
    ],
    [
      46,
      1
    ],
    [
      27,
      -26
    ],
    [
      12,
      -39
    ],
    [
      -33,
      9
    ],
    [
      0,
      -23
    ],
    [
      25,
      -5
    ],
    [
      23,
      8
    ],
    [
      71,
      -4
    ],
    [
      35,
      11
    ],
    [
      27,
      -13
    ],
    [
      21,
      34
    ],
    [
      27,
      4
    ],
    [
      31,
      -15
    ],
    [
      22,
      37
    ],
    [
      24,
      5
    ],
    [
      1,
      18
    ],
    [
      40,
      5
    ],
    [
      11,
      16
    ],
    [
      34,
      -7
    ],
    [
      47,
      29
    ],
    [
      50,
      1
    ],
    [
      46,
      8
    ],
    [
      61,
      -14
    ],
    [
      21,
      11
    ],
    [
      4,
      25
    ],
    [
      17,
      13
    ],
    [
      50,
      1
    ],
    [
      13,
      -31
    ],
    [
      32,
      -4
    ],
    [
      78,
      -27
    ],
    [
      42,
      -6
    ],
    [
      45,
      18
    ],
    [
      39,
      -53
    ],
    [
      42,
      -11
    ],
    [
      20,
      -13
    ],
    [
      12,
      -43
    ],
    [
      -16,
      -28
    ],
    [
      -19,
      -53
    ],
    [
      -15,
      -20
    ],
    [
      -5,
      -59
    ],
    [
      -33,
      -53
    ],
    [
      -1,
      -37
    ],
    [
      -43,
      -11
    ],
    [
      -29,
      2
    ],
    [
      -30,
      -22
    ],
    [
      -5,
      -22
    ],
    [
      12,
      -23
    ],
    [
      -73,
      2
    ],
    [
      -24,
      -6
    ],
    [
      17,
      -20
    ],
    [
      9,
      -57
    ],
    [
      -31,
      -20
    ],
    [
      0,
      -14
    ],
    [
      -41,
      -34
    ],
    [
      -61,
      6
    ],
    [
      -39,
      -10
    ],
    [
      -23,
      10
    ],
    [
      -26,
      -9
    ],
    [
      -12,
      -16
    ],
    [
      40,
      -66
    ],
    [
      0,
      -23
    ],
    [
      24,
      -9
    ],
    [
      5,
      -21
    ],
    [
      -40,
      -1
    ],
    [
      -24,
      7
    ],
    [
      7,
      -35
    ],
    [
      -2,
      -31
    ],
    [
      20,
      -34
    ],
    [
      36,
      -12
    ],
    [
      49,
      2
    ],
    [
      73,
      -13
    ],
    [
      -5,
      -23
    ],
    [
      -21,
      -35
    ],
    [
      2,
      -37
    ],
    [
      27,
      -17
    ],
    [
      38,
      -45
    ],
    [
      18,
      -15
    ],
    [
      -61,
      -68
    ],
    [
      -37,
      20
    ],
    [
      -50,
      -36
    ],
    [
      -27,
      -33
    ],
    [
      -53,
      -5
    ],
    [
      -46,
      23
    ],
    [
      -17,
      45
    ],
    [
      6,
      14
    ],
    [
      -15,
      21
    ],
    [
      -30,
      -9
    ],
    [
      -15,
      -19
    ],
    [
      -28,
      4
    ],
    [
      -47,
      -27
    ]
  ],
  [
    [
      2820,
      1619
    ],
    [
      -6,
      30
    ],
    [
      -24,
      -7
    ],
    [
      -21,
      24
    ],
    [
      -19,
      -1
    ],
    [
      -12,
      21
    ],
    [
      -26,
      -4
    ],
    [
      -1,
      39
    ],
    [
      -45,
      -15
    ],
    [
      -34,
      5
    ],
    [
      -18,
      15
    ],
    [
      -10,
      29
    ],
    [
      -27,
      -4
    ],
    [
      -28,
      27
    ],
    [
      -20,
      2
    ],
    [
      -33,
      45
    ],
    [
      -18,
      2
    ],
    [
      -18,
      31
    ],
    [
      -3,
      32
    ],
    [
      -22,
      5
    ],
    [
      -12,
      18
    ],
    [
      -19,
      7
    ],
    [
      -5,
      17
    ],
    [
      -30,
      16
    ],
    [
      -23,
      -5
    ],
    [
      -15,
      18
    ],
    [
      1,
      23
    ],
    [
      -49,
      -10
    ]
  ],
  [
    [
      2283,
      1979
    ],
    [
      -19,
      45
    ],
    [
      -20,
      96
    ],
    [
      -12,
      34
    ],
    [
      -14,
      103
    ],
    [
      -20,
      77
    ],
    [
      -16,
      38
    ],
    [
      -18,
      13
    ],
    [
      -24,
      96
    ],
    [
      -11,
      10
    ],
    [
      -5,
      32
    ],
    [
      -41,
      70
    ],
    [
      -5,
      34
    ],
    [
      -21,
      3
    ],
    [
      -32,
      18
    ],
    [
      6,
      15
    ],
    [
      -13,
      21
    ]
  ],
  [
    [
      2028,
      2934
    ],
    [
      15,
      32
    ],
    [
      42,
      -3
    ],
    [
      21,
      8
    ],
    [
      12,
      27
    ],
    [
      -6,
      10
    ],
    [
      23,
      25
    ],
    [
      18,
      45
    ],
    [
      7,
      44
    ],
    [
      -55,
      23
    ],
    [
      -9,
      20
    ],
    [
      5,
      33
    ],
    [
      -21,
      22
    ],
    [
      75,
      36
    ],
    [
      20,
      1
    ],
    [
      7,
      -26
    ],
    [
      71,
      64
    ],
    [
      47,
      13
    ],
    [
      -1,
      23
    ],
    [
      31,
      30
    ],
    [
      31,
      -9
    ],
    [
      47,
      -26
    ],
    [
      18,
      11
    ],
    [
      1,
      26
    ],
    [
      20,
      0
    ],
    [
      43,
      11
    ],
    [
      8,
      -14
    ],
    [
      27,
      6
    ],
    [
      25,
      -4
    ],
    [
      9,
      11
    ],
    [
      1,
      43
    ],
    [
      -14,
      15
    ],
    [
      9,
      37
    ],
    [
      -18,
      10
    ],
    [
      10,
      58
    ],
    [
      61,
      -36
    ],
    [
      3,
      17
    ],
    [
      25,
      -5
    ],
    [
      13,
      -27
    ],
    [
      65,
      14
    ],
    [
      14,
      -8
    ],
    [
      23,
      7
    ],
    [
      16,
      -10
    ],
    [
      36,
      -7
    ],
    [
      -6,
      21
    ],
    [
      -11,
      73
    ],
    [
      29,
      3
    ],
    [
      24,
      21
    ],
    [
      13,
      30
    ],
    [
      28,
      -1
    ],
    [
      30,
      -17
    ],
    [
      55,
      64
    ],
    [
      21,
      13
    ],
    [
      1,
      31
    ],
    [
      12,
      2
    ],
    [
      1,
      48
    ],
    [
      35,
      -11
    ],
    [
      28,
      19
    ],
    [
      23,
      23
    ],
    [
      12,
      43
    ],
    [
      25,
      10
    ],
    [
      30,
      -14
    ],
    [
      3,
      -32
    ],
    [
      19,
      -13
    ],
    [
      29,
      10
    ]
  ],
  [
    [
      3049,
      506
    ],
    [
      -34,
      28
    ],
    [
      -37,
      41
    ],
    [
      -95,
      117
    ],
    [
      -21,
      12
    ],
    [
      -10,
      34
    ],
    [
      -55,
      118
    ],
    [
      -9,
      23
    ],
    [
      -16,
      82
    ],
    [
      -4,
      45
    ],
    [
      -12,
      53
    ],
    [
      -14,
      27
    ],
    [
      -12,
      46
    ],
    [
      -10,
      14
    ],
    [
      -12,
      44
    ],
    [
      -68,
      142
    ],
    [
      -24,
      104
    ],
    [
      -13,
      22
    ],
    [
      -20,
      59
    ],
    [
      -21,
      31
    ],
    [
      -19,
      8
    ],
    [
      -29,
      72
    ],
    [
      -3,
      4
    ],
    [
      -49,
      51
    ],
    [
      -18,
      11
    ],
    [
      -29,
      40
    ],
    [
      -16,
      1
    ],
    [
      -38,
      89
    ],
    [
      -37,
      66
    ],
    [
      -41,
      89
    ]
  ],
  [
    [
      2022,
      1467
    ],
    [
      -30,
      12
    ],
    [
      -16,
      21
    ],
    [
      9,
      15
    ],
    [
      33,
      -18
    ],
    [
      4,
      -30
    ]
  ],
  [
    [
      1250,
      1675
    ],
    [
      -22,
      0
    ],
    [
      -16,
      41
    ],
    [
      18,
      14
    ],
    [
      20,
      -55
    ]
  ],
  [
    [
      4269,
      4806
    ],
    [
      -22,
      -2
    ],
    [
      -25,
      22
    ],
    [
      -24,
      4
    ],
    [
      -27,
      39
    ],
    [
      -38,
      32
    ],
    [
      -24,
      5
    ],
    [
      -24,
      -8
    ],
    [
      -19,
      -18
    ],
    [
      -47,
      -1
    ],
    [
      -24,
      -7
    ],
    [
      -42,
      23
    ],
    [
      -54,
      -19
    ],
    [
      -24,
      15
    ],
    [
      -6,
      28
    ],
    [
      -32,
      0
    ],
    [
      -55,
      13
    ],
    [
      -6,
      -21
    ],
    [
      -24,
      3
    ],
    [
      -15,
      -16
    ],
    [
      -44,
      2
    ],
    [
      -21,
      -18
    ],
    [
      6,
      -25
    ],
    [
      -58,
      1
    ],
    [
      -13,
      -8
    ],
    [
      -35,
      4
    ],
    [
      -39,
      17
    ],
    [
      -24,
      -8
    ],
    [
      -5,
      32
    ],
    [
      -22,
      -8
    ],
    [
      -61,
      -6
    ],
    [
      -4,
      -20
    ],
    [
      -37,
      -20
    ],
    [
      -56,
      -20
    ],
    [
      -36,
      4
    ],
    [
      -43,
      -6
    ],
    [
      -38,
      9
    ],
    [
      -41,
      24
    ],
    [
      -5,
      23
    ],
    [
      28,
      4
    ],
    [
      21,
      -8
    ],
    [
      -3,
      46
    ],
    [
      -21,
      26
    ],
    [
      -75,
      4
    ],
    [
      -24,
      -22
    ],
    [
      -48,
      9
    ],
    [
      -60,
      -40
    ],
    [
      -34,
      -1
    ],
    [
      -11,
      -24
    ],
    [
      10,
      -11
    ],
    [
      -20,
      -27
    ],
    [
      -37,
      -26
    ],
    [
      12,
      -16
    ],
    [
      -13,
      -29
    ],
    [
      -45,
      2
    ],
    [
      -13,
      -28
    ],
    [
      -26,
      -12
    ],
    [
      -66,
      4
    ],
    [
      -9,
      56
    ],
    [
      -21,
      38
    ],
    [
      -15,
      -7
    ],
    [
      -29,
      13
    ],
    [
      -47,
      -3
    ],
    [
      -73,
      3
    ],
    [
      -25,
      -7
    ],
    [
      -27,
      7
    ],
    [
      -29,
      -3
    ],
    [
      -56,
      9
    ],
    [
      -39,
      19
    ],
    [
      -17,
      32
    ],
    [
      -67,
      22
    ],
    [
      -13,
      -7
    ],
    [
      -81,
      18
    ],
    [
      -26,
      19
    ],
    [
      -3,
      28
    ],
    [
      8,
      33
    ],
    [
      -48,
      37
    ],
    [
      -33,
      -28
    ],
    [
      -29,
      -3
    ],
    [
      -21,
      9
    ]
  ],
  [
    [
      1877,
      2958
    ],
    [
      -16,
      43
    ],
    [
      -14,
      17
    ],
    [
      -35,
      22
    ],
    [
      -4,
      40
    ],
    [
      -30,
      86
    ],
    [
      -25,
      60
    ],
    [
      13,
      27
    ],
    [
      -16,
      40
    ],
    [
      4,
      18
    ],
    [
      -12,
      32
    ],
    [
      4,
      27
    ],
    [
      -4,
      45
    ],
    [
      -21,
      54
    ],
    [
      7,
      14
    ],
    [
      -18,
      21
    ],
    [
      -2,
      41
    ],
    [
      -13,
      14
    ],
    [
      -10,
      47
    ],
    [
      8,
      9
    ],
    [
      -22,
      52
    ],
    [
      -14,
      20
    ],
    [
      -8,
      36
    ],
    [
      -14,
      27
    ],
    [
      2,
      23
    ],
    [
      -15,
      27
    ],
    [
      -14,
      59
    ],
    [
      6,
      39
    ],
    [
      -14,
      14
    ],
    [
      -5,
      24
    ],
    [
      4,
      37
    ],
    [
      -18,
      29
    ],
    [
      2,
      76
    ],
    [
      -11,
      8
    ],
    [
      -1,
      50
    ],
    [
      -9,
      25
    ],
    [
      -3,
      37
    ],
    [
      -13,
      22
    ],
    [
      4,
      22
    ],
    [
      -16,
      31
    ],
    [
      4,
      26
    ],
    [
      -14,
      15
    ],
    [
      30,
      23
    ],
    [
      -10,
      57
    ],
    [
      9,
      18
    ]
  ],
  [
    [
      9068,
      6166
    ],
    [
      -28,
      -57
    ],
    [
      1,
      -31
    ],
    [
      49,
      -19
    ],
    [
      -1,
      -37
    ],
    [
      -17,
      -41
    ],
    [
      -18,
      -17
    ],
    [
      -10,
      -42
    ],
    [
      -21,
      -2
    ],
    [
      -10,
      -32
    ],
    [
      -19,
      -14
    ],
    [
      -70,
      -134
    ],
    [
      -6,
      -41
    ],
    [
      -26,
      -38
    ],
    [
      -2,
      -25
    ],
    [
      -49,
      27
    ],
    [
      -42,
      7
    ],
    [
      -30,
      -7
    ],
    [
      -16,
      23
    ],
    [
      -50,
      2
    ],
    [
      -2,
      -12
    ],
    [
      -47,
      -1
    ],
    [
      -19,
      36
    ],
    [
      -27,
      -8
    ]
  ],
  [
    [
      8608,
      5703
    ],
    [
      -71,
      3
    ],
    [
      -49,
      22
    ],
    [
      13,
      29
    ],
    [
      4,
      33
    ],
    [
      -12,
      28
    ]
  ],
  [
    [
      8655,
      6117
    ],
    [
      10,
      -19
    ],
    [
      36,
      -17
    ],
    [
      27,
      43
    ],
    [
      32,
      31
    ],
    [
      19,
      45
    ],
    [
      44,
      -2
    ],
    [
      16,
      6
    ],
    [
      28,
      -14
    ],
    [
      33,
      -1
    ],
    [
      11,
      -11
    ],
    [
      28,
      -1
    ],
    [
      42,
      20
    ],
    [
      16,
      22
    ],
    [
      42,
      22
    ],
    [
      -14,
      -34
    ],
    [
      1,
      -24
    ],
    [
      42,
      -17
    ]
  ],
  [
    [
      8299,
      6026
    ],
    [
      -69,
      22
    ],
    [
      -53,
      29
    ],
    [
      -112,
      -4
    ],
    [
      -36,
      -16
    ],
    [
      -13,
      16
    ],
    [
      -38,
      -13
    ],
    [
      -27,
      13
    ],
    [
      -24,
      0
    ],
    [
      -27,
      11
    ],
    [
      -69,
      -5
    ],
    [
      -53,
      -10
    ],
    [
      -74,
      0
    ],
    [
      -62,
      2
    ],
    [
      -23,
      -8
    ],
    [
      -39,
      16
    ],
    [
      -75,
      11
    ],
    [
      -70,
      27
    ],
    [
      -13,
      -6
    ],
    [
      -19,
      27
    ],
    [
      14,
      35
    ]
  ],
  [
    [
      8608,
      5703
    ],
    [
      0,
      -24
    ],
    [
      21,
      -17
    ],
    [
      0,
      -35
    ],
    [
      11,
      -80
    ],
    [
      -8,
      -24
    ],
    [
      -10,
      -58
    ],
    [
      5,
      -36
    ],
    [
      -12,
      -48
    ],
    [
      -19,
      -23
    ],
    [
      -17,
      0
    ],
    [
      -16,
      16
    ],
    [
      -25,
      -3
    ],
    [
      10,
      -44
    ],
    [
      -22,
      -34
    ],
    [
      0,
      -36
    ],
    [
      16,
      -38
    ],
    [
      -10,
      -10
    ],
    [
      6,
      -27
    ],
    [
      19,
      -15
    ],
    [
      4,
      -49
    ],
    [
      -17,
      -10
    ],
    [
      4,
      -22
    ],
    [
      -38,
      7
    ],
    [
      -2,
      -21
    ],
    [
      -16,
      -28
    ],
    [
      -36,
      -14
    ],
    [
      -26,
      28
    ],
    [
      -38,
      19
    ],
    [
      -6,
      -37
    ],
    [
      -30,
      -10
    ],
    [
      3,
      38
    ],
    [
      -9,
      62
    ],
    [
      -9,
      34
    ],
    [
      -12,
      94
    ],
    [
      -22,
      38
    ],
    [
      1,
      19
    ],
    [
      -29,
      20
    ],
    [
      7,
      38
    ],
    [
      -13,
      61
    ],
    [
      12,
      9
    ],
    [
      -5,
      36
    ],
    [
      -15,
      31
    ],
    [
      -23,
      85
    ]
  ],
  [
    [
      9259,
      6570
    ],
    [
      -28,
      -22
    ],
    [
      -1,
      -13
    ],
    [
      -29,
      -37
    ],
    [
      23,
      -26
    ],
    [
      -3,
      -95
    ],
    [
      20,
      -6
    ],
    [
      -27,
      -38
    ],
    [
      -27,
      -16
    ],
    [
      -4,
      -16
    ],
    [
      12,
      -36
    ],
    [
      -40,
      -32
    ],
    [
      -5,
      -16
    ],
    [
      -29,
      -22
    ],
    [
      -8,
      -18
    ],
    [
      -45,
      -11
    ]
  ]
], zr = {
  scale: [
    0.0029221772689268836,
    0.0028752730004000387
  ],
  translate: [
    68.14340254000012,
    6.74555084800015
  ]
}, Ht = {
  type: Fr,
  objects: Wr,
  arcs: Hr,
  transform: zr
};
function de(n, e) {
  return n == null || e == null ? NaN : n < e ? -1 : n > e ? 1 : n >= e ? 0 : NaN;
}
function Yr(n, e) {
  return n == null || e == null ? NaN : e < n ? -1 : e > n ? 1 : e >= n ? 0 : NaN;
}
function N1(n) {
  let e, t, r;
  n.length !== 2 ? (e = de, t = (u, h) => de(n(u), h), r = (u, h) => n(u) - h) : (e = n === de || n === Yr ? n : Vr, t = n, r = n);
  function i(u, h, c = 0, l = u.length) {
    if (c < l) {
      if (e(h, h) !== 0)
        return l;
      do {
        const f = c + l >>> 1;
        t(u[f], h) < 0 ? c = f + 1 : l = f;
      } while (c < l);
    }
    return c;
  }
  function s(u, h, c = 0, l = u.length) {
    if (c < l) {
      if (e(h, h) !== 0)
        return l;
      do {
        const f = c + l >>> 1;
        t(u[f], h) <= 0 ? c = f + 1 : l = f;
      } while (c < l);
    }
    return c;
  }
  function a(u, h, c = 0, l = u.length) {
    const f = i(u, h, c, l - 1);
    return f > c && r(u[f - 1], h) > -r(u[f], h) ? f - 1 : f;
  }
  return { left: i, center: a, right: s };
}
function Vr() {
  return 0;
}
function qr(n) {
  return n === null ? NaN : +n;
}
const Br = N1(de), Ur = Br.right;
N1(qr).center;
const Gr = Ur;
class Mn {
  constructor() {
    this._partials = new Float64Array(32), this._n = 0;
  }
  add(e) {
    const t = this._partials;
    let r = 0;
    for (let i = 0; i < this._n && i < 32; i++) {
      const s = t[i], a = e + s, u = Math.abs(e) < Math.abs(s) ? e - (a - s) : s - (a - e);
      u && (t[r++] = u), e = a;
    }
    return t[r] = e, this._n = r + 1, this;
  }
  valueOf() {
    const e = this._partials;
    let t = this._n, r, i, s, a = 0;
    if (t > 0) {
      for (a = e[--t]; t > 0 && (r = a, i = e[--t], a = r + i, s = i - (a - r), !s); )
        ;
      t > 0 && (s < 0 && e[t - 1] < 0 || s > 0 && e[t - 1] > 0) && (i = s * 2, r = a + i, i == r - a && (a = r));
    }
    return a;
  }
}
const Jr = Math.sqrt(50), Kr = Math.sqrt(10), Xr = Math.sqrt(2);
function me(n, e, t) {
  const r = (e - n) / Math.max(0, t), i = Math.floor(Math.log10(r)), s = r / Math.pow(10, i), a = s >= Jr ? 10 : s >= Kr ? 5 : s >= Xr ? 2 : 1;
  let u, h, c;
  return i < 0 ? (c = Math.pow(10, -i) / a, u = Math.round(n * c), h = Math.round(e * c), u / c < n && ++u, h / c > e && --h, c = -c) : (c = Math.pow(10, i) * a, u = Math.round(n / c), h = Math.round(e / c), u * c < n && ++u, h * c > e && --h), h < u && 0.5 <= t && t < 2 ? me(n, e, t * 2) : [u, h, c];
}
function Zr(n, e, t) {
  if (e = +e, n = +n, t = +t, !(t > 0))
    return [];
  if (n === e)
    return [n];
  const r = e < n, [i, s, a] = r ? me(e, n, t) : me(n, e, t);
  if (!(s >= i))
    return [];
  const u = s - i + 1, h = new Array(u);
  if (r)
    if (a < 0)
      for (let c = 0; c < u; ++c)
        h[c] = (s - c) / -a;
    else
      for (let c = 0; c < u; ++c)
        h[c] = (s - c) * a;
  else if (a < 0)
    for (let c = 0; c < u; ++c)
      h[c] = (i + c) / -a;
  else
    for (let c = 0; c < u; ++c)
      h[c] = (i + c) * a;
  return h;
}
function Xe(n, e, t) {
  return e = +e, n = +n, t = +t, me(n, e, t)[2];
}
function Qr(n, e, t) {
  e = +e, n = +n, t = +t;
  const r = e < n, i = r ? Xe(e, n, t) : Xe(n, e, t);
  return (r ? -1 : 1) * (i < 0 ? 1 / -i : i);
}
function* n2(n) {
  for (const e of n)
    yield* e;
}
function C1(n) {
  return Array.from(n2(n));
}
function e2(n, e) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(n);
      break;
    default:
      this.range(e).domain(n);
      break;
  }
  return this;
}
function ee(n, e, t) {
  n.prototype = e.prototype = t, t.constructor = n;
}
function Oe(n, e) {
  var t = Object.create(n.prototype);
  for (var r in e)
    t[r] = e[r];
  return t;
}
function _n() {
}
var Jn = 0.7, ve = 1 / Jn, jn = "\\s*([+-]?\\d+)\\s*", Kn = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", dn = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", t2 = /^#([0-9a-f]{3,8})$/, r2 = new RegExp(`^rgb\\(${jn},${jn},${jn}\\)$`), i2 = new RegExp(`^rgb\\(${dn},${dn},${dn}\\)$`), a2 = new RegExp(`^rgba\\(${jn},${jn},${jn},${Kn}\\)$`), o2 = new RegExp(`^rgba\\(${dn},${dn},${dn},${Kn}\\)$`), u2 = new RegExp(`^hsl\\(${Kn},${dn},${dn}\\)$`), s2 = new RegExp(`^hsla\\(${Kn},${dn},${dn},${Kn}\\)$`), zt = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
ee(_n, Xn, {
  copy(n) {
    return Object.assign(new this.constructor(), this, n);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: Yt,
  // Deprecated! Use color.formatHex.
  formatHex: Yt,
  formatHex8: l2,
  formatHsl: f2,
  formatRgb: Vt,
  toString: Vt
});
function Yt() {
  return this.rgb().formatHex();
}
function l2() {
  return this.rgb().formatHex8();
}
function f2() {
  return $1(this).formatHsl();
}
function Vt() {
  return this.rgb().formatRgb();
}
function Xn(n) {
  var e, t;
  return n = (n + "").trim().toLowerCase(), (e = t2.exec(n)) ? (t = e[1].length, e = parseInt(e[1], 16), t === 6 ? qt(e) : t === 3 ? new Q(e >> 8 & 15 | e >> 4 & 240, e >> 4 & 15 | e & 240, (e & 15) << 4 | e & 15, 1) : t === 8 ? ue(e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, (e & 255) / 255) : t === 4 ? ue(e >> 12 & 15 | e >> 8 & 240, e >> 8 & 15 | e >> 4 & 240, e >> 4 & 15 | e & 240, ((e & 15) << 4 | e & 15) / 255) : null) : (e = r2.exec(n)) ? new Q(e[1], e[2], e[3], 1) : (e = i2.exec(n)) ? new Q(e[1] * 255 / 100, e[2] * 255 / 100, e[3] * 255 / 100, 1) : (e = a2.exec(n)) ? ue(e[1], e[2], e[3], e[4]) : (e = o2.exec(n)) ? ue(e[1] * 255 / 100, e[2] * 255 / 100, e[3] * 255 / 100, e[4]) : (e = u2.exec(n)) ? Gt(e[1], e[2] / 100, e[3] / 100, 1) : (e = s2.exec(n)) ? Gt(e[1], e[2] / 100, e[3] / 100, e[4]) : zt.hasOwnProperty(n) ? qt(zt[n]) : n === "transparent" ? new Q(NaN, NaN, NaN, 0) : null;
}
function qt(n) {
  return new Q(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function ue(n, e, t, r) {
  return r <= 0 && (n = e = t = NaN), new Q(n, e, t, r);
}
function D1(n) {
  return n instanceof _n || (n = Xn(n)), n ? (n = n.rgb(), new Q(n.r, n.g, n.b, n.opacity)) : new Q();
}
function Ze(n, e, t, r) {
  return arguments.length === 1 ? D1(n) : new Q(n, e, t, r ?? 1);
}
function Q(n, e, t, r) {
  this.r = +n, this.g = +e, this.b = +t, this.opacity = +r;
}
ee(Q, Ze, Oe(_n, {
  brighter(n) {
    return n = n == null ? ve : Math.pow(ve, n), new Q(this.r * n, this.g * n, this.b * n, this.opacity);
  },
  darker(n) {
    return n = n == null ? Jn : Math.pow(Jn, n), new Q(this.r * n, this.g * n, this.b * n, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Q(Sn(this.r), Sn(this.g), Sn(this.b), ye(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: Bt,
  // Deprecated! Use color.formatHex.
  formatHex: Bt,
  formatHex8: c2,
  formatRgb: Ut,
  toString: Ut
}));
function Bt() {
  return `#${En(this.r)}${En(this.g)}${En(this.b)}`;
}
function c2() {
  return `#${En(this.r)}${En(this.g)}${En(this.b)}${En((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function Ut() {
  const n = ye(this.opacity);
  return `${n === 1 ? "rgb(" : "rgba("}${Sn(this.r)}, ${Sn(this.g)}, ${Sn(this.b)}${n === 1 ? ")" : `, ${n})`}`;
}
function ye(n) {
  return isNaN(n) ? 1 : Math.max(0, Math.min(1, n));
}
function Sn(n) {
  return Math.max(0, Math.min(255, Math.round(n) || 0));
}
function En(n) {
  return n = Sn(n), (n < 16 ? "0" : "") + n.toString(16);
}
function Gt(n, e, t, r) {
  return r <= 0 ? n = e = t = NaN : t <= 0 || t >= 1 ? n = e = NaN : e <= 0 && (n = NaN), new ln(n, e, t, r);
}
function $1(n) {
  if (n instanceof ln)
    return new ln(n.h, n.s, n.l, n.opacity);
  if (n instanceof _n || (n = Xn(n)), !n)
    return new ln();
  if (n instanceof ln)
    return n;
  n = n.rgb();
  var e = n.r / 255, t = n.g / 255, r = n.b / 255, i = Math.min(e, t, r), s = Math.max(e, t, r), a = NaN, u = s - i, h = (s + i) / 2;
  return u ? (e === s ? a = (t - r) / u + (t < r) * 6 : t === s ? a = (r - e) / u + 2 : a = (e - t) / u + 4, u /= h < 0.5 ? s + i : 2 - s - i, a *= 60) : u = h > 0 && h < 1 ? 0 : a, new ln(a, u, h, n.opacity);
}
function p2(n, e, t, r) {
  return arguments.length === 1 ? $1(n) : new ln(n, e, t, r ?? 1);
}
function ln(n, e, t, r) {
  this.h = +n, this.s = +e, this.l = +t, this.opacity = +r;
}
ee(ln, p2, Oe(_n, {
  brighter(n) {
    return n = n == null ? ve : Math.pow(ve, n), new ln(this.h, this.s, this.l * n, this.opacity);
  },
  darker(n) {
    return n = n == null ? Jn : Math.pow(Jn, n), new ln(this.h, this.s, this.l * n, this.opacity);
  },
  rgb() {
    var n = this.h % 360 + (this.h < 0) * 360, e = isNaN(n) || isNaN(this.s) ? 0 : this.s, t = this.l, r = t + (t < 0.5 ? t : 1 - t) * e, i = 2 * t - r;
    return new Q(
      He(n >= 240 ? n - 240 : n + 120, i, r),
      He(n, i, r),
      He(n < 120 ? n + 240 : n - 120, i, r),
      this.opacity
    );
  },
  clamp() {
    return new ln(Jt(this.h), se(this.s), se(this.l), ye(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl() {
    const n = ye(this.opacity);
    return `${n === 1 ? "hsl(" : "hsla("}${Jt(this.h)}, ${se(this.s) * 100}%, ${se(this.l) * 100}%${n === 1 ? ")" : `, ${n})`}`;
  }
}));
function Jt(n) {
  return n = (n || 0) % 360, n < 0 ? n + 360 : n;
}
function se(n) {
  return Math.max(0, Math.min(1, n || 0));
}
function He(n, e, t) {
  return (n < 60 ? e + (t - e) * n / 60 : n < 180 ? t : n < 240 ? e + (t - e) * (240 - n) / 60 : e) * 255;
}
const h2 = Math.PI / 180, d2 = 180 / Math.PI, xe = 18, O1 = 0.96422, T1 = 1, A1 = 0.82521, k1 = 4 / 29, Ln = 6 / 29, j1 = 3 * Ln * Ln, g2 = Ln * Ln * Ln;
function L1(n) {
  if (n instanceof gn)
    return new gn(n.l, n.a, n.b, n.opacity);
  if (n instanceof vn)
    return I1(n);
  n instanceof Q || (n = D1(n));
  var e = qe(n.r), t = qe(n.g), r = qe(n.b), i = ze((0.2225045 * e + 0.7168786 * t + 0.0606169 * r) / T1), s, a;
  return e === t && t === r ? s = a = i : (s = ze((0.4360747 * e + 0.3850649 * t + 0.1430804 * r) / O1), a = ze((0.0139322 * e + 0.0971045 * t + 0.7141733 * r) / A1)), new gn(116 * i - 16, 500 * (s - i), 200 * (i - a), n.opacity);
}
function Qe(n, e, t, r) {
  return arguments.length === 1 ? L1(n) : new gn(n, e, t, r ?? 1);
}
function gn(n, e, t, r) {
  this.l = +n, this.a = +e, this.b = +t, this.opacity = +r;
}
ee(gn, Qe, Oe(_n, {
  brighter(n) {
    return new gn(this.l + xe * (n ?? 1), this.a, this.b, this.opacity);
  },
  darker(n) {
    return new gn(this.l - xe * (n ?? 1), this.a, this.b, this.opacity);
  },
  rgb() {
    var n = (this.l + 16) / 116, e = isNaN(this.a) ? n : n + this.a / 500, t = isNaN(this.b) ? n : n - this.b / 200;
    return e = O1 * Ye(e), n = T1 * Ye(n), t = A1 * Ye(t), new Q(
      Ve(3.1338561 * e - 1.6168667 * n - 0.4906146 * t),
      Ve(-0.9787684 * e + 1.9161415 * n + 0.033454 * t),
      Ve(0.0719453 * e - 0.2289914 * n + 1.4052427 * t),
      this.opacity
    );
  }
}));
function ze(n) {
  return n > g2 ? Math.pow(n, 1 / 3) : n / j1 + k1;
}
function Ye(n) {
  return n > Ln ? n * n * n : j1 * (n - k1);
}
function Ve(n) {
  return 255 * (n <= 31308e-7 ? 12.92 * n : 1.055 * Math.pow(n, 1 / 2.4) - 0.055);
}
function qe(n) {
  return (n /= 255) <= 0.04045 ? n / 12.92 : Math.pow((n + 0.055) / 1.055, 2.4);
}
function m2(n) {
  if (n instanceof vn)
    return new vn(n.h, n.c, n.l, n.opacity);
  if (n instanceof gn || (n = L1(n)), n.a === 0 && n.b === 0)
    return new vn(NaN, 0 < n.l && n.l < 100 ? 0 : NaN, n.l, n.opacity);
  var e = Math.atan2(n.b, n.a) * d2;
  return new vn(e < 0 ? e + 360 : e, Math.sqrt(n.a * n.a + n.b * n.b), n.l, n.opacity);
}
function v2(n, e, t, r) {
  return arguments.length === 1 ? m2(n) : new vn(n, e, t, r ?? 1);
}
function vn(n, e, t, r) {
  this.h = +n, this.c = +e, this.l = +t, this.opacity = +r;
}
function I1(n) {
  if (isNaN(n.h))
    return new gn(n.l, 0, 0, n.opacity);
  var e = n.h * h2;
  return new gn(n.l, Math.cos(e) * n.c, Math.sin(e) * n.c, n.opacity);
}
ee(vn, v2, Oe(_n, {
  brighter(n) {
    return new vn(this.h, this.c, this.l + xe * (n ?? 1), this.opacity);
  },
  darker(n) {
    return new vn(this.h, this.c, this.l - xe * (n ?? 1), this.opacity);
  },
  rgb() {
    return I1(this).rgb();
  }
}));
const vt = (n) => () => n;
function y2(n, e) {
  return function(t) {
    return n + t * e;
  };
}
function x2(n, e, t) {
  return n = Math.pow(n, t), e = Math.pow(e, t) - n, t = 1 / t, function(r) {
    return Math.pow(n + r * e, t);
  };
}
function w2(n) {
  return (n = +n) == 1 ? Tn : function(e, t) {
    return t - e ? x2(e, t, n) : vt(isNaN(e) ? t : e);
  };
}
function Tn(n, e) {
  var t = e - n;
  return t ? y2(n, t) : vt(isNaN(n) ? e : n);
}
const Kt = function n(e) {
  var t = w2(e);
  function r(i, s) {
    var a = t((i = Ze(i)).r, (s = Ze(s)).r), u = t(i.g, s.g), h = t(i.b, s.b), c = Tn(i.opacity, s.opacity);
    return function(l) {
      return i.r = a(l), i.g = u(l), i.b = h(l), i.opacity = c(l), i + "";
    };
  }
  return r.gamma = n, r;
}(1);
function b2(n, e) {
  e || (e = []);
  var t = n ? Math.min(e.length, n.length) : 0, r = e.slice(), i;
  return function(s) {
    for (i = 0; i < t; ++i)
      r[i] = n[i] * (1 - s) + e[i] * s;
    return r;
  };
}
function E2(n) {
  return ArrayBuffer.isView(n) && !(n instanceof DataView);
}
function S2(n, e) {
  var t = e ? e.length : 0, r = n ? Math.min(t, n.length) : 0, i = new Array(r), s = new Array(t), a;
  for (a = 0; a < r; ++a)
    i[a] = yt(n[a], e[a]);
  for (; a < t; ++a)
    s[a] = e[a];
  return function(u) {
    for (a = 0; a < r; ++a)
      s[a] = i[a](u);
    return s;
  };
}
function M2(n, e) {
  var t = new Date();
  return n = +n, e = +e, function(r) {
    return t.setTime(n * (1 - r) + e * r), t;
  };
}
function we(n, e) {
  return n = +n, e = +e, function(t) {
    return n * (1 - t) + e * t;
  };
}
function P2(n, e) {
  var t = {}, r = {}, i;
  (n === null || typeof n != "object") && (n = {}), (e === null || typeof e != "object") && (e = {});
  for (i in e)
    i in n ? t[i] = yt(n[i], e[i]) : r[i] = e[i];
  return function(s) {
    for (i in t)
      r[i] = t[i](s);
    return r;
  };
}
var nt = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, Be = new RegExp(nt.source, "g");
function R2(n) {
  return function() {
    return n;
  };
}
function _2(n) {
  return function(e) {
    return n(e) + "";
  };
}
function N2(n, e) {
  var t = nt.lastIndex = Be.lastIndex = 0, r, i, s, a = -1, u = [], h = [];
  for (n = n + "", e = e + ""; (r = nt.exec(n)) && (i = Be.exec(e)); )
    (s = i.index) > t && (s = e.slice(t, s), u[a] ? u[a] += s : u[++a] = s), (r = r[0]) === (i = i[0]) ? u[a] ? u[a] += i : u[++a] = i : (u[++a] = null, h.push({ i: a, x: we(r, i) })), t = Be.lastIndex;
  return t < e.length && (s = e.slice(t), u[a] ? u[a] += s : u[++a] = s), u.length < 2 ? h[0] ? _2(h[0].x) : R2(e) : (e = h.length, function(c) {
    for (var l = 0, f; l < e; ++l)
      u[(f = h[l]).i] = f.x(c);
    return u.join("");
  });
}
function yt(n, e) {
  var t = typeof e, r;
  return e == null || t === "boolean" ? vt(e) : (t === "number" ? we : t === "string" ? (r = Xn(e)) ? (e = r, Kt) : N2 : e instanceof Xn ? Kt : e instanceof Date ? M2 : E2(e) ? b2 : Array.isArray(e) ? S2 : typeof e.valueOf != "function" && typeof e.toString != "function" || isNaN(e) ? P2 : we)(n, e);
}
function C2(n, e) {
  return n = +n, e = +e, function(t) {
    return Math.round(n * (1 - t) + e * t);
  };
}
function F1(n, e) {
  var t = Tn((n = Qe(n)).l, (e = Qe(e)).l), r = Tn(n.a, e.a), i = Tn(n.b, e.b), s = Tn(n.opacity, e.opacity);
  return function(a) {
    return n.l = t(a), n.a = r(a), n.b = i(a), n.opacity = s(a), n + "";
  };
}
function D2(n) {
  return function() {
    return n;
  };
}
function $2(n) {
  return +n;
}
var Xt = [0, 1];
function An(n) {
  return n;
}
function et(n, e) {
  return (e -= n = +n) ? function(t) {
    return (t - n) / e;
  } : D2(isNaN(e) ? NaN : 0.5);
}
function O2(n, e) {
  var t;
  return n > e && (t = n, n = e, e = t), function(r) {
    return Math.max(n, Math.min(e, r));
  };
}
function T2(n, e, t) {
  var r = n[0], i = n[1], s = e[0], a = e[1];
  return i < r ? (r = et(i, r), s = t(a, s)) : (r = et(r, i), s = t(s, a)), function(u) {
    return s(r(u));
  };
}
function A2(n, e, t) {
  var r = Math.min(n.length, e.length) - 1, i = new Array(r), s = new Array(r), a = -1;
  for (n[r] < n[0] && (n = n.slice().reverse(), e = e.slice().reverse()); ++a < r; )
    i[a] = et(n[a], n[a + 1]), s[a] = t(e[a], e[a + 1]);
  return function(u) {
    var h = Gr(n, u, 1, r) - 1;
    return s[h](i[h](u));
  };
}
function k2(n, e) {
  return e.domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp()).unknown(n.unknown());
}
function j2() {
  var n = Xt, e = Xt, t = yt, r, i, s, a = An, u, h, c;
  function l() {
    var p = Math.min(n.length, e.length);
    return a !== An && (a = O2(n[0], n[p - 1])), u = p > 2 ? A2 : T2, h = c = null, f;
  }
  function f(p) {
    return p == null || isNaN(p = +p) ? s : (h || (h = u(n.map(r), e, t)))(r(a(p)));
  }
  return f.invert = function(p) {
    return a(i((c || (c = u(e, n.map(r), we)))(p)));
  }, f.domain = function(p) {
    return arguments.length ? (n = Array.from(p, $2), l()) : n.slice();
  }, f.range = function(p) {
    return arguments.length ? (e = Array.from(p), l()) : e.slice();
  }, f.rangeRound = function(p) {
    return e = Array.from(p), t = C2, l();
  }, f.clamp = function(p) {
    return arguments.length ? (a = p ? !0 : An, l()) : a !== An;
  }, f.interpolate = function(p) {
    return arguments.length ? (t = p, l()) : t;
  }, f.unknown = function(p) {
    return arguments.length ? (s = p, f) : s;
  }, function(p, d) {
    return r = p, i = d, l();
  };
}
function L2() {
  return j2()(An, An);
}
function I2(n) {
  return Math.abs(n = Math.round(n)) >= 1e21 ? n.toLocaleString("en").replace(/,/g, "") : n.toString(10);
}
function be(n, e) {
  if ((t = (n = e ? n.toExponential(e - 1) : n.toExponential()).indexOf("e")) < 0)
    return null;
  var t, r = n.slice(0, t);
  return [
    r.length > 1 ? r[0] + r.slice(2) : r,
    +n.slice(t + 1)
  ];
}
function In(n) {
  return n = be(Math.abs(n)), n ? n[1] : NaN;
}
function F2(n, e) {
  return function(t, r) {
    for (var i = t.length, s = [], a = 0, u = n[0], h = 0; i > 0 && u > 0 && (h + u + 1 > r && (u = Math.max(1, r - h)), s.push(t.substring(i -= u, i + u)), !((h += u + 1) > r)); )
      u = n[a = (a + 1) % n.length];
    return s.reverse().join(e);
  };
}
function W2(n) {
  return function(e) {
    return e.replace(/[0-9]/g, function(t) {
      return n[+t];
    });
  };
}
var H2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function Ee(n) {
  if (!(e = H2.exec(n)))
    throw new Error("invalid format: " + n);
  var e;
  return new xt({
    fill: e[1],
    align: e[2],
    sign: e[3],
    symbol: e[4],
    zero: e[5],
    width: e[6],
    comma: e[7],
    precision: e[8] && e[8].slice(1),
    trim: e[9],
    type: e[10]
  });
}
Ee.prototype = xt.prototype;
function xt(n) {
  this.fill = n.fill === void 0 ? " " : n.fill + "", this.align = n.align === void 0 ? ">" : n.align + "", this.sign = n.sign === void 0 ? "-" : n.sign + "", this.symbol = n.symbol === void 0 ? "" : n.symbol + "", this.zero = !!n.zero, this.width = n.width === void 0 ? void 0 : +n.width, this.comma = !!n.comma, this.precision = n.precision === void 0 ? void 0 : +n.precision, this.trim = !!n.trim, this.type = n.type === void 0 ? "" : n.type + "";
}
xt.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function z2(n) {
  n:
    for (var e = n.length, t = 1, r = -1, i; t < e; ++t)
      switch (n[t]) {
        case ".":
          r = i = t;
          break;
        case "0":
          r === 0 && (r = t), i = t;
          break;
        default:
          if (!+n[t])
            break n;
          r > 0 && (r = 0);
          break;
      }
  return r > 0 ? n.slice(0, r) + n.slice(i + 1) : n;
}
var W1;
function Y2(n, e) {
  var t = be(n, e);
  if (!t)
    return n + "";
  var r = t[0], i = t[1], s = i - (W1 = Math.max(-8, Math.min(8, Math.floor(i / 3))) * 3) + 1, a = r.length;
  return s === a ? r : s > a ? r + new Array(s - a + 1).join("0") : s > 0 ? r.slice(0, s) + "." + r.slice(s) : "0." + new Array(1 - s).join("0") + be(n, Math.max(0, e + s - 1))[0];
}
function Zt(n, e) {
  var t = be(n, e);
  if (!t)
    return n + "";
  var r = t[0], i = t[1];
  return i < 0 ? "0." + new Array(-i).join("0") + r : r.length > i + 1 ? r.slice(0, i + 1) + "." + r.slice(i + 1) : r + new Array(i - r.length + 2).join("0");
}
const Qt = {
  "%": (n, e) => (n * 100).toFixed(e),
  b: (n) => Math.round(n).toString(2),
  c: (n) => n + "",
  d: I2,
  e: (n, e) => n.toExponential(e),
  f: (n, e) => n.toFixed(e),
  g: (n, e) => n.toPrecision(e),
  o: (n) => Math.round(n).toString(8),
  p: (n, e) => Zt(n * 100, e),
  r: Zt,
  s: Y2,
  X: (n) => Math.round(n).toString(16).toUpperCase(),
  x: (n) => Math.round(n).toString(16)
};
function n1(n) {
  return n;
}
var e1 = Array.prototype.map, t1 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function V2(n) {
  var e = n.grouping === void 0 || n.thousands === void 0 ? n1 : F2(e1.call(n.grouping, Number), n.thousands + ""), t = n.currency === void 0 ? "" : n.currency[0] + "", r = n.currency === void 0 ? "" : n.currency[1] + "", i = n.decimal === void 0 ? "." : n.decimal + "", s = n.numerals === void 0 ? n1 : W2(e1.call(n.numerals, String)), a = n.percent === void 0 ? "%" : n.percent + "", u = n.minus === void 0 ? "−" : n.minus + "", h = n.nan === void 0 ? "NaN" : n.nan + "";
  function c(f) {
    f = Ee(f);
    var p = f.fill, d = f.align, m = f.sign, M = f.symbol, b = f.zero, P = f.width, w = f.comma, R = f.precision, E = f.trim, S = f.type;
    S === "n" ? (w = !0, S = "g") : Qt[S] || (R === void 0 && (R = 12), E = !0, S = "g"), (b || p === "0" && d === "=") && (b = !0, p = "0", d = "=");
    var $ = M === "$" ? t : M === "#" && /[boxX]/.test(S) ? "0" + S.toLowerCase() : "", L = M === "$" ? r : /[%p]/.test(S) ? a : "", O = Qt[S], T = /[defgprs%]/.test(S);
    R = R === void 0 ? 6 : /[gprs]/.test(S) ? Math.max(1, Math.min(21, R)) : Math.max(0, Math.min(20, R));
    function W(y) {
      var V = $, N = L, D, g, C;
      if (S === "c")
        N = O(y) + N, y = "";
      else {
        y = +y;
        var z = y < 0 || 1 / y < 0;
        if (y = isNaN(y) ? h : O(Math.abs(y), R), E && (y = z2(y)), z && +y == 0 && m !== "+" && (z = !1), V = (z ? m === "(" ? m : u : m === "-" || m === "(" ? "" : m) + V, N = (S === "s" ? t1[8 + W1 / 3] : "") + N + (z && m === "(" ? ")" : ""), T) {
          for (D = -1, g = y.length; ++D < g; )
            if (C = y.charCodeAt(D), 48 > C || C > 57) {
              N = (C === 46 ? i + y.slice(D + 1) : y.slice(D)) + N, y = y.slice(0, D);
              break;
            }
        }
      }
      w && !b && (y = e(y, 1 / 0));
      var U = V.length + y.length + N.length, q = U < P ? new Array(P - U + 1).join(p) : "";
      switch (w && b && (y = e(q + y, q.length ? P - N.length : 1 / 0), q = ""), d) {
        case "<":
          y = V + y + N + q;
          break;
        case "=":
          y = V + q + y + N;
          break;
        case "^":
          y = q.slice(0, U = q.length >> 1) + V + y + N + q.slice(U);
          break;
        default:
          y = q + V + y + N;
          break;
      }
      return s(y);
    }
    return W.toString = function() {
      return f + "";
    }, W;
  }
  function l(f, p) {
    var d = c((f = Ee(f), f.type = "f", f)), m = Math.max(-8, Math.min(8, Math.floor(In(p) / 3))) * 3, M = Math.pow(10, -m), b = t1[8 + m / 3];
    return function(P) {
      return d(M * P) + b;
    };
  }
  return {
    format: c,
    formatPrefix: l
  };
}
var le, H1, z1;
q2({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function q2(n) {
  return le = V2(n), H1 = le.format, z1 = le.formatPrefix, le;
}
function B2(n) {
  return Math.max(0, -In(Math.abs(n)));
}
function U2(n, e) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(In(e) / 3))) * 3 - In(Math.abs(n)));
}
function G2(n, e) {
  return n = Math.abs(n), e = Math.abs(e) - n, Math.max(0, In(e) - In(n)) + 1;
}
function J2(n, e, t, r) {
  var i = Qr(n, e, t), s;
  switch (r = Ee(r ?? ",f"), r.type) {
    case "s": {
      var a = Math.max(Math.abs(n), Math.abs(e));
      return r.precision == null && !isNaN(s = U2(i, a)) && (r.precision = s), z1(r, a);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      r.precision == null && !isNaN(s = G2(i, Math.max(Math.abs(n), Math.abs(e)))) && (r.precision = s - (r.type === "e"));
      break;
    }
    case "f":
    case "%": {
      r.precision == null && !isNaN(s = B2(i)) && (r.precision = s - (r.type === "%") * 2);
      break;
    }
  }
  return H1(r);
}
function K2(n) {
  var e = n.domain;
  return n.ticks = function(t) {
    var r = e();
    return Zr(r[0], r[r.length - 1], t ?? 10);
  }, n.tickFormat = function(t, r) {
    var i = e();
    return J2(i[0], i[i.length - 1], t ?? 10, r);
  }, n.nice = function(t) {
    t == null && (t = 10);
    var r = e(), i = 0, s = r.length - 1, a = r[i], u = r[s], h, c, l = 10;
    for (u < a && (c = a, a = u, u = c, c = i, i = s, s = c); l-- > 0; ) {
      if (c = Xe(a, u, t), c === h)
        return r[i] = a, r[s] = u, e(r);
      if (c > 0)
        a = Math.floor(a / c) * c, u = Math.ceil(u / c) * c;
      else if (c < 0)
        a = Math.ceil(a * c) / c, u = Math.floor(u * c) / c;
      else
        break;
      h = c;
    }
    return n;
  }, n;
}
function wt() {
  var n = L2();
  return n.copy = function() {
    return k2(n, wt());
  }, e2.apply(n, arguments), K2(n);
}
const r1 = (n) => /* @__PURE__ */ F.jsx("g", { children: /* @__PURE__ */ F.jsx("text", { className: n.className, x: n.coords.x, y: n.coords.y, children: n.text }) });
var Y = 1e-6, X2 = 1e-12, j = Math.PI, en = j / 2, i1 = j / 4, rn = j * 2, tn = 180 / j, Z = j / 180, B = Math.abs, Y1 = Math.atan, Zn = Math.atan2, J = Math.cos, Z2 = Math.exp, Q2 = Math.log, K = Math.sin, ni = Math.sign || function(n) {
  return n > 0 ? 1 : n < 0 ? -1 : 0;
}, Nn = Math.sqrt, ei = Math.tan;
function ti(n) {
  return n > 1 ? 0 : n < -1 ? j : Math.acos(n);
}
function Qn(n) {
  return n > 1 ? en : n < -1 ? -en : Math.asin(n);
}
function sn() {
}
function Se(n, e) {
  n && o1.hasOwnProperty(n.type) && o1[n.type](n, e);
}
var a1 = {
  Feature: function(n, e) {
    Se(n.geometry, e);
  },
  FeatureCollection: function(n, e) {
    for (var t = n.features, r = -1, i = t.length; ++r < i; )
      Se(t[r].geometry, e);
  }
}, o1 = {
  Sphere: function(n, e) {
    e.sphere();
  },
  Point: function(n, e) {
    n = n.coordinates, e.point(n[0], n[1], n[2]);
  },
  MultiPoint: function(n, e) {
    for (var t = n.coordinates, r = -1, i = t.length; ++r < i; )
      n = t[r], e.point(n[0], n[1], n[2]);
  },
  LineString: function(n, e) {
    tt(n.coordinates, e, 0);
  },
  MultiLineString: function(n, e) {
    for (var t = n.coordinates, r = -1, i = t.length; ++r < i; )
      tt(t[r], e, 0);
  },
  Polygon: function(n, e) {
    u1(n.coordinates, e);
  },
  MultiPolygon: function(n, e) {
    for (var t = n.coordinates, r = -1, i = t.length; ++r < i; )
      u1(t[r], e);
  },
  GeometryCollection: function(n, e) {
    for (var t = n.geometries, r = -1, i = t.length; ++r < i; )
      Se(t[r], e);
  }
};
function tt(n, e, t) {
  var r = -1, i = n.length - t, s;
  for (e.lineStart(); ++r < i; )
    s = n[r], e.point(s[0], s[1], s[2]);
  e.lineEnd();
}
function u1(n, e) {
  var t = -1, r = n.length;
  for (e.polygonStart(); ++t < r; )
    tt(n[t], e, 1);
  e.polygonEnd();
}
function On(n, e) {
  n && a1.hasOwnProperty(n.type) ? a1[n.type](n, e) : Se(n, e);
}
function rt(n) {
  return [Zn(n[1], n[0]), Qn(n[2])];
}
function Fn(n) {
  var e = n[0], t = n[1], r = J(t);
  return [r * J(e), r * K(e), K(t)];
}
function fe(n, e) {
  return n[0] * e[0] + n[1] * e[1] + n[2] * e[2];
}
function Me(n, e) {
  return [n[1] * e[2] - n[2] * e[1], n[2] * e[0] - n[0] * e[2], n[0] * e[1] - n[1] * e[0]];
}
function Ue(n, e) {
  n[0] += e[0], n[1] += e[1], n[2] += e[2];
}
function ce(n, e) {
  return [n[0] * e, n[1] * e, n[2] * e];
}
function it(n) {
  var e = Nn(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);
  n[0] /= e, n[1] /= e, n[2] /= e;
}
function at(n, e) {
  function t(r, i) {
    return r = n(r, i), e(r[0], r[1]);
  }
  return n.invert && e.invert && (t.invert = function(r, i) {
    return r = e.invert(r, i), r && n.invert(r[0], r[1]);
  }), t;
}
function ot(n, e) {
  return B(n) > j && (n -= Math.round(n / rn) * rn), [n, e];
}
ot.invert = ot;
function V1(n, e, t) {
  return (n %= rn) ? e || t ? at(l1(n), f1(e, t)) : l1(n) : e || t ? f1(e, t) : ot;
}
function s1(n) {
  return function(e, t) {
    return e += n, B(e) > j && (e -= Math.round(e / rn) * rn), [e, t];
  };
}
function l1(n) {
  var e = s1(n);
  return e.invert = s1(-n), e;
}
function f1(n, e) {
  var t = J(n), r = K(n), i = J(e), s = K(e);
  function a(u, h) {
    var c = J(h), l = J(u) * c, f = K(u) * c, p = K(h), d = p * t + l * r;
    return [
      Zn(f * i - d * s, l * t - p * r),
      Qn(d * i + f * s)
    ];
  }
  return a.invert = function(u, h) {
    var c = J(h), l = J(u) * c, f = K(u) * c, p = K(h), d = p * i - f * s;
    return [
      Zn(f * i + p * s, l * t + d * r),
      Qn(d * t - l * r)
    ];
  }, a;
}
function ri(n) {
  n = V1(n[0] * Z, n[1] * Z, n.length > 2 ? n[2] * Z : 0);
  function e(t) {
    return t = n(t[0] * Z, t[1] * Z), t[0] *= tn, t[1] *= tn, t;
  }
  return e.invert = function(t) {
    return t = n.invert(t[0] * Z, t[1] * Z), t[0] *= tn, t[1] *= tn, t;
  }, e;
}
function ii(n, e, t, r, i, s) {
  if (t) {
    var a = J(e), u = K(e), h = r * t;
    i == null ? (i = e + r * rn, s = e - h / 2) : (i = c1(a, i), s = c1(a, s), (r > 0 ? i < s : i > s) && (i += r * rn));
    for (var c, l = i; r > 0 ? l > s : l < s; l -= h)
      c = rt([a, -u * J(l), -u * K(l)]), n.point(c[0], c[1]);
  }
}
function c1(n, e) {
  e = Fn(e), e[0] -= n, it(e);
  var t = ti(-e[1]);
  return ((-e[2] < 0 ? -t : t) + rn - Y) % rn;
}
function q1() {
  var n = [], e;
  return {
    point: function(t, r, i) {
      e.push([t, r, i]);
    },
    lineStart: function() {
      n.push(e = []);
    },
    lineEnd: sn,
    rejoin: function() {
      n.length > 1 && n.push(n.pop().concat(n.shift()));
    },
    result: function() {
      var t = n;
      return n = [], e = null, t;
    }
  };
}
function ge(n, e) {
  return B(n[0] - e[0]) < Y && B(n[1] - e[1]) < Y;
}
function pe(n, e, t, r) {
  this.x = n, this.z = e, this.o = t, this.e = r, this.v = !1, this.n = this.p = null;
}
function B1(n, e, t, r, i) {
  var s = [], a = [], u, h;
  if (n.forEach(function(m) {
    if (!((M = m.length - 1) <= 0)) {
      var M, b = m[0], P = m[M], w;
      if (ge(b, P)) {
        if (!b[2] && !P[2]) {
          for (i.lineStart(), u = 0; u < M; ++u)
            i.point((b = m[u])[0], b[1]);
          i.lineEnd();
          return;
        }
        P[0] += 2 * Y;
      }
      s.push(w = new pe(b, m, null, !0)), a.push(w.o = new pe(b, null, w, !1)), s.push(w = new pe(P, m, null, !1)), a.push(w.o = new pe(P, null, w, !0));
    }
  }), !!s.length) {
    for (a.sort(e), p1(s), p1(a), u = 0, h = a.length; u < h; ++u)
      a[u].e = t = !t;
    for (var c = s[0], l, f; ; ) {
      for (var p = c, d = !0; p.v; )
        if ((p = p.n) === c)
          return;
      l = p.z, i.lineStart();
      do {
        if (p.v = p.o.v = !0, p.e) {
          if (d)
            for (u = 0, h = l.length; u < h; ++u)
              i.point((f = l[u])[0], f[1]);
          else
            r(p.x, p.n.x, 1, i);
          p = p.n;
        } else {
          if (d)
            for (l = p.p.z, u = l.length - 1; u >= 0; --u)
              i.point((f = l[u])[0], f[1]);
          else
            r(p.x, p.p.x, -1, i);
          p = p.p;
        }
        p = p.o, l = p.z, d = !d;
      } while (!p.v);
      i.lineEnd();
    }
  }
}
function p1(n) {
  if (e = n.length) {
    for (var e, t = 0, r = n[0], i; ++t < e; )
      r.n = i = n[t], i.p = r, r = i;
    r.n = i = n[0], i.p = r;
  }
}
function Ge(n) {
  return B(n[0]) <= j ? n[0] : ni(n[0]) * ((B(n[0]) + j) % rn - j);
}
function ai(n, e) {
  var t = Ge(e), r = e[1], i = K(r), s = [K(t), -J(t), 0], a = 0, u = 0, h = new Mn();
  i === 1 ? r = en + Y : i === -1 && (r = -en - Y);
  for (var c = 0, l = n.length; c < l; ++c)
    if (p = (f = n[c]).length)
      for (var f, p, d = f[p - 1], m = Ge(d), M = d[1] / 2 + i1, b = K(M), P = J(M), w = 0; w < p; ++w, m = E, b = $, P = L, d = R) {
        var R = f[w], E = Ge(R), S = R[1] / 2 + i1, $ = K(S), L = J(S), O = E - m, T = O >= 0 ? 1 : -1, W = T * O, y = W > j, V = b * $;
        if (h.add(Zn(V * T * K(W), P * L + V * J(W))), a += y ? O + T * rn : O, y ^ m >= t ^ E >= t) {
          var N = Me(Fn(d), Fn(R));
          it(N);
          var D = Me(s, N);
          it(D);
          var g = (y ^ O >= 0 ? -1 : 1) * Qn(D[2]);
          (r > g || r === g && (N[0] || N[1])) && (u += y ^ O >= 0 ? 1 : -1);
        }
      }
  return (a < -Y || a < Y && h < -X2) ^ u & 1;
}
function U1(n, e, t, r) {
  return function(i) {
    var s = e(i), a = q1(), u = e(a), h = !1, c, l, f, p = {
      point: d,
      lineStart: M,
      lineEnd: b,
      polygonStart: function() {
        p.point = P, p.lineStart = w, p.lineEnd = R, l = [], c = [];
      },
      polygonEnd: function() {
        p.point = d, p.lineStart = M, p.lineEnd = b, l = C1(l);
        var E = ai(c, r);
        l.length ? (h || (i.polygonStart(), h = !0), B1(l, ui, E, t, i)) : E && (h || (i.polygonStart(), h = !0), i.lineStart(), t(null, null, 1, i), i.lineEnd()), h && (i.polygonEnd(), h = !1), l = c = null;
      },
      sphere: function() {
        i.polygonStart(), i.lineStart(), t(null, null, 1, i), i.lineEnd(), i.polygonEnd();
      }
    };
    function d(E, S) {
      n(E, S) && i.point(E, S);
    }
    function m(E, S) {
      s.point(E, S);
    }
    function M() {
      p.point = m, s.lineStart();
    }
    function b() {
      p.point = d, s.lineEnd();
    }
    function P(E, S) {
      f.push([E, S]), u.point(E, S);
    }
    function w() {
      u.lineStart(), f = [];
    }
    function R() {
      P(f[0][0], f[0][1]), u.lineEnd();
      var E = u.clean(), S = a.result(), $, L = S.length, O, T, W;
      if (f.pop(), c.push(f), f = null, !!L) {
        if (E & 1) {
          if (T = S[0], (O = T.length - 1) > 0) {
            for (h || (i.polygonStart(), h = !0), i.lineStart(), $ = 0; $ < O; ++$)
              i.point((W = T[$])[0], W[1]);
            i.lineEnd();
          }
          return;
        }
        L > 1 && E & 2 && S.push(S.pop().concat(S.shift())), l.push(S.filter(oi));
      }
    }
    return p;
  };
}
function oi(n) {
  return n.length > 1;
}
function ui(n, e) {
  return ((n = n.x)[0] < 0 ? n[1] - en - Y : en - n[1]) - ((e = e.x)[0] < 0 ? e[1] - en - Y : en - e[1]);
}
const h1 = U1(
  function() {
    return !0;
  },
  si,
  fi,
  [-j, -en]
);
function si(n) {
  var e = NaN, t = NaN, r = NaN, i;
  return {
    lineStart: function() {
      n.lineStart(), i = 1;
    },
    point: function(s, a) {
      var u = s > 0 ? j : -j, h = B(s - e);
      B(h - j) < Y ? (n.point(e, t = (t + a) / 2 > 0 ? en : -en), n.point(r, t), n.lineEnd(), n.lineStart(), n.point(u, t), n.point(s, t), i = 0) : r !== u && h >= j && (B(e - r) < Y && (e -= r * Y), B(s - u) < Y && (s -= u * Y), t = li(e, t, s, a), n.point(r, t), n.lineEnd(), n.lineStart(), n.point(u, t), i = 0), n.point(e = s, t = a), r = u;
    },
    lineEnd: function() {
      n.lineEnd(), e = t = NaN;
    },
    clean: function() {
      return 2 - i;
    }
  };
}
function li(n, e, t, r) {
  var i, s, a = K(n - t);
  return B(a) > Y ? Y1((K(e) * (s = J(r)) * K(t) - K(r) * (i = J(e)) * K(n)) / (i * s * a)) : (e + r) / 2;
}
function fi(n, e, t, r) {
  var i;
  if (n == null)
    i = t * en, r.point(-j, i), r.point(0, i), r.point(j, i), r.point(j, 0), r.point(j, -i), r.point(0, -i), r.point(-j, -i), r.point(-j, 0), r.point(-j, i);
  else if (B(n[0] - e[0]) > Y) {
    var s = n[0] < e[0] ? j : -j;
    i = t * s / 2, r.point(-s, i), r.point(0, i), r.point(s, i);
  } else
    r.point(e[0], e[1]);
}
function ci(n) {
  var e = J(n), t = 6 * Z, r = e > 0, i = B(e) > Y;
  function s(l, f, p, d) {
    ii(d, n, t, p, l, f);
  }
  function a(l, f) {
    return J(l) * J(f) > e;
  }
  function u(l) {
    var f, p, d, m, M;
    return {
      lineStart: function() {
        m = d = !1, M = 1;
      },
      point: function(b, P) {
        var w = [b, P], R, E = a(b, P), S = r ? E ? 0 : c(b, P) : E ? c(b + (b < 0 ? j : -j), P) : 0;
        if (!f && (m = d = E) && l.lineStart(), E !== d && (R = h(f, w), (!R || ge(f, R) || ge(w, R)) && (w[2] = 1)), E !== d)
          M = 0, E ? (l.lineStart(), R = h(w, f), l.point(R[0], R[1])) : (R = h(f, w), l.point(R[0], R[1], 2), l.lineEnd()), f = R;
        else if (i && f && r ^ E) {
          var $;
          !(S & p) && ($ = h(w, f, !0)) && (M = 0, r ? (l.lineStart(), l.point($[0][0], $[0][1]), l.point($[1][0], $[1][1]), l.lineEnd()) : (l.point($[1][0], $[1][1]), l.lineEnd(), l.lineStart(), l.point($[0][0], $[0][1], 3)));
        }
        E && (!f || !ge(f, w)) && l.point(w[0], w[1]), f = w, d = E, p = S;
      },
      lineEnd: function() {
        d && l.lineEnd(), f = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return M | (m && d) << 1;
      }
    };
  }
  function h(l, f, p) {
    var d = Fn(l), m = Fn(f), M = [1, 0, 0], b = Me(d, m), P = fe(b, b), w = b[0], R = P - w * w;
    if (!R)
      return !p && l;
    var E = e * P / R, S = -e * w / R, $ = Me(M, b), L = ce(M, E), O = ce(b, S);
    Ue(L, O);
    var T = $, W = fe(L, T), y = fe(T, T), V = W * W - y * (fe(L, L) - 1);
    if (!(V < 0)) {
      var N = Nn(V), D = ce(T, (-W - N) / y);
      if (Ue(D, L), D = rt(D), !p)
        return D;
      var g = l[0], C = f[0], z = l[1], U = f[1], q;
      C < g && (q = g, g = C, C = q);
      var yn = C - g, an = B(yn - j) < Y, cn = an || yn < Y;
      if (!an && U < z && (q = z, z = U, U = q), cn ? an ? z + U > 0 ^ D[1] < (B(D[0] - g) < Y ? z : U) : z <= D[1] && D[1] <= U : yn > j ^ (g <= D[0] && D[0] <= C)) {
        var on = ce(T, (-W + N) / y);
        return Ue(on, L), [D, rt(on)];
      }
    }
  }
  function c(l, f) {
    var p = r ? n : j - n, d = 0;
    return l < -p ? d |= 1 : l > p && (d |= 2), f < -p ? d |= 4 : f > p && (d |= 8), d;
  }
  return U1(a, u, s, r ? [0, -n] : [-j, n - j]);
}
function pi(n, e, t, r, i, s) {
  var a = n[0], u = n[1], h = e[0], c = e[1], l = 0, f = 1, p = h - a, d = c - u, m;
  if (m = t - a, !(!p && m > 0)) {
    if (m /= p, p < 0) {
      if (m < l)
        return;
      m < f && (f = m);
    } else if (p > 0) {
      if (m > f)
        return;
      m > l && (l = m);
    }
    if (m = i - a, !(!p && m < 0)) {
      if (m /= p, p < 0) {
        if (m > f)
          return;
        m > l && (l = m);
      } else if (p > 0) {
        if (m < l)
          return;
        m < f && (f = m);
      }
      if (m = r - u, !(!d && m > 0)) {
        if (m /= d, d < 0) {
          if (m < l)
            return;
          m < f && (f = m);
        } else if (d > 0) {
          if (m > f)
            return;
          m > l && (l = m);
        }
        if (m = s - u, !(!d && m < 0)) {
          if (m /= d, d < 0) {
            if (m > f)
              return;
            m > l && (l = m);
          } else if (d > 0) {
            if (m < l)
              return;
            m < f && (f = m);
          }
          return l > 0 && (n[0] = a + l * p, n[1] = u + l * d), f < 1 && (e[0] = a + f * p, e[1] = u + f * d), !0;
        }
      }
    }
  }
}
var Vn = 1e9, he = -Vn;
function hi(n, e, t, r) {
  function i(c, l) {
    return n <= c && c <= t && e <= l && l <= r;
  }
  function s(c, l, f, p) {
    var d = 0, m = 0;
    if (c == null || (d = a(c, f)) !== (m = a(l, f)) || h(c, l) < 0 ^ f > 0)
      do
        p.point(d === 0 || d === 3 ? n : t, d > 1 ? r : e);
      while ((d = (d + f + 4) % 4) !== m);
    else
      p.point(l[0], l[1]);
  }
  function a(c, l) {
    return B(c[0] - n) < Y ? l > 0 ? 0 : 3 : B(c[0] - t) < Y ? l > 0 ? 2 : 1 : B(c[1] - e) < Y ? l > 0 ? 1 : 0 : l > 0 ? 3 : 2;
  }
  function u(c, l) {
    return h(c.x, l.x);
  }
  function h(c, l) {
    var f = a(c, 1), p = a(l, 1);
    return f !== p ? f - p : f === 0 ? l[1] - c[1] : f === 1 ? c[0] - l[0] : f === 2 ? c[1] - l[1] : l[0] - c[0];
  }
  return function(c) {
    var l = c, f = q1(), p, d, m, M, b, P, w, R, E, S, $, L = {
      point: O,
      lineStart: V,
      lineEnd: N,
      polygonStart: W,
      polygonEnd: y
    };
    function O(g, C) {
      i(g, C) && l.point(g, C);
    }
    function T() {
      for (var g = 0, C = 0, z = d.length; C < z; ++C)
        for (var U = d[C], q = 1, yn = U.length, an = U[0], cn, on, Cn = an[0], xn = an[1]; q < yn; ++q)
          cn = Cn, on = xn, an = U[q], Cn = an[0], xn = an[1], on <= r ? xn > r && (Cn - cn) * (r - on) > (xn - on) * (n - cn) && ++g : xn <= r && (Cn - cn) * (r - on) < (xn - on) * (n - cn) && --g;
      return g;
    }
    function W() {
      l = f, p = [], d = [], $ = !0;
    }
    function y() {
      var g = T(), C = $ && g, z = (p = C1(p)).length;
      (C || z) && (c.polygonStart(), C && (c.lineStart(), s(null, null, 1, c), c.lineEnd()), z && B1(p, u, g, s, c), c.polygonEnd()), l = c, p = d = m = null;
    }
    function V() {
      L.point = D, d && d.push(m = []), S = !0, E = !1, w = R = NaN;
    }
    function N() {
      p && (D(M, b), P && E && f.rejoin(), p.push(f.result())), L.point = O, E && l.lineEnd();
    }
    function D(g, C) {
      var z = i(g, C);
      if (d && m.push([g, C]), S)
        M = g, b = C, P = z, S = !1, z && (l.lineStart(), l.point(g, C));
      else if (z && E)
        l.point(g, C);
      else {
        var U = [w = Math.max(he, Math.min(Vn, w)), R = Math.max(he, Math.min(Vn, R))], q = [g = Math.max(he, Math.min(Vn, g)), C = Math.max(he, Math.min(Vn, C))];
        pi(U, q, n, e, t, r) ? (E || (l.lineStart(), l.point(U[0], U[1])), l.point(q[0], q[1]), z || l.lineEnd(), $ = !1) : z && (l.lineStart(), l.point(g, C), $ = !1);
      }
      w = g, R = C, E = z;
    }
    return L;
  };
}
const ut = (n) => n;
var Je = new Mn(), st = new Mn(), G1, J1, lt, ft, wn = {
  point: sn,
  lineStart: sn,
  lineEnd: sn,
  polygonStart: function() {
    wn.lineStart = di, wn.lineEnd = mi;
  },
  polygonEnd: function() {
    wn.lineStart = wn.lineEnd = wn.point = sn, Je.add(B(st)), st = new Mn();
  },
  result: function() {
    var n = Je / 2;
    return Je = new Mn(), n;
  }
};
function di() {
  wn.point = gi;
}
function gi(n, e) {
  wn.point = K1, G1 = lt = n, J1 = ft = e;
}
function K1(n, e) {
  st.add(ft * n - lt * e), lt = n, ft = e;
}
function mi() {
  K1(G1, J1);
}
const d1 = wn;
var Wn = 1 / 0, Pe = Wn, ne = -Wn, Re = ne, vi = {
  point: yi,
  lineStart: sn,
  lineEnd: sn,
  polygonStart: sn,
  polygonEnd: sn,
  result: function() {
    var n = [[Wn, Pe], [ne, Re]];
    return ne = Re = -(Pe = Wn = 1 / 0), n;
  }
};
function yi(n, e) {
  n < Wn && (Wn = n), n > ne && (ne = n), e < Pe && (Pe = e), e > Re && (Re = e);
}
const _e = vi;
var ct = 0, pt = 0, qn = 0, Ne = 0, Ce = 0, kn = 0, ht = 0, dt = 0, Bn = 0, X1, Z1, pn, hn, fn = {
  point: Pn,
  lineStart: g1,
  lineEnd: m1,
  polygonStart: function() {
    fn.lineStart = bi, fn.lineEnd = Ei;
  },
  polygonEnd: function() {
    fn.point = Pn, fn.lineStart = g1, fn.lineEnd = m1;
  },
  result: function() {
    var n = Bn ? [ht / Bn, dt / Bn] : kn ? [Ne / kn, Ce / kn] : qn ? [ct / qn, pt / qn] : [NaN, NaN];
    return ct = pt = qn = Ne = Ce = kn = ht = dt = Bn = 0, n;
  }
};
function Pn(n, e) {
  ct += n, pt += e, ++qn;
}
function g1() {
  fn.point = xi;
}
function xi(n, e) {
  fn.point = wi, Pn(pn = n, hn = e);
}
function wi(n, e) {
  var t = n - pn, r = e - hn, i = Nn(t * t + r * r);
  Ne += i * (pn + n) / 2, Ce += i * (hn + e) / 2, kn += i, Pn(pn = n, hn = e);
}
function m1() {
  fn.point = Pn;
}
function bi() {
  fn.point = Si;
}
function Ei() {
  Q1(X1, Z1);
}
function Si(n, e) {
  fn.point = Q1, Pn(X1 = pn = n, Z1 = hn = e);
}
function Q1(n, e) {
  var t = n - pn, r = e - hn, i = Nn(t * t + r * r);
  Ne += i * (pn + n) / 2, Ce += i * (hn + e) / 2, kn += i, i = hn * n - pn * e, ht += i * (pn + n), dt += i * (hn + e), Bn += i * 3, Pn(pn = n, hn = e);
}
const v1 = fn;
function nr(n) {
  this._context = n;
}
nr.prototype = {
  _radius: 4.5,
  pointRadius: function(n) {
    return this._radius = n, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    this._line === 0 && this._context.closePath(), this._point = NaN;
  },
  point: function(n, e) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(n, e), this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(n, e);
        break;
      }
      default: {
        this._context.moveTo(n + this._radius, e), this._context.arc(n, e, this._radius, 0, rn);
        break;
      }
    }
  },
  result: sn
};
var gt = new Mn(), Ke, er, tr, Un, Gn, De = {
  point: sn,
  lineStart: function() {
    De.point = Mi;
  },
  lineEnd: function() {
    Ke && rr(er, tr), De.point = sn;
  },
  polygonStart: function() {
    Ke = !0;
  },
  polygonEnd: function() {
    Ke = null;
  },
  result: function() {
    var n = +gt;
    return gt = new Mn(), n;
  }
};
function Mi(n, e) {
  De.point = rr, er = Un = n, tr = Gn = e;
}
function rr(n, e) {
  Un -= n, Gn -= e, gt.add(Nn(Un * Un + Gn * Gn)), Un = n, Gn = e;
}
const y1 = De;
let x1, $e, w1, b1;
class E1 {
  constructor(e) {
    this._append = e == null ? ir : Pi(e), this._radius = 4.5, this._ = "";
  }
  pointRadius(e) {
    return this._radius = +e, this;
  }
  polygonStart() {
    this._line = 0;
  }
  polygonEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    this._line === 0 && (this._ += "Z"), this._point = NaN;
  }
  point(e, t) {
    switch (this._point) {
      case 0: {
        this._append`M${e},${t}`, this._point = 1;
        break;
      }
      case 1: {
        this._append`L${e},${t}`;
        break;
      }
      default: {
        if (this._append`M${e},${t}`, this._radius !== w1 || this._append !== $e) {
          const r = this._radius, i = this._;
          this._ = "", this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`, w1 = r, $e = this._append, b1 = this._, this._ = i;
        }
        this._ += b1;
        break;
      }
    }
  }
  result() {
    const e = this._;
    return this._ = "", e.length ? e : null;
  }
}
function ir(n) {
  let e = 1;
  this._ += n[0];
  for (const t = n.length; e < t; ++e)
    this._ += arguments[e] + n[e];
}
function Pi(n) {
  const e = Math.floor(n);
  if (!(e >= 0))
    throw new RangeError(`invalid digits: ${n}`);
  if (e > 15)
    return ir;
  if (e !== x1) {
    const t = 10 ** e;
    x1 = e, $e = function(i) {
      let s = 1;
      this._ += i[0];
      for (const a = i.length; s < a; ++s)
        this._ += Math.round(arguments[s] * t) / t + i[s];
    };
  }
  return $e;
}
function Ri(n, e) {
  let t = 3, r = 4.5, i, s;
  function a(u) {
    return u && (typeof r == "function" && s.pointRadius(+r.apply(this, arguments)), On(u, i(s))), s.result();
  }
  return a.area = function(u) {
    return On(u, i(d1)), d1.result();
  }, a.measure = function(u) {
    return On(u, i(y1)), y1.result();
  }, a.bounds = function(u) {
    return On(u, i(_e)), _e.result();
  }, a.centroid = function(u) {
    return On(u, i(v1)), v1.result();
  }, a.projection = function(u) {
    return arguments.length ? (i = u == null ? (n = null, ut) : (n = u).stream, a) : n;
  }, a.context = function(u) {
    return arguments.length ? (s = u == null ? (e = null, new E1(t)) : new nr(e = u), typeof r != "function" && s.pointRadius(r), a) : e;
  }, a.pointRadius = function(u) {
    return arguments.length ? (r = typeof u == "function" ? u : (s.pointRadius(+u), +u), a) : r;
  }, a.digits = function(u) {
    if (!arguments.length)
      return t;
    if (u == null)
      t = null;
    else {
      const h = Math.floor(u);
      if (!(h >= 0))
        throw new RangeError(`invalid digits: ${u}`);
      t = h;
    }
    return e === null && (s = new E1(t)), a;
  }, a.projection(n).digits(t).context(e);
}
function bt(n) {
  return function(e) {
    var t = new mt();
    for (var r in n)
      t[r] = n[r];
    return t.stream = e, t;
  };
}
function mt() {
}
mt.prototype = {
  constructor: mt,
  point: function(n, e) {
    this.stream.point(n, e);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};
function Et(n, e, t) {
  var r = n.clipExtent && n.clipExtent();
  return n.scale(150).translate([0, 0]), r != null && n.clipExtent(null), On(t, n.stream(_e)), e(_e.result()), r != null && n.clipExtent(r), n;
}
function ar(n, e, t) {
  return Et(n, function(r) {
    var i = e[1][0] - e[0][0], s = e[1][1] - e[0][1], a = Math.min(i / (r[1][0] - r[0][0]), s / (r[1][1] - r[0][1])), u = +e[0][0] + (i - a * (r[1][0] + r[0][0])) / 2, h = +e[0][1] + (s - a * (r[1][1] + r[0][1])) / 2;
    n.scale(150 * a).translate([u, h]);
  }, t);
}
function _i(n, e, t) {
  return ar(n, [[0, 0], e], t);
}
function Ni(n, e, t) {
  return Et(n, function(r) {
    var i = +e, s = i / (r[1][0] - r[0][0]), a = (i - s * (r[1][0] + r[0][0])) / 2, u = -s * r[0][1];
    n.scale(150 * s).translate([a, u]);
  }, t);
}
function Ci(n, e, t) {
  return Et(n, function(r) {
    var i = +e, s = i / (r[1][1] - r[0][1]), a = -s * r[0][0], u = (i - s * (r[1][1] + r[0][1])) / 2;
    n.scale(150 * s).translate([a, u]);
  }, t);
}
var S1 = 16, Di = J(30 * Z);
function M1(n, e) {
  return +e ? Oi(n, e) : $i(n);
}
function $i(n) {
  return bt({
    point: function(e, t) {
      e = n(e, t), this.stream.point(e[0], e[1]);
    }
  });
}
function Oi(n, e) {
  function t(r, i, s, a, u, h, c, l, f, p, d, m, M, b) {
    var P = c - r, w = l - i, R = P * P + w * w;
    if (R > 4 * e && M--) {
      var E = a + p, S = u + d, $ = h + m, L = Nn(E * E + S * S + $ * $), O = Qn($ /= L), T = B(B($) - 1) < Y || B(s - f) < Y ? (s + f) / 2 : Zn(S, E), W = n(T, O), y = W[0], V = W[1], N = y - r, D = V - i, g = w * N - P * D;
      (g * g / R > e || B((P * N + w * D) / R - 0.5) > 0.3 || a * p + u * d + h * m < Di) && (t(r, i, s, a, u, h, y, V, T, E /= L, S /= L, $, M, b), b.point(y, V), t(y, V, T, E, S, $, c, l, f, p, d, m, M, b));
    }
  }
  return function(r) {
    var i, s, a, u, h, c, l, f, p, d, m, M, b = {
      point: P,
      lineStart: w,
      lineEnd: E,
      polygonStart: function() {
        r.polygonStart(), b.lineStart = S;
      },
      polygonEnd: function() {
        r.polygonEnd(), b.lineStart = w;
      }
    };
    function P(O, T) {
      O = n(O, T), r.point(O[0], O[1]);
    }
    function w() {
      f = NaN, b.point = R, r.lineStart();
    }
    function R(O, T) {
      var W = Fn([O, T]), y = n(O, T);
      t(f, p, l, d, m, M, f = y[0], p = y[1], l = O, d = W[0], m = W[1], M = W[2], S1, r), r.point(f, p);
    }
    function E() {
      b.point = P, r.lineEnd();
    }
    function S() {
      w(), b.point = $, b.lineEnd = L;
    }
    function $(O, T) {
      R(i = O, T), s = f, a = p, u = d, h = m, c = M, b.point = R;
    }
    function L() {
      t(f, p, l, d, m, M, s, a, i, u, h, c, S1, r), b.lineEnd = E, E();
    }
    return b;
  };
}
var Ti = bt({
  point: function(n, e) {
    this.stream.point(n * Z, e * Z);
  }
});
function Ai(n) {
  return bt({
    point: function(e, t) {
      var r = n(e, t);
      return this.stream.point(r[0], r[1]);
    }
  });
}
function ki(n, e, t, r, i) {
  function s(a, u) {
    return a *= r, u *= i, [e + n * a, t - n * u];
  }
  return s.invert = function(a, u) {
    return [(a - e) / n * r, (t - u) / n * i];
  }, s;
}
function P1(n, e, t, r, i, s) {
  if (!s)
    return ki(n, e, t, r, i);
  var a = J(s), u = K(s), h = a * n, c = u * n, l = a / n, f = u / n, p = (u * t - a * e) / n, d = (u * e + a * t) / n;
  function m(M, b) {
    return M *= r, b *= i, [h * M - c * b + e, t - c * M - h * b];
  }
  return m.invert = function(M, b) {
    return [r * (l * M - f * b + p), i * (d - f * M - l * b)];
  }, m;
}
function ji(n) {
  return Li(function() {
    return n;
  })();
}
function Li(n) {
  var e, t = 150, r = 480, i = 250, s = 0, a = 0, u = 0, h = 0, c = 0, l, f = 0, p = 1, d = 1, m = null, M = h1, b = null, P, w, R, E = ut, S = 0.5, $, L, O, T, W;
  function y(g) {
    return O(g[0] * Z, g[1] * Z);
  }
  function V(g) {
    return g = O.invert(g[0], g[1]), g && [g[0] * tn, g[1] * tn];
  }
  y.stream = function(g) {
    return T && W === g ? T : T = Ti(Ai(l)(M($(E(W = g)))));
  }, y.preclip = function(g) {
    return arguments.length ? (M = g, m = void 0, D()) : M;
  }, y.postclip = function(g) {
    return arguments.length ? (E = g, b = P = w = R = null, D()) : E;
  }, y.clipAngle = function(g) {
    return arguments.length ? (M = +g ? ci(m = g * Z) : (m = null, h1), D()) : m * tn;
  }, y.clipExtent = function(g) {
    return arguments.length ? (E = g == null ? (b = P = w = R = null, ut) : hi(b = +g[0][0], P = +g[0][1], w = +g[1][0], R = +g[1][1]), D()) : b == null ? null : [[b, P], [w, R]];
  }, y.scale = function(g) {
    return arguments.length ? (t = +g, N()) : t;
  }, y.translate = function(g) {
    return arguments.length ? (r = +g[0], i = +g[1], N()) : [r, i];
  }, y.center = function(g) {
    return arguments.length ? (s = g[0] % 360 * Z, a = g[1] % 360 * Z, N()) : [s * tn, a * tn];
  }, y.rotate = function(g) {
    return arguments.length ? (u = g[0] % 360 * Z, h = g[1] % 360 * Z, c = g.length > 2 ? g[2] % 360 * Z : 0, N()) : [u * tn, h * tn, c * tn];
  }, y.angle = function(g) {
    return arguments.length ? (f = g % 360 * Z, N()) : f * tn;
  }, y.reflectX = function(g) {
    return arguments.length ? (p = g ? -1 : 1, N()) : p < 0;
  }, y.reflectY = function(g) {
    return arguments.length ? (d = g ? -1 : 1, N()) : d < 0;
  }, y.precision = function(g) {
    return arguments.length ? ($ = M1(L, S = g * g), D()) : Nn(S);
  }, y.fitExtent = function(g, C) {
    return ar(y, g, C);
  }, y.fitSize = function(g, C) {
    return _i(y, g, C);
  }, y.fitWidth = function(g, C) {
    return Ni(y, g, C);
  }, y.fitHeight = function(g, C) {
    return Ci(y, g, C);
  };
  function N() {
    var g = P1(t, 0, 0, p, d, f).apply(null, e(s, a)), C = P1(t, r - g[0], i - g[1], p, d, f);
    return l = V1(u, h, c), L = at(e, C), O = at(l, L), $ = M1(L, S), D();
  }
  function D() {
    return T = W = null, y;
  }
  return function() {
    return e = n.apply(this, arguments), y.invert = e.invert && V, N();
  };
}
function St(n, e) {
  return [n, Q2(ei((en + e) / 2))];
}
St.invert = function(n, e) {
  return [n, 2 * Y1(Z2(e)) - en];
};
function Ii() {
  return Fi(St).scale(961 / rn);
}
function Fi(n) {
  var e = ji(n), t = e.center, r = e.scale, i = e.translate, s = e.clipExtent, a = null, u, h, c;
  e.scale = function(f) {
    return arguments.length ? (r(f), l()) : r();
  }, e.translate = function(f) {
    return arguments.length ? (i(f), l()) : i();
  }, e.center = function(f) {
    return arguments.length ? (t(f), l()) : t();
  }, e.clipExtent = function(f) {
    return arguments.length ? (f == null ? a = u = h = c = null : (a = +f[0][0], u = +f[0][1], h = +f[1][0], c = +f[1][1]), l()) : a == null ? null : [[a, u], [h, c]];
  };
  function l() {
    var f = j * r(), p = e(ri(e.rotate()).invert([0, 0]));
    return s(a == null ? [[p[0] - f, p[1] - f], [p[0] + f, p[1] + f]] : n === St ? [[Math.max(p[0] - f, a), u], [Math.min(p[0] + f, h), c]] : [[a, Math.max(p[1] - f, u)], [h, Math.min(p[1] + f, c)]]);
  }
  return l();
}
class Wi extends Rn.Component {
  constructor(t) {
    super(t);
    bn(this, "state", {
      isActive: !1
    });
    this.handleMouseEnter = this.handleMouseEnter.bind(this), this.handleMouseLeave = this.handleMouseLeave.bind(this);
  }
  componentDidMount() {
    window.addEventListener("scroll", this.handleMouseLeave);
  }
  componentWillUnmount() {
    window.removeEventListener("scroll", this.handleMouseLeave);
  }
  handleMouseEnter() {
    const { name: t, value: r, index: i } = this.props;
    this.setState({
      isActive: !0
    }), this.props.mouseEnterOnState(t, r, i);
  }
  handleMouseLeave() {
    this.setState({
      isActive: !1
    });
  }
  render() {
    const t = {
      fill: this.state.isActive ? this.props.hoverColor || "#FFCCBC" : this.props.fillColor,
      stroke: this.state.isActive ? this.props.hoverBorderColor || "#FF5722" : this.props.borderColor,
      strokeWidth: 0.5
    };
    return /* @__PURE__ */ F.jsx(
      "path",
      {
        className: "datamap-state",
        style: t,
        d: this.props.path(),
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      }
    );
  }
}
class Hi extends Rn.Component {
  constructor(t) {
    super(t);
    bn(this, "state", {
      topoJSONfeatures: this.props.topoData
    });
    bn(this, "drawPath", zi(this.props.svgWidth, this.props.svgHeight));
    this.handleMouseEnterOnState = this.handleMouseEnterOnState.bind(this), this.renderDatamapStates = this.renderDatamapStates.bind(this);
  }
  handleMouseEnterOnState(t, r, i) {
    const s = [
      ...this.state.topoJSONfeatures.slice(0, i),
      ...this.state.topoJSONfeatures.slice(i + 1),
      this.state.topoJSONfeatures[i]
    ];
    this.setState({
      topoJSONfeatures: s
    }), this.props.mouseEnterOnState(t, r);
  }
  renderDatamapStates() {
    const {
      colorScale: t,
      noDataColor: r,
      borderColor: i,
      hoverColor: s,
      hoverBorderColor: a
    } = this.props;
    return this.state.topoJSONfeatures.map((u, h) => {
      const c = this.props.regionData[u.properties.name], l = c ? t(c.value) : r;
      return /* @__PURE__ */ F.jsx(
        Wi,
        {
          index: h,
          path: () => this.drawPath(u),
          name: u.properties.name,
          fillColor: l,
          hoverColor: s,
          borderColor: i,
          hoverBorderColor: a,
          mouseEnterOnState: this.handleMouseEnterOnState,
          value: c
        },
        u.id
      );
    });
  }
  render() {
    return /* @__PURE__ */ F.jsx(
      "g",
      {
        onMouseMove: this.props.mouseMoveOnDatamap,
        onMouseEnter: this.props.mouseEnterOnDatamap,
        onMouseLeave: this.props.mouseLeaveDatamap,
        children: this.renderDatamapStates()
      }
    );
  }
}
function zi(n, e) {
  const r = {
    projection: function(s, a) {
      return Ii().center([78, 27]).scale(s * 1.3).translate([s / 2.5, a / 3]);
    }
  }.projection(n, e);
  return Ri().projection(r);
}
const R1 = { textAnchor: "middle", fontSize: 7, fill: "#333" };
function Yi(n, e) {
  const t = e.startColor, r = e.endColor;
  return wt().domain([0, 130]).range([t, r]).interpolate(F1)(n);
}
function Vi({
  svgHeight: n,
  svgWidth: e,
  mapLayout: t
}) {
  return Array(40).fill(void 0).map((r, i) => /* @__PURE__ */ F.jsx(
    "rect",
    {
      x: e - 280 + i * 4,
      y: n - 50,
      width: 5,
      height: "5",
      fill: `${Yi(i * 4, t)}`,
      stroke: "none"
    },
    i
  ));
}
const qi = ({
  extremeValues: { min: n, max: e },
  mapLayout: t,
  svgWidth: r,
  svgHeight: i
}) => /* @__PURE__ */ F.jsxs("g", { children: [
  /* @__PURE__ */ F.jsx("text", { x: r - 280, y: i - 60, style: R1, children: n }),
  /* @__PURE__ */ F.jsx("text", { x: r - 120, y: i - 60, style: R1, children: e }),
  Vi({ svgWidth: r, svgHeight: i, mapLayout: t })
] }), Bi = 400, Ui = (n) => {
  const e = Bi, t = e, { mapLayout: r, extremeValues: i, regionData: s } = n, {
    noDataColor: a,
    borderColor: u,
    hoverColor: h,
    startColor: c,
    endColor: l,
    hoverBorderColor: f
  } = r, { min: p, max: d } = i, m = {
    display: "inline-block",
    position: "absolute",
    top: 0,
    left: 0
  }, M = wt().domain([p, d]).range([c, l]).interpolate(F1), b = /* @__PURE__ */ F.jsx(
    qi,
    {
      svgWidth: e,
      svgHeight: t,
      extremeValues: i,
      mapLayout: r
    }
  ), P = !isNaN(p) && !isNaN(d) && isFinite(p) && isFinite(d);
  return /* @__PURE__ */ F.jsx(
    "svg",
    {
      style: m,
      preserveAspectRatio: "xMinYMin meet",
      viewBox: "0 0 400 400",
      children: /* @__PURE__ */ F.jsxs("g", { id: "root-svg-group", children: [
        /* @__PURE__ */ F.jsx(
          r1,
          {
            text: n.mapLayout.title,
            className: "map-title",
            coords: { x: 30, y: 40 }
          }
        ),
        /* @__PURE__ */ F.jsx(
          Hi,
          {
            topoData: n.topoData,
            regionData: s,
            svgWidth: e,
            svgHeight: t,
            colorScale: M,
            noDataColor: a,
            borderColor: u,
            hoverColor: h,
            hoverBorderColor: f,
            mouseMoveOnDatamap: n.mouseMoveOnDatamap,
            mouseEnterOnDatamap: n.mouseEnterOnDatamap,
            mouseLeaveDatamap: n.mouseLeaveDatamap,
            mouseEnterOnState: n.mouseEnterOnState
          }
        ),
        /* @__PURE__ */ F.jsx(
          r1,
          {
            text: n.mapLayout.legendTitle,
            className: "legend-title",
            coords: { x: e - 190, y: t - 35 }
          }
        ),
        P && b
      ] })
    }
  );
}, Gi = (n, e) => n.infoWindowPos.x === e.infoWindowPos.x && n.infoWindowPos.y === e.infoWindowPos.y && n.regionData === e.regionData, Ji = Rn.memo(Ui, Gi);
class Ki extends Rn.Component {
  constructor() {
    super(...arguments);
    bn(this, "refHoverInfo");
  }
  render() {
    var i;
    const t = {
      left: this.props.position.x - 50,
      top: this.props.position.y - (((i = this.refHoverInfo) == null ? void 0 : i.offsetHeight) ?? 0) - 20,
      display: this.props.active ? "block" : "none"
    }, r = this.props.hoverComponent;
    return /* @__PURE__ */ F.jsxs(
      "div",
      {
        ref: (s) => this.refHoverInfo = s,
        className: "HoverInfo",
        style: t,
        children: [
          this.props.hoverComponent ? /* @__PURE__ */ F.jsx(
            r,
            {
              value: { ...this.props.value, name: this.props.name }
            }
          ) : /* @__PURE__ */ F.jsxs(F.Fragment, { children: [
            /* @__PURE__ */ F.jsx("p", { children: this.props.name }),
            isFinite(this.props.value) && /* @__PURE__ */ F.jsxs("p", { children: [
              this.props.valueTitle ? `${this.props.valueTitle}: ` : "",
              this.props.value
            ] })
          ] }),
          /* @__PURE__ */ F.jsx("style", { children: `
          .HoverInfo {
            position: fixed;
            min-width: 8ch;
            background-color: white;
            box-shadow: 0px 0px 14px rgba(0, 0, 0, 0.3);
            padding: 7px;
            border-radius: 4px;
          }
          .HoverInfo p {
            margin: 0;
            font-size: 0.9em;
          }
        ` })
        ]
      }
    );
  }
}
function Xi() {
  return /* @__PURE__ */ F.jsx("div", { children: /* @__PURE__ */ F.jsx("style", { children: `
        .map-title {
          text-anchor: start;
          font-size: 18px;
        }

        .legend-title {
          fill: gray;
          text-anchor: end;
          font-size: 8px;
        }
      ` }) });
}
const Zi = Lr(
  // @ts-ignore
  Ht,
  Ht.objects.india
  // @ts-ignore
).features, _1 = {
  title: "",
  hoverName: "",
  legendTitle: "",
  startColor: "orange",
  endColor: "red",
  hoverTitle: "Count",
  noDataColor: "#f5f5f5",
  borderColor: "#8D8D8D",
  hoverColor: "green"
};
class Qi extends Rn.Component {
  constructor(t) {
    super(t);
    bn(this, "state", {
      infoWindowPosition: {
        x: 0,
        y: 0
      },
      isInfoWindowActive: !1,
      activeState: {
        name: "",
        value: 0
      },
      regionData: this.props.regionData,
      mapLayout: { ..._1, ...this.props.mapLayout }
    });
    this.mouseMoveOnDatamap = this.mouseMoveOnDatamap.bind(this), this.mouseEnterOnDatamap = this.mouseEnterOnDatamap.bind(this), this.mouseLeaveDatamap = this.mouseLeaveDatamap.bind(this), this.mouseEnterOnState = this.mouseEnterOnState.bind(this), this.calculateExtremeValues = this.calculateExtremeValues.bind(this);
  }
  componentDidMount() {
    window.addEventListener("scroll", this.mouseLeaveDatamap);
  }
  componentWillUnmount() {
    window.removeEventListener("scroll", this.mouseLeaveDatamap);
  }
  static getDerivedStateFromProps(t, r) {
    return t.regionData !== r.regionData ? {
      regionData: t.regionData
    } : t.mapLayout !== r.mapLayout ? {
      mapLayout: { ..._1, ...t.mapLayout }
    } : null;
  }
  calculateExtremeValues(t) {
    const r = Object.values(t).map(
      (i) => i.value ?? i
    );
    return {
      min: Math.min(...r),
      max: Math.max(...r)
    };
  }
  mouseMoveOnDatamap(t) {
    this.setState({
      infoWindowPosition: { x: t.clientX, y: t.clientY },
      isInfoWindowActive: !0
    });
  }
  mouseEnterOnDatamap() {
    this.setState({
      isInfoWindowActive: !0
    });
  }
  mouseLeaveDatamap() {
    this.setState({
      isInfoWindowActive: !1
    });
  }
  mouseEnterOnState(t, r) {
    this.setState({
      activeState: {
        name: t,
        value: r
      },
      isInfoWindowActive: !0
    });
  }
  render() {
    return /* @__PURE__ */ F.jsxs(F.Fragment, { children: [
      /* @__PURE__ */ F.jsx(
        Ji,
        {
          topoData: Zi,
          mapLayout: this.state.mapLayout,
          regionData: this.state.regionData,
          extremeValues: this.calculateExtremeValues(this.state.regionData),
          mouseMoveOnDatamap: this.mouseMoveOnDatamap,
          mouseEnterOnDatamap: this.mouseEnterOnDatamap,
          mouseLeaveDatamap: this.mouseLeaveDatamap,
          mouseEnterOnState: this.mouseEnterOnState,
          infoWindowPos: this.state.infoWindowPosition
        }
      ),
      this.state.mapLayout.hoverName || this.state.activeState.name ? /* @__PURE__ */ F.jsx(
        Ki,
        {
          active: this.state.isInfoWindowActive,
          position: this.state.infoWindowPosition,
          name: this.state.mapLayout.hoverName || this.state.activeState.name,
          value: this.state.activeState.value,
          valueTitle: this.state.mapLayout.hoverTitle || "",
          hoverComponent: this.props.hoverComponent
        }
      ) : null,
      /* @__PURE__ */ F.jsx(Xi, {})
    ] });
  }
}
bn(Qi, "defaultProps", {
  regionData: {}
});
export {
  Qi as default
};
